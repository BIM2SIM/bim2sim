stages:
  - code_quality


.test-default: &test-default

  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "main"
      changes:
        - bim2sim/**/*.py
      when: always
    - if: $CI_COMMIT_MESSAGE =~ /ci_code_quality/
      when: manual



pylint:
 <<: *test-default
 stage: code_quality
 image: python:3.6
 services:
   - name: docker:18.09.7-dind
     command: ["--mtu=1440"]
 before_script:
   - pip install pylint pylint-json2html anybadge --quiet
 script:
    - mkdir -p $CI_COMMIT_REF_NAME/pylint
    # Determine code to check: in a user-defined directory, or module with the project name, or all python files
    # (In case of using the project name, make project-name pep8 lowercase to be detected by pylint)
    - if [ ! -z "$PYLINT_INPUT" ]; 
      then echo "Using user-defined source dir"; 
      elif [ -d "$CI_PROJECT_NAME" ]; 
      then echo "Using repo name as module name" && PYLINT_INPUT=`echo "$CI_PROJECT_NAME" | tr '[:upper:]' '[:lower:]'`; 
      else echo "Checking all python files" && PYLINT_INPUT="**/*.py"; 
      fi
    # Run pylint on the python-project
    - pylint --output-format=text $PYLINT_INPUT --exit-zero | tee $CI_COMMIT_REF_NAME/pylint/pylint.txt
    - score=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' $CI_COMMIT_REF_NAME/pylint/pylint.txt)
    - anybadge --value=$score --file=$CI_COMMIT_REF_NAME/pylint/pylint.svg pylint
    - pylint --output-format=jsonextended --load-plugins=pylint_json2html --exit-zero $PYLINT_INPUT | tee $CI_COMMIT_REF_NAME/pylint/pylint.json
    - pylint-json2html -f jsonextended -o $CI_COMMIT_REF_NAME/pylint/pylint.html < $CI_COMMIT_REF_NAME/pylint/pylint.json
 artifacts:
   paths:
   - $CI_COMMIT_REF_NAME/pylint
   expire_in: 2 hrs



