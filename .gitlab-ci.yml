.only-default: &only-default
  only:
    - master
    - merge_requests
    - tags
    - branches

stages:
  - build
  - test
  - doc
  - deploy
  - visualize

build_env:development:
  image: docker:latest
  stage: build
  before_script:
    - docker login -u $CI_DEPLOY_TOKEN_USERNAME -p $CI_DEPLOY_TOKEN_PASSWORD $CI_REGISTRY_LOGIN
  script:
    - docker build -t $CI_REGISTRY/environment:development -f Environment/Dockerfile_Base .
    - docker push $CI_REGISTRY/environment:development
  only:
    refs:
       - development
    changes:
       - Environment/Dockerfile_Base
       - MainLib/requirements.txt
       - .gitlab-ci.yml

build_env:energyplus:
  image: docker:latest
  stage: build
  before_script:
    - docker login -u $CI_DEPLOY_TOKEN_USERNAME -p $CI_DEPLOY_TOKEN_PASSWORD $CI_REGISTRY_LOGIN
  script:
    - docker build -t $CI_REGISTRY/environment:energyplus -f Environment/Dockerfile_EP .
    - docker push $CI_REGISTRY/environment:energyplus
  only:
    refs:
       - development
       - 128_energyPlusDocker
    changes:
       - Environment/Dockerfile_Base
       - MainLib/requirements.txt
       - .gitlab-ci.yml

build_env:master:
  image: docker:latest
  stage: build
  before_script:
    - docker login -u $CI_DEPLOY_TOKEN_USERNAME -p $CI_DEPLOY_TOKEN_PASSWORD $CI_REGISTRY_LOGIN
  script:
    - docker build -t $CI_REGISTRY/environment:master -f Environment/Dockerfile_Base .
    - docker push $CI_REGISTRY/environment:master
  only:
    refs:
       - master
    changes:
       - Environment/Dockerfile_Base
       - MainLib/requirements.txt      

build_tool:release:
  image: docker:latest
  stage: build
  before_script:
    - docker login -u $CI_DEPLOY_TOKEN_USERNAME -p $CI_DEPLOY_TOKEN_PASSWORD $CI_REGISTRY_LOGIN
  script:
    - docker build -t $CI_REGISTRY/tool:latest .
    - docker push $CI_REGISTRY/tool:latest
  only:
    - master

build_tool:webdevelop:
  image: docker:latest
  stage: build
  before_script:
    - docker login -u $CI_DEPLOY_TOKEN_USERNAME -p $CI_DEPLOY_TOKEN_PASSWORD $CI_REGISTRY_LOGIN
  script:
    - docker build -t $CI_REGISTRY/tool:web_develop .
    - docker push $CI_REGISTRY/tool:web_develop
  only:
    - frontend

# unittest3.7:
#   <<: *only-default
#   image: $CI_REGISTRY/environment:development
#   stage: test
#   script:
#     - mv ./* /bim2sim/
# #    - source activate base
#     - python /bim2sim/MainLib/run_tests.py

coverage:
  <<: *only-default
  image: $CI_REGISTRY/environment:development
  stage: test
  before_script:
    - pip install coverage
    - pip install coverage-badge
  script:
    - mv ./* /bim2sim/
#    - source activate base
    - coverage run -m unittest discover /bim2sim
    - coverage report -i
    - mkdir -p $CI_COMMIT_REF_NAME/coverage
    - coverage html -i 
    - cp htmlcov/* $CI_COMMIT_REF_NAME/coverage/
    # skip this for now as its only cosmetic and leads to problems
    # - coverage-badge -o coverage.svg
    # - cp coverage.svg $CI_COMMIT_REF_NAME/coverage/
  artifacts:
    paths:
    - $CI_COMMIT_REF_NAME/coverage


coverage_EP:
  <<: *only-default
  image: $CI_REGISTRY/environment:energyplus
  stage: test
  before_script:
    - pip install coverage
    - pip install coverage-badge
  script:
    - mv ./* /bim2sim/
#    - source activate base
    - coverage run -m unittest discover /bim2sim/PluginEnergyPlus/test/integration_test
    - coverage report -i
    - mkdir -p $CI_COMMIT_REF_NAME/coverage
    - coverage html -i 
    - cp htmlcov/* $CI_COMMIT_REF_NAME/coverage/
    # skip this for now as its only cosmetic and leads to problems
    # - coverage-badge -o coverage.svg
    # - cp coverage.svg $CI_COMMIT_REF_NAME/coverage/
  artifacts:
    paths:
    - $CI_COMMIT_REF_NAME/coverage
    

#todo check if this is still needed or if master branch results are also available under $CI_COMMIT_REF_NAME/...
# pylint:
#   stage: test
#   image: python:3.6
#   script:
#     - pip install pylint pylint-json2html pylint-exit anybadge --quiet
#     - mkdir public
#     - shopt -s globstar
#     - pylint --output-format=text **/*.py | tee public/pylint.txt || pylint-exit $?
#     - score=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' public/pylint.txt)
#     - echo "Pylint score was $score"
#     - anybadge --value=$score --file=public/pylint.svg pylint
#     - pylint --output-format=jsonextended --disable=import-error --load-plugins=pylint_json2html **/*.py | tee public/pylint.json || pylint-exit $?
#     - pylint-json2html -f jsonextended -o public/index.html < public/pylint.json
#   artifacts:
#     paths:
#     - public
#   only:
#     - master

pylint:
  stage: test
  image: python:3.6
  script:
    - pip install pylint pylint-json2html pylint-exit anybadge --quiet
    - mkdir -p $CI_COMMIT_REF_NAME/pylint
    - shopt -s globstar
    - pylint --output-format=text **/*.py | tee $CI_COMMIT_REF_NAME/pylint/pylint.txt || pylint-exit $?
    - score=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' $CI_COMMIT_REF_NAME/pylint/pylint.txt)
    - echo "Pylint score was $score"
    - anybadge --value=$score --file=$CI_COMMIT_REF_NAME/pylint/pylint.svg pylint
    - pylint --output-format=jsonextended --disable=import-error --load-plugins=pylint_json2html **/*.py | tee $CI_COMMIT_REF_NAME/pylint/pylint.json || pylint-exit $?
    - pylint-json2html -f jsonextended -o $CI_COMMIT_REF_NAME/pylint/pylint.html < $CI_COMMIT_REF_NAME/pylint/pylint.json
    # todo integrate, that batch in readme.md is changed automaticly for branches
    # - sed -i 's/pylint](.*)/pylint]( test )/g' README.md
  artifacts:
    paths:
    - $CI_COMMIT_REF_NAME/pylint

sphinxdoc:
  image: $CI_REGISTRY/environment:development
  stage: doc

  before_script:
    - pip install sphinx anybadge sphinx-rtd-theme
    - pip install m2r2
    
  script:
    - mv ./* /bim2sim/
#    - source activate base
    - mkdir -p $CI_COMMIT_REF_NAME/docs
    - sphinx-apidoc -o /bim2sim/docs/source /bim2sim  # create rst files for all python files 
    - sphinx-build -b html /bim2sim/docs/source $CI_COMMIT_REF_NAME/docs
    - anybadge --value="passing" --file=$CI_COMMIT_REF_NAME/docs/doc.svg --label documentation

  artifacts:
    paths:
    - $CI_COMMIT_REF_NAME/docs
    expire_in: 2 hrs

pages:
# Page to generate content to be downloaded in the artifact-section.
  image: ubuntu:latest
  stage: deploy
  before_script:
    - apt-get update -y
    - apt-get install zip unzip -y
  script:
    - set +e
    - curl --fail --header "PRIVATE-TOKEN:$GL_TOKEN" $CI_PAGES_URL/content.zip -o content.zip
    - if [ -e "content.zip" ]; then unzip "content.zip"; rm "content.zip"; fi
    - set -e
    # Add/update content
    # TODO: mv $CI_COMMIT_REF_NAME/* to public/$CI_COMMIT_REF_NAME/*
    - mkdir -p public/$CI_COMMIT_REF_NAME
    - cp -r $CI_COMMIT_REF_NAME/* public/$CI_COMMIT_REF_NAME
    # Zip the content and publish the zip again
    - zip -r "content.zip" "public"
    - mv "content.zip" "public/"
  artifacts:
    paths:
      - public

# mrpost:
#   stage: visualize
#   dependencies:
#     - pages
#   before_script:
#     - apt-get update -y
#     - apt-get install jq -y
#   script:
#     - newline=$' \n '
#     - msg1=$'## This is a CI-Post \n '
#     - msg2="**Pyint score** on your branch $CI_MERGE_REQUEST_TARGET_BRANCH_NAME [![pylint]( $CI_PAGES_URL/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME/pylint.svg )]( $CI_PAGES_URL/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME/pylint.html )  "
#     - msg3="**Pyint score** on branch $CI_COMMIT_REF_NAME [![pylint]( $CI_PAGES_URL/$CI_COMMIT_REF_NAME/pylint.svg )]( $CI_PAGES_URL/$CI_COMMIT_REF_NAME/pylint.html ) .  "
#     - msg4="You can view the **Pylint Log** by clicking on the badges  "
#     - msg=$msg1$msg2$newline$msg3$newline$msg4
#     - curl --request GET --header "PRIVATE-TOKEN:$GL_TOKEN" https://git.rwth-aachen.de/api/v4/projects/$CI_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID/notes | tee notes.json
#     - mapfile -t ids < <(jq '.[].id' notes.json)
#     - mapfile -t bodys < <(jq '.[].body' notes.json)
#     - len=${#ids[@]}
#     - for i in $(seq 0 $len); do if [[ ${bodys[i]} == *"This is a CI-Post"* ]]; then id=${ids[i]}; break; fi; done
#     - if [ -z ${id+x} ]; then curl -d "body=$msg" --request POST --header "PRIVATE-TOKEN:$GL_TOKEN" https://git.rwth-aachen.de/api/v4/projects/$CI_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID/notes?body=note; else curl -d "body=$msg" --request PUT --header "PRIVATE-TOKEN:$GL_TOKEN" https://git.rwth-aachen.de/api/v4/projects/$CI_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID/notes/$id/?body=note; fi
#     - curl -d "body=$msg" --request PUT --header "PRIVATE-TOKEN:$GL_TOKEN" https://git.rwth-aachen.de/api/v4/projects/$CI_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID/notes/$id/?body=note
#   only:
#     - merge_requests

