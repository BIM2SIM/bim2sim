.test-default: &test-default
  only:
    refs:
      - master
      - tags
      - branches
    changes:
      - bim2sim/**/*.py

stages:
  - test
  - code_quality
  - build-env
  - build-env-plugins
  - build-tool
  - doc
  - deploy
  - visualize

variables:
  GIT_SUBMODULE_STRATEGY: recursive

build_env:master:
 image: docker:latest
 stage: build-env
 services:
   - name: docker:18.09.7-dind
     command: ["--mtu=1440"]
 before_script:
   - docker login -u $CI_DEPLOY_TOKEN_USERNAME -p $CI_DEPLOY_TOKEN_PASSWORD $CI_REGISTRY_LOGIN
 script:
   - docker build -t $CI_REGISTRY/environment:master -f envBase.Dockerfile .
   - docker push $CI_REGISTRY/environment:master
 only:
   refs:
      - master
   changes:
      - envBase.Dockerfile
      - requirements.txt

build_env:development:
 image: docker:latest
 stage: build-env
 services:
   - name: docker:18.09.7-dind
     command: ["--mtu=1440"]
 #- docker:18.09.7-dind
 before_script:
   - docker login -u $CI_DEPLOY_TOKEN_USERNAME -p $CI_DEPLOY_TOKEN_PASSWORD $CI_REGISTRY_LOGIN
 script:
   - docker build -t $CI_REGISTRY/environment:development -f envBase.Dockerfile .
   - docker push $CI_REGISTRY/environment:development
 only:
   refs:
      - development
      - 83-split-plugins-from-kernel
   changes:
      - envBase.Dockerfile
      - requirements.txt
      - .gitlab-ci.yml

build_env:dymola:
 image: docker:latest
 stage: build-env
 services:
   - name: docker:18.09.7-dind
     command: ["--mtu=1440"]
 #- docker:18.09.7-dind
 before_script:
   - docker login -u $CI_DEPLOY_TOKEN_USERNAME -p $CI_DEPLOY_TOKEN_PASSWORD $CI_REGISTRY_LOGIN  # login bim2sim
   - docker login -u $CI_DEPLOY_TOKEN_USERNAME_DYMOLA -p $CI_DEPLOY_TOKEN_PASSWORD_DYMOLA $CI_REGISTRY_LOGIN_DYMOLA   # login bim2sim
 script:
   - docker build -t $CI_REGISTRY/environment:dymola -f envBaseDymola.Dockerfile .
   - docker push $CI_REGISTRY/environment:dymola
 only:
   refs:
      - development
      - 230_regression_tests
   changes:
      - envBaseDymola.Dockerfile
      - requirements.txt
      - .gitlab-ci.yml


build_env:energyplus:
  image: docker:latest
  stage: build-env-plugins
  services:
   - name: docker:18.09.7-dind
     command: ["--mtu=1440"]
  before_script:
    - docker login -u $CI_DEPLOY_TOKEN_USERNAME -p $CI_DEPLOY_TOKEN_PASSWORD $CI_REGISTRY_LOGIN
  script:
    - docker build -t $CI_REGISTRY/environment:energyplus -f bim2sim/plugins/PluginEnergyPlus/envEP.Dockerfile .
    - docker push $CI_REGISTRY/environment:energyplus
  only:
    refs:
       - development
    changes:
       - envBase.Dockerfile
       - bim2sim/plugins/PluginEnergyPlus/envEP.Dockerfile
       - bim2sim/plugins/PluginEnergyPlus/requirements.txt
       - requirements.txt
       - .gitlab-ci.yml

build_env:cfd:
 image: docker:latest
 stage: build-env-plugins
 services:
   - name: docker:18.09.7-dind
     command: ["--mtu=1440"]
 before_script:
   - docker login -u $CI_DEPLOY_TOKEN_USERNAME -p $CI_DEPLOY_TOKEN_PASSWORD $CI_REGISTRY_LOGIN
 script:
   - docker build -t $CI_REGISTRY/environment:cfd -f bim2sim/plugins/PluginCFD/envCFD.Dockerfile .
   - docker push $CI_REGISTRY/environment:cfd
 timeout: 6 hours
 only:
   refs:
      - development
   changes:
      - envBase.Dockerfile
      - bim2sim/plugins/PluginCFD/envCFD.Dockerfile
      - requirements.txt
      - .gitlab-ci.yml

build_env:teaser:
 image: docker:latest
 stage: build-env-plugins
 services:
   - name: docker:18.09.7-dind
     command: ["--mtu=1440"]
 before_script:
   - docker login -u $CI_DEPLOY_TOKEN_USERNAME -p $CI_DEPLOY_TOKEN_PASSWORD $CI_REGISTRY_LOGIN
 script:
   - docker build -t $CI_REGISTRY/environment:teaser -f bim2sim/plugins/PluginTEASER/envTEASER.Dockerfile .
   - docker push $CI_REGISTRY/environment:teaser
 only:
   refs:
     - development
   changes:
     - envBase.Dockerfile
     - bim2sim/plugins/PluginTEASER/requirements.txt
     - bim2sim/plugins/PluginTEASER/envTEASER.Dockerfile
     - requirements.txt
     - .gitlab-ci.yml


build_env:teaser-dymola:
 image: docker:latest
 stage: build-env-plugins
 services:
 - docker:18.09.7-dind
 before_script:
   - docker login -u $CI_DEPLOY_TOKEN_USERNAME -p $CI_DEPLOY_TOKEN_PASSWORD $CI_REGISTRY_LOGIN
 script:
   - docker build -t $CI_REGISTRY/environment:teaser-dymola -f bim2sim/plugins/PluginTEASER/envTEASER-dymola.Dockerfile .
   - docker push $CI_REGISTRY/environment:teaser-dymola
 only:
   refs:
     - development
     - 230_regression_tests
   changes:
     - envBase.Dockerfile
     - bim2sim/plugins/PluginTEASER/requirements.txt
     - bim2sim/plugins/PluginTEASER/envTEASER.Dockerfile
     - requirements.txt
     - .gitlab-ci.yml


build_env:aixlib:
 image: docker:latest
 stage: build-env-plugins
 services:
   - name: docker:18.09.7-dind
     command: ["--mtu=1440"]
 before_script:
   - docker login -u $CI_DEPLOY_TOKEN_USERNAME -p $CI_DEPLOY_TOKEN_PASSWORD $CI_REGISTRY_LOGIN
 script:
   - docker build -t $CI_REGISTRY/environment:aixlib -f bim2sim/plugins/PluginAixLib/envAixLib.Dockerfile .
   - docker push $CI_REGISTRY/environment:aixlib
 only:
   refs:
     - development
   changes:
     - envBase.Dockerfile
     - bim2sim/plugins/PluginAixLib/requirements.txt
     - bim2sim/plugins/PluginAixLib/envAixLib.Dockerfile
     - requirements.txt
     - .gitlab-ci.yml

build_tool:release:
 image: docker:latest
 stage: build-tool
 services:
   - name: docker:18.09.7-dind
     command: ["--mtu=1440"]
 before_script:
   - docker login -u $CI_DEPLOY_TOKEN_USERNAME -p $CI_DEPLOY_TOKEN_PASSWORD $CI_REGISTRY_LOGIN
 script:
   - docker build -t $CI_REGISTRY/tool:latest .
   - docker push $CI_REGISTRY/tool:latest
 only:
   - master

build_tool:development:
 image: docker:latest
 stage: build-tool
 services:
   - name: docker:18.09.7-dind
     command: ["--mtu=1440"]
 before_script:
   - docker login -u $CI_DEPLOY_TOKEN_USERNAME -p $CI_DEPLOY_TOKEN_PASSWORD $CI_REGISTRY_LOGIN
 script:
   - docker build -t $CI_REGISTRY/tool:development .
   - docker push $CI_REGISTRY/tool:development
 only:
   - development

build_tool:webdevelop:
 image: docker:latest
 stage: build-tool
 services:
   - name: docker:18.09.7-dind
     command: ["--mtu=1440"]
 before_script:
   - docker login -u $CI_DEPLOY_TOKEN_USERNAME -p $CI_DEPLOY_TOKEN_PASSWORD $CI_REGISTRY_LOGIN
 script:
   - docker build -t $CI_REGISTRY/tool:web_develop -f total.Dockerfile .
   - docker push $CI_REGISTRY/tool:web_develop
 only:
   - development

build_tool:cfd:
 image: docker:latest
 stage: build-tool
 services:
   - name: docker:18.09.7-dind
     command: ["--mtu=1440"]
 before_script:
   - docker login -u $CI_DEPLOY_TOKEN_USERNAME -p $CI_DEPLOY_TOKEN_PASSWORD $CI_REGISTRY_LOGIN
 script:
   - docker build -t $CI_REGISTRY/tool:cfd -f bim2sim/plugins/PluginCFD/cfd.Dockerfile .
   - docker push $CI_REGISTRY/tool:cfd
 only:
   changes:
      - bim2sim/plugins/PluginCFD/*

build_tool:teaser:
 image: docker:latest
 stage: build-tool
 services:
   - name: docker:18.09.7-dind
     command: ["--mtu=1440"]
 before_script:
   - docker login -u $CI_DEPLOY_TOKEN_USERNAME -p $CI_DEPLOY_TOKEN_PASSWORD $CI_REGISTRY_LOGIN
 script:
   - docker build -t $CI_REGISTRY/tool:teaser -f bim2sim/plugins/PluginTEASER/teaser.Dockerfile .
   - docker push $CI_REGISTRY/tool:teaser
 only:
   changes:
      - bim2sim/plugins/PluginTEASER/*

build_tool:aixlib:
 image: docker:latest
 stage: build-tool
 services:
   - name: docker:18.09.7-dind
     command: ["--mtu=1440"]
 before_script:
   - docker login -u $CI_DEPLOY_TOKEN_USERNAME -p $CI_DEPLOY_TOKEN_PASSWORD $CI_REGISTRY_LOGIN
 script:
   - docker build -t $CI_REGISTRY/tool:aixlib -f bim2sim/plugins/PluginAixLib/aixlib.Dockerfile .
   - docker push $CI_REGISTRY/tool:aixlib
 only:
   changes:
      - bim2sim/plugins/PluginAixLib/*

test_Base:
  <<: *test-default
  image: $CI_REGISTRY/environment:development
  stage: test
  services:
   - name: docker:18.09.7-dind
     command: ["--mtu=1440"]
  before_script:
    - pip install coverage
    - pip install coverage-badge
  script:
    - mv ./* /bim2sim-coding/
    - cd /bim2sim-coding
    - wget -O /bim2sim-coding/test/TestModels/download.zip https://rwth-aachen.sciebo.de/s/R6K1H5Z9fiB3EoB/download
    - unzip /bim2sim-coding/test/TestModels/download.zip -d /bim2sim-coding/test/TestModels/
    - coverage run -m unittest discover /bim2sim-coding/test
    - coverage report -i
    - mkdir -p $CI_COMMIT_REF_NAME/coverage
    - coverage html -i
    - cp htmlcov/* $CI_COMMIT_REF_NAME/coverage/
    # skip this for now as its only cosmetic and leads to problems
    # - coverage-badge -o coverage.svg
    # - cp coverage.svg $CI_COMMIT_REF_NAME/coverage/
  artifacts:
    paths:
    - $CI_COMMIT_REF_NAME/coverage

test_EP:
  <<: *test-default
  image: $CI_REGISTRY/environment:energyplus
  stage: test
  services:
   - name: docker:18.09.7-dind
     command: ["--mtu=1440"]
  before_script:
    - pip install coverage
    - pip install coverage-badge
  script:
    - mv ./* /bim2sim-coding/
    - cd /bim2sim-coding
    - cat /bim2sim-coding/bim2sim/plugins/PluginEnergyPlus/data/Minimal.idf
    - wget -O /bim2sim-coding/test/TestModels/download.zip https://rwth-aachen.sciebo.de/s/SAUQQgvwqeS96ix/download
    - unzip /bim2sim-coding/test/TestModels/download.zip -d /bim2sim-coding/test/TestModels/
    - coverage run -m unittest discover /bim2sim-coding/bim2sim/plugins/PluginEnergyPlus/test/integration_test
    - coverage report -i
    - mkdir -p $CI_COMMIT_REF_NAME/coverage
    - coverage html -i
    - cp htmlcov/* $CI_COMMIT_REF_NAME/coverage/
    # skip this for now as its only cosmetic and leads to problems
    # - coverage-badge -o coverage.svg
    # - cp coverage.svg $CI_COMMIT_REF_NAME/coverage/
  artifacts:
    paths:
    - $CI_COMMIT_REF_NAME/coverage

test_EP_regression:
  <<: *test-default
  image: $CI_REGISTRY/environment:energyplus
  stage: test
  before_script:
    - pip install coverage
    - pip install coverage-badge
  script:
    - mv ./* /bim2sim-coding/
    - cd /bim2sim-coding
    - cat /bim2sim-coding/bim2sim/plugins/PluginEnergyPlus/data/Minimal.idf
    - wget -O /bim2sim-coding/test/TestModels/download.zip https://rwth-aachen.sciebo.de/s/SAUQQgvwqeS96ix/download
    - unzip /bim2sim-coding/test/TestModels/download.zip -d /bim2sim-coding/test/TestModels/
    - coverage run -m unittest discover /bim2sim-coding/bim2sim/plugins/PluginEnergyPlus/test/regression_test
    - coverage report -i
    - mkdir -p $CI_COMMIT_REF_NAME/coverage
    - coverage html -i
    - cp htmlcov/* $CI_COMMIT_REF_NAME/coverage/
    # skip this for now as its only cosmetic and leads to problems
    # - coverage-badge -o coverage.svg
    # - cp coverage.svg $CI_COMMIT_REF_NAME/coverage/
  artifacts:
    paths:
    - $CI_COMMIT_REF_NAME/coverage

test_TEASER:
  <<: *test-default
  image: $CI_REGISTRY/environment:teaser
  stage: test
  services:
   - name: docker:18.09.7-dind
     command: ["--mtu=1440"]
  before_script:
    - pip install coverage
    - pip install coverage-badge
  script:
    - mv ./* /bim2sim-coding/
    - cd /bim2sim-coding
    - wget -O /bim2sim-coding/test/TestModels/download.zip https://rwth-aachen.sciebo.de/s/SAUQQgvwqeS96ix/download
    - unzip /bim2sim-coding/test/TestModels/download.zip -d /bim2sim-coding/test/TestModels/
    - coverage run -m unittest discover /bim2sim-coding/bim2sim/plugins/PluginTEASER/test/integration_test
    - coverage report -i
    - mkdir -p $CI_COMMIT_REF_NAME/coverage
    - coverage html -i
    - cp htmlcov/* $CI_COMMIT_REF_NAME/coverage/
    # skip this for now as its only cosmetic and leads to problems
    # - coverage-badge -o coverage.svg
    # - cp coverage.svg $CI_COMMIT_REF_NAME/coverage/
  artifacts:
    paths:
    - $CI_COMMIT_REF_NAME/coverage

test_TEASER_regression:
  <<: *test-default
  image: $CI_REGISTRY/environment:teaser-dymola
  stage: test
  before_script:
    - pip install coverage
    - pip install coverage-badge
  script:
    - mv ./* /bim2sim-coding/
    - cd /bim2sim-coding
    - wget -O /bim2sim-coding/test/TestModels/download.zip https://rwth-aachen.sciebo.de/s/SAUQQgvwqeS96ix/download
    - unzip /bim2sim-coding/test/TestModels/download.zip -d /bim2sim-coding/test/TestModels/
    - xvfb-run -n 77 coverage run -m unittest discover /bim2sim-coding/bim2sim/plugins/PluginTEASER/test/regression_test
    - coverage report -i
    - mkdir -p $CI_COMMIT_REF_NAME/coverage
    - coverage html -i
    - cp htmlcov/* $CI_COMMIT_REF_NAME/coverage/
    # skip this for now as its only cosmetic and leads to problems
    # - coverage-badge -o coverage.svg
    # - cp coverage.svg $CI_COMMIT_REF_NAME/coverage/
  artifacts:
    paths:
    - $CI_COMMIT_REF_NAME/coverage

test_CFD:
  <<: *test-default
  image: $CI_REGISTRY/environment:cfd
  stage: test
  services:
   - name: docker:18.09.7-dind
     command: ["--mtu=1440"]
  before_script:
    - pip install coverage
    - pip install coverage-badge
  script:
    - mv ./* /bim2sim-coding/
    - cd /bim2sim-coding
    - wget -O /bim2sim-coding/test/TestModels/download.zip https://rwth-aachen.sciebo.de/s/SAUQQgvwqeS96ix/download
    - unzip /bim2sim-coding/test/TestModels/download.zip -d /bim2sim-coding/test/TestModels/
    - coverage run -m unittest discover /bim2sim-coding/bim2sim/plugins/PluginCFD/test/integration_test
    - coverage report -i
    - mkdir -p $CI_COMMIT_REF_NAME/coverage
    - coverage html -i
    - cp htmlcov/* $CI_COMMIT_REF_NAME/coverage/
    # skip this for now as its only cosmetic and leads to problems
    # - coverage-badge -o coverage.svg
    # - cp coverage.svg $CI_COMMIT_REF_NAME/coverage/
  artifacts:
    paths:
    - $CI_COMMIT_REF_NAME/coverage

test_AixLib:
  <<: *test-default
  image: $CI_REGISTRY/environment:aixlib
  stage: test
  services:
   - name: docker:18.09.7-dind
     command: ["--mtu=1440"]
  before_script:
    - pip install coverage
    - pip install coverage-badge
  script:
    - mv ./* /bim2sim-coding/
    - cd /bim2sim-coding
    - wget -O /bim2sim-coding/test/TestModels/download.zip https://rwth-aachen.sciebo.de/s/R6K1H5Z9fiB3EoB/download
    - unzip /bim2sim-coding/test/TestModels/download.zip -d /bim2sim-coding/test/TestModels/
    - coverage run -m unittest discover /bim2sim-coding/bim2sim/plugins/PluginAixLib/test/integration_test
    - coverage report -i
    - mkdir -p $CI_COMMIT_REF_NAME/coverage
    - coverage html -i
    - cp htmlcov/* $CI_COMMIT_REF_NAME/coverage/
    # skip this for now as its only cosmetic and leads to problems
    # - coverage-badge -o coverage.svg
    # - cp coverage.svg $CI_COMMIT_REF_NAME/coverage/
  artifacts:
    paths:
    - $CI_COMMIT_REF_NAME/coverage

test_LCA:
  <<: *test-default
  image: $CI_REGISTRY/environment:development
  stage: test
  before_script:
    - pip install coverage
    - pip install coverage-badge
  script:
    - mv ./* /bim2sim-coding/
    - cd /bim2sim-coding
    - wget -O /bim2sim-coding/test/TestModels/download.zip https://rwth-aachen.sciebo.de/s/SAUQQgvwqeS96ix/download
    - unzip /bim2sim-coding/test/TestModels/download.zip -d /bim2sim-coding/test/TestModels/
    - coverage run -m unittest discover /bim2sim-coding/bim2sim/plugins/PluginLCA/test/integration_test
    - coverage report -i
    - mkdir -p $CI_COMMIT_REF_NAME/coverage
    - coverage html -i
    - cp htmlcov/* $CI_COMMIT_REF_NAME/coverage/
    # skip this for now as its only cosmetic and leads to problems
    # - coverage-badge -o coverage.svg
    # - cp coverage.svg $CI_COMMIT_REF_NAME/coverage/
  artifacts:
    paths:
    - $CI_COMMIT_REF_NAME/coverage


pylint:
 stage: code_quality
 image: python:3.6
 services:
   - name: docker:18.09.7-dind
     command: ["--mtu=1440"]
 before_script:
   - pip install pylint pylint-json2html anybadge --quiet
 script:
    - mkdir -p $CI_COMMIT_REF_NAME/pylint
    # Determine code to check: in a user-defined directory, or module with the project name, or all python files
    # (In case of using the project name, make project-name pep8 lowercase to be detected by pylint)
    - if [ ! -z "$PYLINT_INPUT" ]; 
      then echo "Using user-defined source dir"; 
      elif [ -d "$CI_PROJECT_NAME" ]; 
      then echo "Using repo name as module name" && PYLINT_INPUT=`echo "$CI_PROJECT_NAME" | tr '[:upper:]' '[:lower:]'`; 
      else echo "Checking all python files" && PYLINT_INPUT="**/*.py"; 
      fi
    # Run pylint on the python-project
    - pylint --output-format=text $PYLINT_INPUT --exit-zero | tee $CI_COMMIT_REF_NAME/pylint/pylint.txt
    - score=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' $CI_COMMIT_REF_NAME/pylint/pylint.txt)
    - anybadge --value=$score --file=$CI_COMMIT_REF_NAME/pylint/pylint.svg pylint
    - pylint --output-format=jsonextended --load-plugins=pylint_json2html --exit-zero $PYLINT_INPUT | tee $CI_COMMIT_REF_NAME/pylint/pylint.json
    - pylint-json2html -f jsonextended -o $CI_COMMIT_REF_NAME/pylint/pylint.html < $CI_COMMIT_REF_NAME/pylint/pylint.json
 artifacts:
   paths:
   - $CI_COMMIT_REF_NAME/pylint
   expire_in: 2 hrs

sphinxdoc:
 image: $CI_REGISTRY/environment:development
 stage: doc
 services:
  - name: docker:18.09.7-dind
    command: ["--mtu=1440"]
 before_script:
   - mv ./* /bim2sim-coding/
   - pip install -r /bim2sim-coding/docs/requirements.txt
 script:
   - mkdir -p $CI_COMMIT_REF_NAME/docs
   - sphinx-apidoc -M -o /bim2sim-coding/docs/source/code /bim2sim-coding  # create rst files for all python files
   - sphinx-build -b html /bim2sim-coding/docs/source $CI_COMMIT_REF_NAME/docs
   - anybadge --value="passing" --file=$CI_COMMIT_REF_NAME/docs/doc.svg --label documentation

 artifacts:
   paths:
   - $CI_COMMIT_REF_NAME/docs
   expire_in: 2 hrs

pages:
# Page to generate content to be downloaded in the artifact-section.
 image: ubuntu:latest
 stage: deploy
 before_script:
   - apt-get update -y
   - apt-get install zip unzip -y
   - apt-get install curl -y
 script:
   - set -e
   # get existing content with branch artifacts
   - curl --fail --header "PRIVATE-TOKEN:$GL_TOKEN" $CI_PAGES_URL/content.zip -o content.zip
   - if [ -e "content.zip" ]; then unzip "content.zip"; rm "content.zip"; fi
   # delete all branch folders older than 14 days which are not master or development
   - find public/* -maxdepth 0 -type d -not -name "development" -not -name "master" -mtime +14 -exec rm -rf {} \;
   # Add/update content
   - mkdir -p public/$CI_COMMIT_REF_NAME
   - cp -r $CI_COMMIT_REF_NAME/* public/$CI_COMMIT_REF_NAME
   # Zip the content and publish the zip again
   - zip -r "content.zip" "public"
   - mv "content.zip" "public/"
 artifacts:
   paths:
     - public
