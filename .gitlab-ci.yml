stages:
  - test_base
  - test_integration
  - test_regression
  - doc
  - code_quality
  - deploy
  - build


variables:
  # TODO variable inside variable seems not be working on our gitlab instance,
  # see post below, therefore use hardcoded image here for sphinx job
  # https://stackoverflow.com/questions/67005507/variable-inside-variable-gitlab-ci
  PYTHON_VERSION: "registry.git.rwth-aachen.de/ebc/ebc_all/github_ci/bim2sim/bim2sim:dev-py3.11"
#  PYTHON_VERSION: "${CI_REGISTRY}/environment:development"
  GIT_SUBMODULE_STRATEGY: recursive
  GH_REPO_URL: "git@github.com:BIM2SIM/bim2sim.git"
  GH_PAGES_URL: "https://bim2sim.github.io/${CI_PROJECT_NAME}/"
  TEST_ENGINE: "unittest"
  TEST_PATH: test


include:
  - project: 'EBC/EBC_all/gitlab_ci/templates'
    file: 'python/code-quality/pylint.gitlab-ci.yml'
  - project: 'EBC/EBC_all/gitlab_ci/templates'
    file: 'python/doc/sphinxdoc.gitlab-ci.yml'
  - project: 'EBC/EBC_all/gitlab_ci/templates'
    file: 'pages/gh-pages.gitlab-ci.yml'
#  - project: 'EBC/EBC_all/gitlab_ci/templates'
#    file: 'python/tests/coverage.gitlab-ci.yml'

# This is a workaround to download the test files by overwriting the utils method from original CI testing of EBC
.install_local_repository:
  script:
    # TODO make this conditional
    # if stage is doc, we need to install documentation specific dependencies
    - eval "$(micromamba shell hook --shell bash)"
    - micromamba activate base
    - pip install -e .[docu]


#.install_local_repository:
#  script:
#    - python ./test/resources/dl_test_resources.py --domain=hydraulic --force_new
#    - python ./test/resources/dl_test_resources.py --domain=arch --force_new


.build_template: &build_template
  image: docker:24.0.5
  stage: build
  services:
    - name: docker:24.0.5-dind
      variables:
        HEALTHCHECK_TCP_PORT: "2376"
  before_script:
    - docker login -u $CI_DEPLOY_TOKEN_USERNAME -p $CI_DEPLOY_TOKEN_PASSWORD $CI_REGISTRY_LOGIN
  script:
    - docker build -t $CI_REGISTRY/bim2sim:$TAG -f ${DOCKERFILE} --build-arg PYTHON_VERSION=${PYTHON_VERSION} .
    - docker push $CI_REGISTRY/bim2sim:$TAG

.build_template_dymola: &build_template_dymola
  image: docker:24.0.5
  stage: build
  services:
    - name: docker:24.0.5-dind
      variables:
        HEALTHCHECK_TCP_PORT: "2376"
  before_script:
    - docker login -u $CI_DEPLOY_TOKEN_USERNAME_DYMOLA -p $CI_DEPLOY_TOKEN_PASSWORD_DYMOLA $CI_REGISTRY_LOGIN_DYMOLA   # login dymola docker reg
  script:
    - docker build -t $CI_REGISTRY/bim2sim:$TAG -f ${DOCKERFILE} --build-arg PYTHON_VERSION=${PYTHON_VERSION} .
    - docker login -u $CI_DEPLOY_TOKEN_USERNAME -p $CI_DEPLOY_TOKEN_PASSWORD $CI_REGISTRY_LOGIN  # login bim2sim reg
    - docker push $CI_REGISTRY/bim2sim:$TAG

# docu branch builds (image to build documentation needs extra requirements)
#build:dev-docu:py3.11:
#  <<: *build_template
#  variables:
#    PYTHON_VERSION: "3.11"
#    TAG: dev-docu-py3.11
#    DOCKERFILE: micromamba.Dockerfile
#  rules:
#    - if: '$CI_COMMIT_REF_NAME == "731-bump-python-to-311"'
#      changes:
#        - micromamba.Dockerfile
#        - pyproject.toml
#        - .gitlab-ci.yml

# Development branch builds
build:dev:py3.9:
  <<: *build_template
  variables:
    PYTHON_VERSION: "3.9"
    TAG: dev-py3.9
    DOCKERFILE: micromamba.Dockerfile
  rules:
    - if: '$CI_COMMIT_REF_NAME == "731-bump-python-to-311"'
      changes:
        - micromamba.Dockerfile
        - pyproject.toml
        - .gitlab-ci.yml

build:dev:py3.10:
  <<: *build_template
  variables:
    PYTHON_VERSION: "3.10"
    TAG: dev-py3.10
    DOCKERFILE: micromamba.Dockerfile
  rules:
    - if: '$CI_COMMIT_REF_NAME == "731-bump-python-to-311"'
      changes:
        - micromamba.Dockerfile
        - pyproject.toml
        - .gitlab-ci.yml

build:dev:py3.11:
  <<: *build_template
  variables:
    PYTHON_VERSION: "3.11"
    TAG: dev-py3.11
    DOCKERFILE: micromamba.Dockerfile
  rules:
    - if: '$CI_COMMIT_REF_NAME == "731-bump-python-to-311"'
      changes:
        - micromamba.Dockerfile
        - pyproject.toml
        - .gitlab-ci.yml

# Build dymola images
build:dev-dymola:py3.9:
  <<: *build_template_dymola
  variables:
    PYTHON_VERSION: "3.9"
    TAG: dev-dymola-py3.9
    DOCKERFILE: micromambaDymola.Dockerfile
  rules:
    - if: '$CI_COMMIT_REF_NAME == "731-bump-python-to-311"'
      changes:
        - micromambaDymola.Dockerfile
        - pyproject.toml
        - .gitlab-ci.yml

build:dev-dymola:py3.10:
  <<: *build_template_dymola
  variables:
    PYTHON_VERSION: "3.10"
    TAG: dev-dymola-py3.10
    DOCKERFILE: micromambaDymola.Dockerfile
  rules:
    - if: '$CI_COMMIT_REF_NAME == "731-bump-python-to-311"'
      changes:
        - micromambaDymola.Dockerfile
        - pyproject.toml
        - .gitlab-ci.yml

build:dev-dymola:py3.11:
  <<: *build_template_dymola
  variables:
    PYTHON_VERSION: "3.11"
    TAG: dev-dymola-py3.11
    DOCKERFILE: micromambaDymola.Dockerfile
  rules:
    - if: '$CI_COMMIT_REF_NAME == "731-bump-python-to-311"'
      changes:
        - micromambaDymola.Dockerfile
        - pyproject.toml
        - .gitlab-ci.yml

# Build EnergyPlus images
build:dev-energyplus:py3.9:
  <<: *build_template
  variables:
    PYTHON_VERSION: "3.9"
    TAG: dev-energyplus-py3.9
    DOCKERFILE: micromambaEnergyPlus.Dockerfile
  rules:
    - if: '$CI_COMMIT_REF_NAME == "731-bump-python-to-311"'
      changes:
        - micromambaEnergyPlus.Dockerfile
        - pyproject.toml
        - .gitlab-ci.yml

build:dev-energyplus:py3.10:
  <<: *build_template
  variables:
    PYTHON_VERSION: "3.10"
    TAG: dev-energyplus-py3.10
    DOCKERFILE: micromambaEnergyPlus.Dockerfile
  rules:
    - if: '$CI_COMMIT_REF_NAME == "731-bump-python-to-311"'
      changes:
        - micromambaEnergyPlus.Dockerfile
        - pyproject.toml
        - .gitlab-ci.yml

build:dev-energyplus:py3.11:
  <<: *build_template
  variables:
    PYTHON_VERSION: "3.11"
    TAG: dev-energyplus-py3.11
    DOCKERFILE: micromambaEnergyPlus.Dockerfile
  rules:
    - if: '$CI_COMMIT_REF_NAME == "731-bump-python-to-311"'
      changes:
        - micromambaEnergyPlus.Dockerfile
        - pyproject.toml
        - .gitlab-ci.yml


# Main branch builds
build:main:py3.9:
  <<: *build_template
  variables:
    PYTHON_VERSION: "3.9"
    TAG: main-py3.9
    DOCKERFILE: micromamba.Dockerfile
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
      changes:
        - micromamba.Dockerfile
        - pyproject.toml
        - .gitlab-ci.yml

build:main:py3.10:
  <<: *build_template
  variables:
    PYTHON_VERSION: "3.10"
    TAG: main-py3.10
    DOCKERFILE: micromamba.Dockerfile
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
      changes:
        - micromamba.Dockerfile
        - pyproject.toml
        - .gitlab-ci.yml

build:main:py3.11:
  <<: *build_template
  variables:
    PYTHON_VERSION: "3.11"
    TAG: main-py3.11
    DOCKERFILE: micromamba.Dockerfile
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
      changes:
        - micromamba.Dockerfile
        - pyproject.toml
        - .gitlab-ci.yml

# Tests
.test_template_base: &test_template_base
  stage: test_base
  before_script:
    - eval "$(micromamba shell hook --shell bash)"
    - micromamba activate base
  script:
    - mkdir -p ~/bim2sim-coding/
    - mv ./* ~/bim2sim-coding/
    - cd ~/bim2sim-coding
    - pip uninstall -y bim2sim
    - pip install -e .[test]
    - export BIM2SIM_LOG_LEVEL=ERROR
    - python ~/bim2sim-coding/test/resources/dl_test_resources.py --domain=hydraulic --force_new
    - python ~/bim2sim-coding/test/resources/dl_test_resources.py --domain=arch --force_new
    - |
      if [ "$COVERAGE" = "true" ]; then
        coverage run -m unittest discover ~/bim2sim-coding/test
        mkdir -p /builds/EBC/EBC_all/github_ci/bim2sim/$CI_COMMIT_REF_NAME/coverage
        coverage html -d /builds/EBC/EBC_all/github_ci/bim2sim/$CI_COMMIT_REF_NAME/coverage
        coverage-badge -o /builds/EBC/EBC_all/github_ci/bim2sim/$CI_COMMIT_REF_NAME/coverage/badge.svg
      else
        python -m unittest discover ~/bim2sim-coding/test
      fi
    - ls -la
  artifacts:
    paths:
      - $CI_COMMIT_REF_NAME/coverage
    expire_in: 2 hrs


.test_template_plugin_integration: &test_template_plugin_integration
  stage: test_integration
  before_script:
    - eval "$(micromamba shell hook --shell bash)"
    - micromamba activate base
  script:
    - mkdir -p ~/bim2sim-coding/
    - mv ./* ~/bim2sim-coding/
    - cd ~/bim2sim-coding
    - pip uninstall -y bim2sim
    - pip install -e .[test]
    - pip install -e .[$plugin]
    - export BIM2SIM_LOG_LEVEL=ERROR
    - python ~/bim2sim-coding/test/resources/dl_test_resources.py --domain=hydraulic --force_new
    - python ~/bim2sim-coding/test/resources/dl_test_resources.py --domain=arch --force_new
    - coverage run -m unittest discover ~/bim2sim-coding/bim2sim/plugins/${plugin}/test/integration

.test_template_plugin_regression: &test_template_plugin_regression
  stage: test_regression
  before_script:
    - eval "$(micromamba shell hook --shell bash)"
    - micromamba activate base
  script:
    - mkdir -p ~/bim2sim-coding/
    - mv ./* ~/bim2sim-coding/
    - cd ~/bim2sim-coding
    - pip uninstall -y bim2sim
    - pip install -e .[test]
    - pip install -e .[$plugin]
    - export BIM2SIM_LOG_LEVEL=ERROR
    # perform prepare_regression_tests if it exists
    - |
      if [ -f ~/bim2sim-coding/bim2sim/plugins/${plugin}/test/regression/prepare_regression_tests.py ]; then
        python ~/bim2sim-coding/bim2sim/plugins/${plugin}/test/regression/prepare_regression_tests.py
      else
        echo "Skipping regression test preparation for ${plugin}: File not found"
      fi
    # for EP image  create Minimal.idf file
    - |
      if [[ "$CI_JOB_IMAGE" == *"energyplus"* ]]; then
        cat ~/bim2sim-coding/bim2sim/plugins/PluginEnergyPlus/data/Minimal.idf
      fi
    # use  xvfb-run -n 77  command if dymola image is used
    # use set +e to make sure the pipeline does not stop when the job returns exit code 1
    - |
      set +e
      if [[ "$CI_JOB_IMAGE" == *"dymola"* ]]; then
        xvfb-run -n 77 coverage run -m unittest discover ~/bim2sim-coding/bim2sim/plugins/${plugin}/test/regression
      else
        coverage run -m unittest discover ~/bim2sim-coding/bim2sim/plugins/${plugin}/test/regression
      fi
      test_exit_code=$?
      set -e
    - mkdir -p /builds/EBC/EBC_all/github_ci/bim2sim/logs/
    - cp *.log /builds/EBC/EBC_all/github_ci/bim2sim/logs/ || true
    - exit $test_exit_code
  artifacts:
    when: always
    paths:
      - logs/*

# All tests are done with the dev image, as the code in fresh installed anyway, so only the micromamba environment and the occ version can change between dev and main
# Unit tests for base
test_base:py3.9:
  <<: *test_template_base
  image: $CI_REGISTRY/bim2sim:dev-py3.9
  variables:
    PYTHON_VERSION: "3.9"
    COVERAGE: "false"

test_base:py3.10:
  <<: *test_template_base
  image: $CI_REGISTRY/bim2sim:dev-py3.10
  variables:
    PYTHON_VERSION: "3.10"
    COVERAGE: "false"

test_base:py3.11:
  <<: *test_template_base
  image: $CI_REGISTRY/bim2sim:dev-py3.11
  variables:
    PYTHON_VERSION: "3.11"
    COVERAGE: "true"

# Integration tests
test_PluginTEASER_integration:py3.9:
  <<: *test_template_plugin_integration
  image: $CI_REGISTRY/bim2sim:dev-py3.9
  variables:
    plugin: "PluginTEASER"

test_PluginTEASER_integration:py3.10:
  <<: *test_template_plugin_integration
  image: $CI_REGISTRY/bim2sim:dev-py3.10
  variables:
    plugin: "PluginTEASER"

test_PluginTEASER_integration:py3.11:
  <<: *test_template_plugin_integration
  image: $CI_REGISTRY/bim2sim:dev-py3.11
  variables:
    plugin: "PluginTEASER"

test_PluginAixLib_integration:py3.9:
  <<: *test_template_plugin_integration
  image: $CI_REGISTRY/bim2sim:dev-py3.9
  variables:
    plugin: "PluginAixLib"

test_PluginAixLib_integration:py3.10:
  <<: *test_template_plugin_integration
  image: $CI_REGISTRY/bim2sim:dev-py3.10
  variables:
    plugin: "PluginAixLib"

test_PluginAixLib_integration:py3.11:
  <<: *test_template_plugin_integration
  image: $CI_REGISTRY/bim2sim:dev-py3.11
  variables:
    plugin: "PluginAixLib"

test_PluginEnergyPlus_integration:py3.9:
  <<: *test_template_plugin_integration
  image: $CI_REGISTRY/bim2sim:dev-py3.9
  variables:
    plugin: "PluginEnergyPlus"

test_PluginEnergyPlus_integration:py3.10:
  <<: *test_template_plugin_integration
  image: $CI_REGISTRY/bim2sim:dev-py3.10
  variables:
    plugin: "PluginEnergyPlus"

test_PluginEnergyPlus_integration:py3.11:
  <<: *test_template_plugin_integration
  image: $CI_REGISTRY/bim2sim:dev-py3.11
  variables:
    plugin: "PluginEnergyPlus"

test_PluginHKESim_integration:py3.9:
  <<: *test_template_plugin_integration
  image: $CI_REGISTRY/bim2sim:dev-py3.9
  variables:
    plugin: "PluginHKESim"

test_PluginHKESim_integration:py3.10:
  <<: *test_template_plugin_integration
  image: $CI_REGISTRY/bim2sim:dev-py3.10
  variables:
    plugin: "PluginHKESim"

test_PluginHKESim_integration:py3.11:
  <<: *test_template_plugin_integration
  image: $CI_REGISTRY/bim2sim:dev-py3.11
  variables:
    plugin: "PluginHKESim"

test_PluginLCA_integration:py3.9:
  <<: *test_template_plugin_integration
  image: $CI_REGISTRY/bim2sim:dev-py3.9
  variables:
    plugin: "PluginLCA"

test_PluginLCA_integration:py3.10:
  <<: *test_template_plugin_integration
  image: $CI_REGISTRY/bim2sim:dev-py3.10
  variables:
    plugin: "PluginLCA"

test_PluginLCA_integration:py3.11:
  <<: *test_template_plugin_integration
  image: $CI_REGISTRY/bim2sim:dev-py3.11
  variables:
    plugin: "PluginLCA"

# Regression tests
test_PluginTEASER_regression:py3.9:
  <<: *test_template_plugin_regression
  image: $CI_REGISTRY/bim2sim:dev-dymola-py3.9
  variables:
    plugin: "PluginTEASER"

test_PluginTEASER_regression:py3.10:
  <<: *test_template_plugin_regression
  image: $CI_REGISTRY/bim2sim:dev-dymola-py3.10
  variables:
    plugin: "PluginTEASER"

test_PluginTEASER_regression:py3.11:
  <<: *test_template_plugin_regression
  image: $CI_REGISTRY/bim2sim:dev-dymola-py3.11
  variables:
    plugin: "PluginTEASER"

test_PluginEnergyPlus_regression:py3.9:
  <<: *test_template_plugin_regression
  image: $CI_REGISTRY/bim2sim:dev-energyplus-py3.9
  variables:
    plugin: "PluginEnergyPlus"

test_PluginEnergyPlus_regression:py3.10:
  <<: *test_template_plugin_regression
  image: $CI_REGISTRY/bim2sim:dev-energyplus-py3.10
  variables:
    plugin: "PluginEnergyPlus"

test_PluginEnergyPlus_regression:py3.11:
  <<: *test_template_plugin_regression
  image: $CI_REGISTRY/bim2sim:dev-energyplus-py3.11
  variables:
    plugin: "PluginEnergyPlus"

#
#test_Base_new:
# image: $CI_REGISTRY/base:development
# stage: test
# before_script:
#   - eval "$(micromamba shell hook --shell bash)"
#   - micromamba activate base
# script:
#   - mkdir -p ~/bim2sim-coding/
#   - mv ./* ~/bim2sim-coding/
#   - cd ~/bim2sim-coding
#   - pip uninstall -y bim2sim
#   - pip install -e .[test]
#   - python ~/bim2sim-coding/test/resources/dl_test_resources.py --domain=hydraulic --force_new
#   - python ~/bim2sim-coding/test/resources/dl_test_resources.py --domain=arch --force_new
#   - coverage run -m unittest discover ~/bim2sim-coding/test
#   - coverage report -i

#build:development:
# image: docker:24.0.5
# stage: build-env
# services:
#   - name: docker:24.0.5-dind
#     variables:
#       HEALTHCHECK_TCP_PORT: "2376"
# before_script:
#   - docker login -u $CI_DEPLOY_TOKEN_USERNAME -p $CI_DEPLOY_TOKEN_PASSWORD $CI_REGISTRY_LOGIN
# script:
#   - docker build -t $CI_REGISTRY/bim2sim:<tag> -f micromamba.Dockerfile .
#   - docker push $CI_REGISTRY/bim2sim:<tag>
# rules:
#   - if: '$CI_COMMIT_REF_NAME == "development"'
#     changes:
#       - envBase.Dockerfile
#       - pyproject.toml
#       - .gitlab-ci.yml

#build_new:development:
# image: docker:24.0.5
# stage: build-env
# services:
#   - name: docker:24.0.5-dind
#     variables:
#       HEALTHCHECK_TCP_PORT: "2376"
# before_script:
#   - docker login -u $CI_DEPLOY_TOKEN_USERNAME -p $CI_DEPLOY_TOKEN_PASSWORD $CI_REGISTRY_LOGIN
# script:
#   - docker build -t $CI_REGISTRY/new:development -f new.Dockerfile .
#   - docker push $CI_REGISTRY/new:development
# rules:
#   - if: '$CI_COMMIT_REF_NAME == "development"'
#     changes:
#       - envBase.Dockerfile
#       - requirements.txt
#       - .gitlab-ci.yml
#
#build_env:main:
# image: docker:24.0.5
# stage: build-env
# services:
#   - name: docker:24.0.5-dind
#     variables:
#       HEALTHCHECK_TCP_PORT: "2376"
# before_script:
#   - docker login -u $CI_DEPLOY_TOKEN_USERNAME -p $CI_DEPLOY_TOKEN_PASSWORD $CI_REGISTRY_LOGIN
# script:
#   - docker build -t $CI_REGISTRY/environment:main -f envBase.Dockerfile .
#   - docker push $CI_REGISTRY/environment:main
# rules:
#   - if: '$CI_COMMIT_REF_NAME == "main"'
#     changes:
#       - envBase.Dockerfile
#       - requirements.txt
#
#build_env:development:
# image: docker:24.0.5
# stage: build-env
# services:
#   - name: docker:24.0.5-dind
#     variables:
#       HEALTHCHECK_TCP_PORT: "2376"
# before_script:
#   - docker login -u $CI_DEPLOY_TOKEN_USERNAME -p $CI_DEPLOY_TOKEN_PASSWORD $CI_REGISTRY_LOGIN
# script:
#   - docker build -t $CI_REGISTRY/environment:development -f envBase.Dockerfile .
#   - docker push $CI_REGISTRY/environment:development
# rules:
#   - if: '$CI_COMMIT_REF_NAME == "development"'
#     changes:
#       - envBase.Dockerfile
#       - requirements.txt
#       - .gitlab-ci.yml
#
#build_env:dymola:
# image: docker:24.0.5
# stage: build-env
# services:
#   - name: docker:24.0.5-dind
#     variables:
#       HEALTHCHECK_TCP_PORT: "2376"
# before_script:
#   - docker login -u $CI_DEPLOY_TOKEN_USERNAME_DYMOLA -p $CI_DEPLOY_TOKEN_PASSWORD_DYMOLA $CI_REGISTRY_LOGIN_DYMOLA   # login dymola docker reg
# script:
#   - docker build -t $CI_REGISTRY/environment:dymola -f envBaseDymola.Dockerfile .
#   - docker login -u $CI_DEPLOY_TOKEN_USERNAME -p $CI_DEPLOY_TOKEN_PASSWORD $CI_REGISTRY_LOGIN  # login bim2sim reg
#   - docker push $CI_REGISTRY/environment:dymola
# rules:
#   - if: '$CI_COMMIT_REF_NAME == "development"'
#     changes:
#       - envBaseDymola.Dockerfile
#       - requirements.txt
#       - .gitlab-ci.yml
#
#
#build_env:energyplus:
#  image: docker:24.0.5
#  stage: build-env-plugins
#  services:
#   - name: docker:24.0.5-dind
#     variables:
#       HEALTHCHECK_TCP_PORT: "2376"
#  before_script:
#    - docker login -u $CI_DEPLOY_TOKEN_USERNAME -p $CI_DEPLOY_TOKEN_PASSWORD $CI_REGISTRY_LOGIN
#  script:
#    - docker build -t $CI_REGISTRY/environment:energyplus -f bim2sim/plugins/PluginEnergyPlus/envEP.Dockerfile .
#    - docker push $CI_REGISTRY/environment:energyplus
#  rules:
#   - if: '$CI_COMMIT_REF_NAME == "development"'
#     changes:
#       - envBase.Dockerfile
#       - bim2sim/plugins/PluginEnergyPlus/envEP.Dockerfile
#       - bim2sim/plugins/PluginEnergyPlus/requirements.txt
#       - requirements.txt
#       - .gitlab-ci.yml
#
#
#build_env:cfd:
# image: docker:24.0.5
# stage: build-env-plugins
# services:
#   - name: docker:24.0.5-dind
#     variables:
#       HEALTHCHECK_TCP_PORT: "2376"
# before_script:
#   - docker login -u $CI_DEPLOY_TOKEN_USERNAME -p $CI_DEPLOY_TOKEN_PASSWORD $CI_REGISTRY_LOGIN
# script:
#   - docker build -t $CI_REGISTRY/environment:cfd -f bim2sim/plugins/PluginCFD/envCFD.Dockerfile .
#   - docker push $CI_REGISTRY/environment:cfd
# timeout: 6 hours
# rules:
#   - if: '$CI_COMMIT_REF_NAME == "development"'
#     changes:
#       - envBase.Dockerfile
#       - bim2sim/plugins/PluginCFD/envCFD.Dockerfile
#       - requirements.txt
#       - .gitlab-ci.yml
#
#build_env:teaser:
# image: docker:24.0.5
# stage: build-env-plugins
# services:
#   - name: docker:24.0.5-dind
#     variables:
#       HEALTHCHECK_TCP_PORT: "2376"
# before_script:
#   - docker login -u $CI_DEPLOY_TOKEN_USERNAME -p $CI_DEPLOY_TOKEN_PASSWORD $CI_REGISTRY_LOGIN
# script:
#   - docker build -t $CI_REGISTRY/environment:teaser -f bim2sim/plugins/PluginTEASER/envTEASER.Dockerfile .
#   - docker push $CI_REGISTRY/environment:teaser
# rules:
#   - if: '$CI_COMMIT_REF_NAME == "development"'
#     changes:
#       - envBase.Dockerfile
#       - bim2sim/plugins/PluginTEASER/requirements.txt
#       - bim2sim/plugins/PluginTEASER/envTEASER.Dockerfile
#       - requirements.txt
#       - .gitlab-ci.yml
#
#build_env:teaser-dymola:
# image: docker:24.0.5
# stage: build-env-plugins
# services:
#   - name: docker:24.0.5-dind
#     variables:
#       HEALTHCHECK_TCP_PORT: "2376"
# before_script:
#   - docker login -u $CI_DEPLOY_TOKEN_USERNAME -p $CI_DEPLOY_TOKEN_PASSWORD $CI_REGISTRY_LOGIN
# script:
#   - docker build -t $CI_REGISTRY/environment:teaser-dymola -f bim2sim/plugins/PluginTEASER/envTEASER-dymola.Dockerfile .
#   - docker push $CI_REGISTRY/environment:teaser-dymola
# rules:
#   - if: '$CI_COMMIT_REF_NAME == "development"'
#     changes:
#       - envBase.Dockerfile
#       - bim2sim/plugins/PluginTEASER/requirements.txt
#       - bim2sim/plugins/PluginTEASER/envTEASER.Dockerfile
#       - requirements.txt
#       - .gitlab-ci.yml
#
#build_env:aixlib:
# image: docker:24.0.5
# stage: build-env-plugins
# services:
#   - name: docker:24.0.5-dind
#     variables:
#       HEALTHCHECK_TCP_PORT: "2376"
# before_script:
#   - docker login -u $CI_DEPLOY_TOKEN_USERNAME -p $CI_DEPLOY_TOKEN_PASSWORD $CI_REGISTRY_LOGIN
# script:
#   - docker build -t $CI_REGISTRY/environment:aixlib -f bim2sim/plugins/PluginAixLib/envAixLib.Dockerfile .
#   - docker push $CI_REGISTRY/environment:aixlib
# rules:
#   - if: '$CI_COMMIT_REF_NAME == "development"'
#     changes:
#       - envBase.Dockerfile
#       - bim2sim/plugins/PluginAixLib/requirements.txt
#       - bim2sim/plugins/PluginAixLib/envAixLib.Dockerfile
#       - requirements.txt
#       - .gitlab-ci.yml
#
#build_tool:release:
# image: docker:24.0.5
# stage: build-tool
# services:
#   - name: docker:24.0.5-dind
#     variables:
#       HEALTHCHECK_TCP_PORT: "2376"
# before_script:
#   - docker login -u $CI_DEPLOY_TOKEN_USERNAME -p $CI_DEPLOY_TOKEN_PASSWORD $CI_REGISTRY_LOGIN
# script:
#   - docker build -t $CI_REGISTRY/tool:latest .
#   - docker push $CI_REGISTRY/tool:latest
# rules:
#   - if: '$CI_COMMIT_REF_NAME == "main"'
#
#build_tool:development:
# image: docker:24.0.5
# stage: build-tool
# services:
#   - name: docker:24.0.5-dind
#     variables:
#       HEALTHCHECK_TCP_PORT: "2376"
# before_script:
#   - docker login -u $CI_DEPLOY_TOKEN_USERNAME -p $CI_DEPLOY_TOKEN_PASSWORD $CI_REGISTRY_LOGIN
# script:
#   - docker build -t $CI_REGISTRY/tool:development .
#   - docker push $CI_REGISTRY/tool:development
# rules:
#   - if: '$CI_COMMIT_REF_NAME == "development"'
#
#build_tool:webdevelop:
# image: docker:24.0.5
# stage: build-tool
# services:
#   - name: docker:24.0.5-dind
#     variables:
#       HEALTHCHECK_TCP_PORT: "2376"
# before_script:
#   - docker login -u $CI_DEPLOY_TOKEN_USERNAME -p $CI_DEPLOY_TOKEN_PASSWORD $CI_REGISTRY_LOGIN
# script:
#   - docker build -t $CI_REGISTRY/tool:web_develop -f total.Dockerfile .
#   - docker push $CI_REGISTRY/tool:web_develop
# rules:
#   - if: '$CI_COMMIT_REF_NAME == "development"'
#
#build_tool:cfd:
# image: docker:24.0.5
# stage: build-tool
# services:
#   - name: docker:24.0.5-dind
#     variables:
#       HEALTHCHECK_TCP_PORT: "2376"
# before_script:
#   - docker login -u $CI_DEPLOY_TOKEN_USERNAME -p $CI_DEPLOY_TOKEN_PASSWORD $CI_REGISTRY_LOGIN
# script:
#   - docker build -t $CI_REGISTRY/tool:cfd -f bim2sim/plugins/PluginCFD/cfd.Dockerfile .
#   - docker push $CI_REGISTRY/tool:cfd
# rules:
#   - if: '$CI_COMMIT_REF_NAME == "development"'
#     changes:
#       - bim2sim/plugins/PluginCFD/*
#
#build_tool:teaser:
# image: docker:24.0.5
# stage: build-tool
# services:
#   - name: docker:24.0.5-dind
#     variables:
#       HEALTHCHECK_TCP_PORT: "2376"
# before_script:
#   - docker login -u $CI_DEPLOY_TOKEN_USERNAME -p $CI_DEPLOY_TOKEN_PASSWORD $CI_REGISTRY_LOGIN
# script:
#   - docker build -t $CI_REGISTRY/tool:teaser -f bim2sim/plugins/PluginTEASER/teaser.Dockerfile .
#   - docker push $CI_REGISTRY/tool:teaser
# rules:
#   - if: '$CI_COMMIT_REF_NAME == "development"'
#     changes:
#       - bim2sim/plugins/PluginTEASER/*
#
#build_tool:aixlib:
# image: docker:24.0.5
# stage: build-tool
# services:
#   - name: docker:24.0.5-dind
#     variables:
#       HEALTHCHECK_TCP_PORT: "2376"
# before_script:
#   - docker login -u $CI_DEPLOY_TOKEN_USERNAME -p $CI_DEPLOY_TOKEN_PASSWORD $CI_REGISTRY_LOGIN
# script:
#   - docker build -t $CI_REGISTRY/tool:aixlib -f bim2sim/plugins/PluginAixLib/aixlib.Dockerfile .
#   - docker push $CI_REGISTRY/tool:aixlib
# rules:
#   - if: '$CI_COMMIT_REF_NAME == "development"'
#     changes:
#       - bim2sim/plugins/PluginAixLib/*
#
#test_Base_new:
# image: $CI_REGISTRY/base:development
# stage: test
# before_script:
#   - eval "$(micromamba shell hook --shell bash)"
#   - micromamba activate base
# script:
#   - mkdir -p ~/bim2sim-coding/
#   - mv ./* ~/bim2sim-coding/
#   - cd ~/bim2sim-coding
#   - pip uninstall -y bim2sim
#   - pip install -e .[test]
#   - python ~/bim2sim-coding/test/resources/dl_test_resources.py --domain=hydraulic --force_new
#   - python ~/bim2sim-coding/test/resources/dl_test_resources.py --domain=arch --force_new
#   - coverage run -m unittest discover ~/bim2sim-coding/test
#   - coverage report -i
###
#test_EP:
# image: $CI_REGISTRY/environment:energyplus
# stage: test
# before_script:
#   - pip install coverage
#   - pip install coverage-badge
#   # reinstall requirements to test current branch status
#   - pip install -r bim2sim/plugins/PluginEnergyPlus/requirements.txt
# script:
#   - mv ./* /bim2sim-coding/
#   - cd /bim2sim-coding
#   - cat /bim2sim-coding/bim2sim/plugins/PluginEnergyPlus/data/Minimal.idf
#   - python /bim2sim-coding/test/resources/dl_test_resources.py --domain=arch --force_new
#   - coverage run -m unittest discover /bim2sim-coding/bim2sim/plugins/PluginEnergyPlus/test/integration
#   - coverage report -i
#
#test_EP_regression:
# image: $CI_REGISTRY/environment:energyplus
# stage: test
# before_script:
#   - pip install coverage
#   - pip install coverage-badge
#   # reinstall requirements to test current branch status
#   - pip install -r bim2sim/plugins/PluginEnergyPlus/requirements.txt
# script:
#   - mv ./* /bim2sim-coding/
#   - cd /bim2sim-coding
#   - cat /bim2sim-coding/bim2sim/plugins/PluginEnergyPlus/data/Minimal.idf
#   - python /bim2sim-coding/test/resources/dl_test_resources.py --domain=arch --force_new --with_regression
#   - coverage run -m unittest discover /bim2sim-coding/bim2sim/plugins/PluginEnergyPlus/test/regression
#   - coverage report -i
#
#test_Comfort:
#  # EnergyPlus environment is currently used for comfort test, same requirements
#  image: $CI_REGISTRY/environment:energyplus
#  stage: test
#  before_script:
#    - pip install coverage
#    - pip install coverage-badge
#    # reinstall requirements to test current branch status
#    - pip install -r bim2sim/plugins/PluginEnergyPlus/requirements.txt
#  script:
#    - mv ./* /bim2sim-coding/
#    - cd /bim2sim-coding
#    - cat /bim2sim-coding/bim2sim/plugins/PluginEnergyPlus/data/Minimal.idf
#    - python /bim2sim-coding/test/resources/dl_test_resources.py --domain=arch --force_new
#    - coverage run -m unittest discover /bim2sim-coding/bim2sim/plugins/PluginComfort/test/integration
#    - coverage report -i
#
#test_Comfort_regression:
#  # EnergyPlus environment is currently used for comfort test, same requirements
#  image: $CI_REGISTRY/environment:energyplus
#  stage: test
#  before_script:
#    - pip install coverage
#    - pip install coverage-badge
#    # reinstall requirements to test current branch status
#    - pip install -r bim2sim/plugins/PluginEnergyPlus/requirements.txt
#  script:
#    - mv ./* /bim2sim-coding/
#    - cd /bim2sim-coding
#    - cat /bim2sim-coding/bim2sim/plugins/PluginEnergyPlus/data/Minimal.idf
#    - python /bim2sim-coding/test/resources/dl_test_resources.py --domain=arch --force_new --with_regression
#    - coverage run -m unittest discover /bim2sim-coding/bim2sim/plugins/PluginComfort/test/regression
#    - coverage report -i
#
#
#test_TEASER:
# image: $CI_REGISTRY/environment:teaser
# stage: test
# before_script:
#   - pip install coverage
#   - pip install coverage-badge
#   # reinstall requirements to test current branch status
#   - pip install -r bim2sim/plugins/PluginTEASER/requirements.txt
#   # TODO temp workaround as CI does not seem to take current image
#   - pip install scipy==1.11.3
# script:
#   - mv ./* /bim2sim-coding/
#   - cd /bim2sim-coding
#   - python /bim2sim-coding/test/resources/dl_test_resources.py --domain=arch --force_new
#   - coverage run -m unittest discover /bim2sim-coding/bim2sim/plugins/PluginTEASER/test/integration
#   - coverage report -i
#
#test_TEASER_regression:
# image: $CI_REGISTRY/environment:teaser-dymola
# stage: test
# before_script:
#   - pip install coverage
#   - pip install coverage-badge
#   # reinstall requirements to test current branch status
#   - pip install -r requirements.txt
#   - pip install -r bim2sim/plugins/PluginTEASER/requirements.txt
#   # TODO temp workaround as CI does not seem to take current image
#   - pip install scipy==1.11.3
# script:
#   - mv ./* /bim2sim-coding/
#   - cd /bim2sim-coding
#   - python /bim2sim-coding/bim2sim/plugins/PluginTEASER/test/regression/prepare_regression_tests.py
#   - xvfb-run -n 77 coverage run -m unittest discover /bim2sim-coding/bim2sim/plugins/PluginTEASER/test/regression
#   - coverage report -i
#   - mkdir /builds/EBC/EBC_all/github_ci/bim2sim/logs/
#   - cp *.log /builds/EBC/EBC_all/github_ci/bim2sim/logs/
#   - ls -la /builds/EBC/EBC_all/github_ci/bim2sim
#   - ls -la /builds/EBC/EBC_all/github_ci/bim2sim/logs
# artifacts:
#  paths:
##    - logs/*
##    - logs/failed-simulator-dymola.log
#    - /builds/EBC/EBC_all/github_ci/bim2sim/logs/*
##    - bim2sim-coding/simulator-dymola.log
##    - bim2sim-coding/comparison-dymola.log
##    - bim2sim-coding/unitTests-dymola.log
#
#test_CFD:
# image: $CI_REGISTRY/environment:cfd
# stage: test
# before_script:
#   - pip install coverage
#   - pip install coverage-badge
# script:
#   - mv ./* /bim2sim-coding/
#   - cd /bim2sim-coding
#   - python /bim2sim-coding/test/resources/dl_test_resources.py --domain=arch --force_new
#   - coverage run -m unittest discover /bim2sim-coding/bim2sim/plugins/PluginCFD/test/integration
#   - coverage report -i
#
#test_AixLib:
# image: $CI_REGISTRY/environment:aixlib
# stage: test
# before_script:
#   - pip install coverage
#   - pip install coverage-badge
#   # reinstall requirements to test current branch status
#   - pip install -r bim2sim/plugins/PluginAixLib/requirements.txt
# script:
#   - mv ./* /bim2sim-coding/
#   - cd /bim2sim-coding
#   - python /bim2sim-coding/test/resources/dl_test_resources.py --domain=hydraulic --force_new
#   - coverage run -m unittest discover /bim2sim-coding/bim2sim/plugins/PluginAixLib/test/integration
#   - coverage report -i
#
#test_HKESim:
# image: $CI_REGISTRY/environment:aixlib
# stage: test
# before_script:
#   - pip install coverage
#   - pip install coverage-badge
#   # reinstall requirements to test current branch status
#   - pip install -r bim2sim/plugins/PluginHKESim/requirements.txt
# script:
#   - mv ./* /bim2sim-coding/
#   - cd /bim2sim-coding
#   - python /bim2sim-coding/test/resources/dl_test_resources.py --domain=hydraulic --force_new
#   - coverage run -m unittest discover /bim2sim-coding/bim2sim/plugins/PluginHKESim/test/integration
#   - coverage report -i
#
#test_LCA:
# image: $CI_REGISTRY/environment:development
# stage: test
# before_script:
#   - pip install coverage
#   - pip install coverage-badge
# script:
#   - mv ./* /bim2sim-coding/
#   - cd /bim2sim-coding
#   - python /bim2sim-coding/test/resources/dl_test_resources.py --domain=arch --force_new
#   - coverage run -m unittest discover /bim2sim-coding/bim2sim/plugins/PluginLCA/test/integration
#   - coverage report -i
