(*
Copyright by:
International Alliance for Interoperability, 1996-2003

All rights reserved. No part of this documentation may be
reproduced, stored in a retrieval system, or transmitted
in any form or by any means, without the prior written
permission of the owner.

Contents:
full IFC object model EXPRESS definitions for the IFC2x Edition 2
- platform distribution of express longform

Issue date:
May 14, 2003

Development Team:
Modeling Support Group of the 
International Alliance for Interoperability
*)


SCHEMA IFC2X2_PLATFORM;

TYPE IfcAbsorbedDoseMeasure = REAL;
END_TYPE;

TYPE IfcAccelerationMeasure = REAL;
END_TYPE;

TYPE IfcAmountOfSubstanceMeasure = REAL;
END_TYPE;

TYPE IfcAngularVelocityMeasure = REAL;
END_TYPE;

TYPE IfcAreaMeasure = REAL;
END_TYPE;

TYPE IfcBoolean = BOOLEAN;
END_TYPE;

TYPE IfcComplexNumber = ARRAY [1:2] OF REAL;
END_TYPE;

TYPE IfcCompoundPlaneAngleMeasure = LIST [3:3] OF INTEGER;
 WHERE
	WR1 : { 0 <= SELF[1] < 360 };
	WR2 : { 0 <= SELF[2] < 60 };
	WR3 : { 0 <= SELF[3] < 60 };
END_TYPE;

TYPE IfcContextDependentMeasure = REAL;
END_TYPE;

TYPE IfcCountMeasure = NUMBER;
END_TYPE;

TYPE IfcCurvatureMeasure = REAL;
END_TYPE;

TYPE IfcDayInMonthNumber = INTEGER;
END_TYPE;

TYPE IfcDaylightSavingHour = INTEGER;
 WHERE
	WR1 : { 0 <= SELF <= 2 };
END_TYPE;

TYPE IfcDescriptiveMeasure = STRING;
END_TYPE;

TYPE IfcDimensionCount = INTEGER;
 WHERE
	WR1 : { 0 < SELF <= 3 };
END_TYPE;

TYPE IfcDoseEquivalentMeasure = REAL;
END_TYPE;

TYPE IfcDynamicViscosityMeasure = REAL;
END_TYPE;

TYPE IfcElectricCapacitanceMeasure = REAL;
END_TYPE;

TYPE IfcElectricChargeMeasure = REAL;
END_TYPE;

TYPE IfcElectricConductanceMeasure = REAL;
END_TYPE;

TYPE IfcElectricCurrentMeasure = REAL;
END_TYPE;

TYPE IfcElectricResistanceMeasure = REAL;
END_TYPE;

TYPE IfcElectricVoltageMeasure = REAL;
END_TYPE;

TYPE IfcEnergyMeasure = REAL;
END_TYPE;

TYPE IfcForceMeasure = REAL;
END_TYPE;

TYPE IfcFrequencyMeasure = REAL;
END_TYPE;

TYPE IfcGloballyUniqueId = STRING(22) FIXED;
END_TYPE;

TYPE IfcHeatFluxDensityMeasure = REAL;
END_TYPE;

TYPE IfcHeatingValueMeasure = REAL;
 WHERE
	WR1 : SELF > 0;
END_TYPE;

TYPE IfcHourInDay = INTEGER;
 WHERE
	WR1 : { 0 <= SELF < 24 };
END_TYPE;

TYPE IfcIdentifier = STRING;
END_TYPE;

TYPE IfcIlluminanceMeasure = REAL;
END_TYPE;

TYPE IfcInductanceMeasure = REAL;
END_TYPE;

TYPE IfcInteger = INTEGER;
END_TYPE;

TYPE IfcIntegerCountRateMeasure = INTEGER;
END_TYPE;

TYPE IfcIonConcentrationMeasure = REAL;
END_TYPE;

TYPE IfcIsothermalMoistureCapacityMeasure = REAL;
END_TYPE;

TYPE IfcKinematicViscosityMeasure = REAL;
END_TYPE;

TYPE IfcLabel = STRING;
END_TYPE;

TYPE IfcLengthMeasure = REAL;
END_TYPE;

TYPE IfcLinearForceMeasure = REAL;
END_TYPE;

TYPE IfcLinearMomentMeasure = REAL;
END_TYPE;

TYPE IfcLinearStiffnessMeasure = REAL;
END_TYPE;

TYPE IfcLinearVelocityMeasure = REAL;
END_TYPE;

TYPE IfcLogical = LOGICAL;
END_TYPE;

TYPE IfcLuminousFluxMeasure = REAL;
END_TYPE;

TYPE IfcLuminousIntensityDistributionMeasure = REAL;
END_TYPE;

TYPE IfcLuminousIntensityMeasure = REAL;
END_TYPE;

TYPE IfcMagneticFluxDensityMeasure = REAL;
END_TYPE;

TYPE IfcMagneticFluxMeasure = REAL;
END_TYPE;

TYPE IfcMassDensityMeasure = REAL;
END_TYPE;

TYPE IfcMassFlowRateMeasure = REAL;
END_TYPE;

TYPE IfcMassMeasure = REAL;
END_TYPE;

TYPE IfcMassPerLengthMeasure = REAL;
END_TYPE;

TYPE IfcMinuteInHour = INTEGER;
 WHERE
	WR1 : {0 <= SELF <= 59 };
END_TYPE;

TYPE IfcModulusOfElasticityMeasure = REAL;
END_TYPE;

TYPE IfcModulusOfLinearSubgradeReactionMeasure = REAL;
END_TYPE;

TYPE IfcModulusOfRotationalSubgradeReactionMeasure = REAL;
END_TYPE;

TYPE IfcModulusOfSubgradeReactionMeasure = REAL;
END_TYPE;

TYPE IfcMoistureDiffusivityMeasure = REAL;
END_TYPE;

TYPE IfcMolecularWeightMeasure = REAL;
END_TYPE;

TYPE IfcMomentOfInertiaMeasure = REAL;
END_TYPE;

TYPE IfcMonetaryMeasure = REAL;
END_TYPE;

TYPE IfcMonthInYearNumber = INTEGER;
 WHERE
	WR1 : { 1<= SELF <= 12 };
END_TYPE;

TYPE IfcNormalisedRatioMeasure = IfcRatioMeasure;
 WHERE
	WR1 : {0.0 <= SELF <= 1.0};
END_TYPE;

TYPE IfcNumericMeasure = NUMBER;
END_TYPE;

TYPE IfcPHMeasure = REAL;
 WHERE
	WR21 : {0.0 <= SELF <= 14.0};
END_TYPE;

TYPE IfcParameterValue = REAL;
END_TYPE;

TYPE IfcPlanarForceMeasure = REAL;
END_TYPE;

TYPE IfcPlaneAngleMeasure = REAL;
END_TYPE;

TYPE IfcPositiveLengthMeasure = IfcLengthMeasure;
 WHERE
	WR1 : SELF > 0;
END_TYPE;

TYPE IfcPositivePlaneAngleMeasure = IfcPlaneAngleMeasure;
 WHERE
	WR1 : SELF > 0;
END_TYPE;

TYPE IfcPositiveRatioMeasure = IfcRatioMeasure;
 WHERE
	WR1 : SELF > 0;
END_TYPE;

TYPE IfcPowerMeasure = REAL;
END_TYPE;

TYPE IfcPressureMeasure = REAL;
END_TYPE;

TYPE IfcRadioActivityMeasure = REAL;
END_TYPE;

TYPE IfcRatioMeasure = REAL;
END_TYPE;

TYPE IfcReal = REAL;
END_TYPE;

TYPE IfcRotationalFrequencyMeasure = REAL;
END_TYPE;

TYPE IfcRotationalMassMeasure = REAL;
END_TYPE;

TYPE IfcRotationalStiffnessMeasure = REAL;
END_TYPE;

TYPE IfcSecondInMinute = REAL;
 WHERE
	WR1 : { 0 <= SELF < 60 };
END_TYPE;

TYPE IfcSectionModulusMeasure = REAL;
END_TYPE;

TYPE IfcSectionalAreaIntegralMeasure = REAL;
END_TYPE;

TYPE IfcShearModulusMeasure = REAL;
END_TYPE;

TYPE IfcSolidAngleMeasure = REAL;
END_TYPE;

TYPE IfcSoundPowerMeasure = REAL;
END_TYPE;

TYPE IfcSoundPressureMeasure = REAL;
END_TYPE;

TYPE IfcSpecificHeatCapacityMeasure = REAL;
END_TYPE;

TYPE IfcTemperatureGradientMeasure = REAL;
END_TYPE;

TYPE IfcText = STRING;
END_TYPE;

TYPE IfcThermalAdmittanceMeasure = REAL;
END_TYPE;

TYPE IfcThermalConductivityMeasure = REAL;
END_TYPE;

TYPE IfcThermalExpansionCoefficientMeasure = REAL;
END_TYPE;

TYPE IfcThermalResistanceMeasure = REAL;
END_TYPE;

TYPE IfcThermalTransmittanceMeasure = REAL;
END_TYPE;

TYPE IfcThermodynamicTemperatureMeasure = REAL;
END_TYPE;

TYPE IfcTimeMeasure = REAL;
END_TYPE;

TYPE IfcTimeStamp = INTEGER;
END_TYPE;

TYPE IfcTorqueMeasure = REAL;
END_TYPE;

TYPE IfcVaporPermeabilityMeasure = REAL;
END_TYPE;

TYPE IfcVolumeMeasure = REAL;
END_TYPE;

TYPE IfcVolumetricFlowRateMeasure = REAL;
END_TYPE;

TYPE IfcWarpingConstantMeasure = REAL;
END_TYPE;

TYPE IfcWarpingMomentMeasure = REAL;
END_TYPE;

TYPE IfcYearNumber = INTEGER;
END_TYPE;

TYPE IfcAddressTypeEnum = ENUMERATION OF
	(OFFICE
	,SITE
	,HOME
	,DISTRIBUTIONPOINT
	,USERDEFINED);
END_TYPE;

TYPE IfcAheadOrBehind = ENUMERATION OF
	(AHEAD
	,BEHIND);
END_TYPE;

TYPE IfcAssemblyPlaceEnum = ENUMERATION OF
	(SITE
	,FACTORY
	,NOTDEFINED);
END_TYPE;

TYPE IfcBSplineCurveForm = ENUMERATION OF
	(POLYLINE_FORM
	,CIRCULAR_ARC
	,ELLIPTIC_ARC
	,PARABOLIC_ARC
	,HYPERBOLIC_ARC
	,UNSPECIFIED);
END_TYPE;

TYPE IfcBeamTypeEnum = ENUMERATION OF
	(BEAM
	,JOIST
	,LINTEL
	,T_BEAM
	,USERDEFINED
	,NOTDEFINED);
END_TYPE;

TYPE IfcBooleanOperator = ENUMERATION OF
	(UNION
	,INTERSECTION
	,DIFFERENCE);
END_TYPE;

TYPE IfcChangeActionEnum = ENUMERATION OF
	(NOCHANGE
	,MODIFIED
	,ADDED
	,DELETED
	,MODIFIEDADDED
	,MODIFIEDDELETED);
END_TYPE;

TYPE IfcColumnTypeEnum = ENUMERATION OF
	(COLUMN
	,USERDEFINED
	,NOTDEFINED);
END_TYPE;

TYPE IfcConnectionTypeEnum = ENUMERATION OF
	(ATPATH
	,ATSTART
	,ATEND
	,NOTDEFINED);
END_TYPE;

TYPE IfcCoveringTypeEnum = ENUMERATION OF
	(CEILING
	,FLOORING
	,CLADDING
	,ROOFING
	,INSULATION
	,MEMBRANE
	,SLEEVING
	,WRAPPING
	,USERDEFINED
	,NOTDEFINED);
END_TYPE;

TYPE IfcCurrencyEnum = ENUMERATION OF
	(AED
	,AES
	,ATS
	,AUD
	,BBD
	,BEG
	,BGL
	,BHD
	,BMD
	,BND
	,BRL
	,BSD
	,BWP
	,BZD
	,CAD
	,CBD
	,CHF
	,CLP
	,CNY
	,CYS
	,CZK
	,DDP
	,DEM
	,DKK
	,EGL
	,EST
	,EUR
	,FAK
	,FIM
	,FJD
	,FKP
	,FRF
	,GBP
	,GIP
	,GMD
	,GRX
	,HKD
	,HUF
	,ICK
	,IDR
	,ILS
	,INR
	,IRP
	,ITL
	,JMD
	,JOD
	,JPY
	,KES
	,KRW
	,KWD
	,KYD
	,LKR
	,LUF
	,MTL
	,MUR
	,MXN
	,MYR
	,NLG
	,NZD
	,OMR
	,PGK
	,PHP
	,PKR
	,PLN
	,PTN
	,QAR
	,RUR
	,SAR
	,SCR
	,SEK
	,SGD
	,SKP
	,THB
	,TRL
	,TTD
	,TWD
	,USD
	,VEB
	,VND
	,XEU
	,ZAR
	,ZWD
	,NOK);
END_TYPE;

TYPE IfcDerivedUnitEnum = ENUMERATION OF
	(ANGULARVELOCITYUNIT
	,COMPOUNDPLANEANGLEUNIT
	,DYNAMICVISCOSITYUNIT
	,HEATFLUXDENSITYUNIT
	,INTEGERCOUNTRATEUNIT
	,ISOTHERMALMOISTURECAPACITYUNIT
	,KINEMATICVISCOSITYUNIT
	,LINEARVELOCITYUNIT
	,MASSDENSITYUNIT
	,MASSFLOWRATEUNIT
	,MOISTUREDIFFUSIVITYUNIT
	,MOLECULARWEIGHTUNIT
	,SPECIFICHEATCAPACITYUNIT
	,THERMALADMITTANCEUNIT
	,THERMALCONDUCTANCEUNIT
	,THERMALRESISTANCEUNIT
	,THERMALTRANSMITTANCEUNIT
	,VAPORPERMEABILITYUNIT
	,VOLUMETRICFLOWRATEUNIT
	,ROTATIONALFREQUENCYUNIT
	,TORQUEUNIT
	,MOMENTORINERTIAUNIT
	,LINEARMOMENTUNIT
	,LINEARFORCEUNIT
	,PLANARFORCEUNIT
	,MODULUSOFELASTICITYUNIT
	,SHEARMODULUSUNIT
	,LINEARSTIFFNESSUNIT
	,ROTATIONALSTIFFNESSUNIT
	,MODULUSOFSUBGRADEREACTIONUNIT
	,ACCELERATIONUNIT
	,CURVATUREUNIT
	,HEATINGVALUEUNIT
	,IONCONCENTRATIONUNIT
	,LUMINOUSINTENSITYDISTRIBUTIONUNIT
	,MASSPERLENGTHUNIT
	,MODULUSOFLINEARSUBGRADEREACTIONUNIT
	,MODULUSOFROTATIONALSUBGRADEREACTIONUNIT
	,PHUNIT
	,ROTATIONALMASSUNIT
	,SECTIONAREAINTEGRALUNIT
	,SECTIONMODULUSUNIT
	,SOUNDPOWERUNIT
	,SOUNDPRESSUREUNIT
	,TEMPERATUREGRADIENTUNIT
	,THERMALEXPANSIONCOEFFICIENTUNIT
	,WARPINGCONSTANTUNIT
	,WARPINGMOMENTUNIT
	,USERDEFINED);
END_TYPE;

TYPE IfcDirectionSenseEnum = ENUMERATION OF
	(POSITIVE
	,NEGATIVE);
END_TYPE;

TYPE IfcDocumentConfidentialityEnum = ENUMERATION OF
	(PUBLIC
	,RESTRICTED
	,CONFIDENTIAL
	,PERSONAL
	,USERDEFINED
	,NOTDEFINED);
END_TYPE;

TYPE IfcDocumentStatusEnum = ENUMERATION OF
	(DRAFT
	,FINALDRAFT
	,FINAL
	,REVISION
	,NOTDEFINED);
END_TYPE;

TYPE IfcDoorPanelOperationEnum = ENUMERATION OF
	(SWINGING
	,DOUBLE_ACTING
	,SLIDING
	,FOLDING
	,REVOLVING
	,ROLLINGUP
	,USERDEFINED
	,NOTDEFINED);
END_TYPE;

TYPE IfcDoorPanelPositionEnum = ENUMERATION OF
	(LEFT
	,MIDDLE
	,RIGHT
	,NOTDEFINED);
END_TYPE;

TYPE IfcDoorStyleConstructionEnum = ENUMERATION OF
	(ALUMINIUM
	,HIGH_GRADE_STEEL
	,STEEL
	,WOOD
	,ALUMINIUM_WOOD
	,ALUMINIUM_PLASTIC
	,PLASTIC
	,USERDEFINED
	,NOTDEFINED);
END_TYPE;

TYPE IfcDoorStyleOperationEnum = ENUMERATION OF
	(SINGLE_SWING_LEFT
	,SINGLE_SWING_RIGHT
	,DOUBLE_DOOR_SINGLE_SWING
	,DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT
	,DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT
	,DOUBLE_SWING_LEFT
	,DOUBLE_SWING_RIGHT
	,DOUBLE_DOOR_DOUBLE_SWING
	,SLIDING_TO_LEFT
	,SLIDING_TO_RIGHT
	,DOUBLE_DOOR_SLIDING
	,FOLDING_TO_LEFT
	,FOLDING_TO_RIGHT
	,DOUBLE_DOOR_FOLDING
	,REVOLVING
	,ROLLINGUP
	,USERDEFINED
	,NOTDEFINED);
END_TYPE;

TYPE IfcElementAssemblyTypeEnum = ENUMERATION OF
	(ACCESSORY_ASSEMBLY
	,ARCH
	,BEAM_GRID
	,BRACED_FRAME
	,GIRDER
	,REINFORCEMENT_UNIT
	,RIGID_FRAME
	,SLAB_FIELD
	,TRUSS
	,USERDEFINED
	,NOTDEFINED);
END_TYPE;

TYPE IfcElementCompositionEnum = ENUMERATION OF
	(COMPLEX
	,ELEMENT
	,PARTIAL);
END_TYPE;

TYPE IfcGeometricProjectionEnum = ENUMERATION OF
	(GRAPH_VIEW
	,SKETCH_VIEW
	,MODEL_VIEW
	,PLAN_VIEW
	,REFLECTED_PLAN_VIEW
	,SECTION_VIEW
	,ELEVATION_VIEW
	,USERDEFINED
	,NOTDEFINED);
END_TYPE;

TYPE IfcInternalOrExternalEnum = ENUMERATION OF
	(INTERNAL
	,EXTERNAL
	,NOTDEFINED);
END_TYPE;

TYPE IfcLayerSetDirectionEnum = ENUMERATION OF
	(AXIS1
	,AXIS2
	,AXIS3);
END_TYPE;

TYPE IfcMemberTypeEnum = ENUMERATION OF
	(BRACE
	,COLLAR
	,MEMBER
	,POST
	,PURLIN
	,RAFTER
	,STRINGER
	,STRUT
	,USERDEFINED
	,NOTDEFINED);
END_TYPE;

TYPE IfcObjectTypeEnum = ENUMERATION OF
	(PRODUCT
	,PROCESS
	,CONTROL
	,RESOURCE
	,ACTOR
	,GROUP
	,PROJECT
	,NOTDEFINED);
END_TYPE;

TYPE IfcPhysicalOrVirtualEnum = ENUMERATION OF
	(PHYSICAL
	,VIRTUAL
	,NOTDEFINED);
END_TYPE;

TYPE IfcProfileTypeEnum = ENUMERATION OF
	(CURVE
	,AREA);
END_TYPE;

TYPE IfcRailingTypeEnum = ENUMERATION OF
	(HANDRAIL
	,GUARDRAIL
	,BALUSTRADE
	,USERDEFINED
	,NOTDEFINED);
END_TYPE;

TYPE IfcRampFlightTypeEnum = ENUMERATION OF
	(STRAIGHT
	,SPIRAL
	,USERDEFINED
	,NOTDEFINED);
END_TYPE;

TYPE IfcRampTypeEnum = ENUMERATION OF
	(STRAIGHT_RUN_RAMP
	,TWO_STRAIGHT_RUN_RAMP
	,QUARTER_TURN_RAMP
	,TWO_QUARTER_TURN_RAMP
	,HALF_TURN_RAMP
	,SPIRAL_RAMP
	,USERDEFINED
	,NOTDEFINED);
END_TYPE;

TYPE IfcRoleEnum = ENUMERATION OF
	(SUPPLIER
	,MANUFACTURER
	,CONTRACTOR
	,SUBCONTRACTOR
	,ARCHITECT
	,STRUCTURALENGINEER
	,COSTENGINEER
	,CLIENT
	,BUILDINGOWNER
	,BUILDINGOPERATOR
	,MECHANICALENGINEER
	,ELECTRICALENGINEER
	,PROJECTMANAGER
	,FACILITIESMANAGER
	,CIVILENGINEER
	,COMISSIONINGENGINEER
	,ENGINEER
	,OWNER
	,CONSULTANT
	,CONSTRUCTIONMANAGER
	,FIELDCONSTRUCTIONMANAGER
	,RESELLER
	,USERDEFINED);
END_TYPE;

TYPE IfcRoofTypeEnum = ENUMERATION OF
	(FLAT_ROOF
	,SHED_ROOF
	,GABLE_ROOF
	,HIP_ROOF
	,HIPPED_GABLE_ROOF
	,GAMBREL_ROOF
	,MANSARD_ROOF
	,BARREL_ROOF
	,RAINBOW_ROOF
	,BUTTERFLY_ROOF
	,PAVILION_ROOF
	,DOME_ROOF
	,FREEFORM
	,NOTDEFINED);
END_TYPE;

TYPE IfcSIPrefix = ENUMERATION OF
	(EXA
	,PETA
	,TERA
	,GIGA
	,MEGA
	,KILO
	,HECTO
	,DECA
	,DECI
	,CENTI
	,MILLI
	,MICRO
	,NANO
	,PICO
	,FEMTO
	,ATTO);
END_TYPE;

TYPE IfcSIUnitName = ENUMERATION OF
	(AMPERE
	,BECQUEREL
	,CANDELA
	,COULOMB
	,CUBIC_METRE
	,DEGREE_CELSIUS
	,FARAD
	,GRAM
	,GRAY
	,HENRY
	,HERTZ
	,JOULE
	,KELVIN
	,LUMEN
	,LUX
	,METRE
	,MOLE
	,NEWTON
	,OHM
	,PASCAL
	,RADIAN
	,SECOND
	,SIEMENS
	,SIEVERT
	,SQUARE_METRE
	,STERADIAN
	,TESLA
	,VOLT
	,WATT
	,WEBER);
END_TYPE;

TYPE IfcSequenceEnum = ENUMERATION OF
	(START_START
	,START_FINISH
	,FINISH_START
	,FINISH_FINISH
	,NOTDEFINED);
END_TYPE;

TYPE IfcSlabTypeEnum = ENUMERATION OF
	(FLOOR
	,ROOF
	,LANDING
	,USERDEFINED
	,NOTDEFINED);
END_TYPE;

TYPE IfcStairFlightTypeEnum = ENUMERATION OF
	(STRAIGHT
	,WINDER
	,SPIRAL
	,CURVED
	,FREEFORM
	,USERDEFINED
	,NOTDEFINED);
END_TYPE;

TYPE IfcStairTypeEnum = ENUMERATION OF
	(STRAIGHT_RUN_STAIR
	,TWO_STRAIGHT_RUN_STAIR
	,QUARTER_WINDING_STAIR
	,QUARTER_TURN_STAIR
	,HALF_WINDING_STAIR
	,HALF_TURN_STAIR
	,TWO_QUARTER_WINDING_STAIR
	,TWO_QUARTER_TURN_STAIR
	,THREE_QUARTER_WINDING_STAIR
	,THREE_QUARTER_TURN_STAIR
	,SPIRAL_STAIR
	,DOUBLE_RETURN_STAIR
	,CURVED_RUN_STAIR
	,TWO_CURVED_RUN_STAIR
	,USERDEFINED
	,NOTDEFINED);
END_TYPE;

TYPE IfcStateEnum = ENUMERATION OF
	(READWRITE
	,READONLY
	,LOCKED
	,READWRITELOCKED
	,READONLYLOCKED);
END_TYPE;

TYPE IfcTransitionCode = ENUMERATION OF
	(DISCONTINUOUS
	,CONTINUOUS
	,CONTSAMEGRADIENT
	,CONTSAMEGRADIENTSAMECURVATURE);
END_TYPE;

TYPE IfcTransportElementTypeEnum = ENUMERATION OF
	(ELEVATOR
	,ESCALATOR
	,MOVINGWALKWAY
	,USERDEFINED
	,NOTDEFINED);
END_TYPE;

TYPE IfcTrimmingPreference = ENUMERATION OF
	(CARTESIAN
	,PARAMETER
	,UNSPECIFIED);
END_TYPE;

TYPE IfcUnitEnum = ENUMERATION OF
	(ABSORBEDDOSEUNIT
	,AMOUNTOFSUBSTANCEUNIT
	,AREAUNIT
	,DOSEEQUIVALENTUNIT
	,ELECTRICCAPACITANCEUNIT
	,ELECTRICCHARGEUNIT
	,ELECTRICCONDUCTANCEUNIT
	,ELECTRICCURRENTUNIT
	,ELECTRICRESISTANCEUNIT
	,ELECTRICVOLTAGEUNIT
	,ENERGYUNIT
	,FORCEUNIT
	,FREQUENCYUNIT
	,ILLUMINANCEUNIT
	,INDUCTANCEUNIT
	,LENGTHUNIT
	,LUMINOUSFLUXUNIT
	,LUMINOUSINTENSITYUNIT
	,MAGNETICFLUXDENSITYUNIT
	,MAGNETICFLUXUNIT
	,MASSUNIT
	,PLANEANGLEUNIT
	,POWERUNIT
	,PRESSUREUNIT
	,RADIOACTIVITYUNIT
	,SOLIDANGLEUNIT
	,THERMODYNAMICTEMPERATUREUNIT
	,TIMEUNIT
	,VOLUMEUNIT
	,USERDEFINED);
END_TYPE;

TYPE IfcWallTypeEnum = ENUMERATION OF
	(STANDARD
	,POLYGON
	,SHEAR
	,USERDEFINED
	,NOTDEFINED);
END_TYPE;

TYPE IfcWindowPanelOperationEnum = ENUMERATION OF
	(SIDEHUNGRIGHTHAND
	,SIDEHUNGLEFTHAND
	,TILTANDTURNRIGHTHAND
	,TILTANDTURNLEFTHAND
	,TOPHUNG
	,BOTTOMHUNG
	,PIVOTHORIZONTAL
	,PIVOTVERTICAL
	,SLIDINGHORIZONTAL
	,SLIDINGVERTICAL
	,REMOVABLECASEMENT
	,FIXEDCASEMENT
	,OTHEROPERATION
	,NOTDEFINED);
END_TYPE;

TYPE IfcWindowPanelPositionEnum = ENUMERATION OF
	(LEFT
	,MIDDLE
	,RIGHT
	,BOTTOM
	,TOP
	,NOTDEFINED);
END_TYPE;

TYPE IfcWindowStyleConstructionEnum = ENUMERATION OF
	(ALUMINIUM
	,HIGH_GRADE_STEEL
	,STEEL
	,WOOD
	,ALUMINIUM_WOOD
	,PLASTIC
	,OTHER_CONSTRUCTION
	,NOTDEFINED);
END_TYPE;

TYPE IfcWindowStyleOperationEnum = ENUMERATION OF
	(SINGLE_PANEL
	,DOUBLE_PANEL_VERTICAL
	,DOUBLE_PANEL_HORIZONTAL
	,TRIPLE_PANEL_VERTICAL
	,TRIPLE_PANEL_BOTTOM
	,TRIPLE_PANEL_TOP
	,TRIPLE_PANEL_LEFT
	,TRIPLE_PANEL_RIGHT
	,TRIPLE_PANEL_HORIZONTAL
	,USERDEFINED
	,NOTDEFINED);
END_TYPE;

TYPE IfcActorSelect = SELECT
	(IfcOrganization
	,IfcPerson
	,IfcPersonAndOrganization);
END_TYPE;

TYPE IfcAxis2Placement = SELECT
	(IfcAxis2Placement2D
	,IfcAxis2Placement3D);
END_TYPE;

TYPE IfcBooleanOperand = SELECT
	(IfcSolidModel
	,IfcHalfSpaceSolid
	,IfcBooleanResult);
END_TYPE;

TYPE IfcClassificationNotationSelect = SELECT
	(IfcClassificationNotation
	,IfcClassificationReference);
END_TYPE;

TYPE IfcCsgSelect = SELECT
	(IfcBooleanResult);
END_TYPE;

TYPE IfcDateTimeSelect = SELECT
	(IfcCalendarDate
	,IfcLocalTime
	,IfcDateAndTime);
END_TYPE;

TYPE IfcDerivedMeasureValue = SELECT
	(IfcVolumetricFlowRateMeasure
	,IfcTimeStamp
	,IfcThermalTransmittanceMeasure
	,IfcThermalResistanceMeasure
	,IfcThermalAdmittanceMeasure
	,IfcPressureMeasure
	,IfcPowerMeasure
	,IfcMassFlowRateMeasure
	,IfcMassDensityMeasure
	,IfcLinearVelocityMeasure
	,IfcKinematicViscosityMeasure
	,IfcIntegerCountRateMeasure
	,IfcHeatFluxDensityMeasure
	,IfcFrequencyMeasure
	,IfcEnergyMeasure
	,IfcElectricVoltageMeasure
	,IfcDynamicViscosityMeasure
	,IfcCompoundPlaneAngleMeasure
	,IfcAngularVelocityMeasure
	,IfcThermalConductivityMeasure
	,IfcMolecularWeightMeasure
	,IfcVaporPermeabilityMeasure
	,IfcMoistureDiffusivityMeasure
	,IfcIsothermalMoistureCapacityMeasure
	,IfcSpecificHeatCapacityMeasure
	,IfcMonetaryMeasure
	,IfcMagneticFluxDensityMeasure
	,IfcMagneticFluxMeasure
	,IfcLuminousFluxMeasure
	,IfcForceMeasure
	,IfcInductanceMeasure
	,IfcIlluminanceMeasure
	,IfcElectricResistanceMeasure
	,IfcElectricConductanceMeasure
	,IfcElectricChargeMeasure
	,IfcDoseEquivalentMeasure
	,IfcElectricCapacitanceMeasure
	,IfcAbsorbedDoseMeasure
	,IfcRadioActivityMeasure
	,IfcRotationalFrequencyMeasure
	,IfcTorqueMeasure
	,IfcAccelerationMeasure
	,IfcLinearForceMeasure
	,IfcLinearStiffnessMeasure
	,IfcModulusOfSubgradeReactionMeasure
	,IfcModulusOfElasticityMeasure
	,IfcMomentOfInertiaMeasure
	,IfcPlanarForceMeasure
	,IfcRotationalStiffnessMeasure
	,IfcShearModulusMeasure
	,IfcLinearMomentMeasure
	,IfcLuminousIntensityDistributionMeasure
	,IfcCurvatureMeasure
	,IfcMassPerLengthMeasure
	,IfcModulusOfLinearSubgradeReactionMeasure
	,IfcModulusOfRotationalSubgradeReactionMeasure
	,IfcRotationalMassMeasure
	,IfcSectionalAreaIntegralMeasure
	,IfcSectionModulusMeasure
	,IfcTemperatureGradientMeasure
	,IfcThermalExpansionCoefficientMeasure
	,IfcWarpingConstantMeasure
	,IfcWarpingMomentMeasure
	,IfcSoundPowerMeasure
	,IfcSoundPressureMeasure
	,IfcHeatingValueMeasure
	,IfcPHMeasure
	,IfcIonConcentrationMeasure);
END_TYPE;

TYPE IfcDocumentSelect = SELECT
	(IfcDocumentReference
	,IfcDocumentInformation);
END_TYPE;

TYPE IfcGeometricSetSelect = SELECT
	(IfcPoint
	,IfcCurve
	,IfcSurface);
END_TYPE;

TYPE IfcLibrarySelect = SELECT
	(IfcLibraryReference
	,IfcLibraryInformation);
END_TYPE;

TYPE IfcMaterialSelect = SELECT
	(IfcMaterial
	,IfcMaterialList
	,IfcMaterialLayerSetUsage
	,IfcMaterialLayerSet
	,IfcMaterialLayer);
END_TYPE;

TYPE IfcMeasureValue = SELECT
	(IfcVolumeMeasure
	,IfcTimeMeasure
	,IfcThermodynamicTemperatureMeasure
	,IfcSolidAngleMeasure
	,IfcPositiveRatioMeasure
	,IfcRatioMeasure
	,IfcPositivePlaneAngleMeasure
	,IfcPlaneAngleMeasure
	,IfcParameterValue
	,IfcNumericMeasure
	,IfcMassMeasure
	,IfcPositiveLengthMeasure
	,IfcLengthMeasure
	,IfcElectricCurrentMeasure
	,IfcDescriptiveMeasure
	,IfcCountMeasure
	,IfcContextDependentMeasure
	,IfcAreaMeasure
	,IfcAmountOfSubstanceMeasure
	,IfcLuminousIntensityMeasure
	,IfcNormalisedRatioMeasure
	,IfcComplexNumber);
END_TYPE;

TYPE IfcObjectReferenceSelect = SELECT
	(IfcMaterial
	,IfcPerson
	,IfcDateAndTime
	,IfcMaterialList
	,IfcOrganization
	,IfcCalendarDate
	,IfcLocalTime
	,IfcPersonAndOrganization
	,IfcMaterialLayer
	,IfcExternalReference
	,IfcAddress);
END_TYPE;

TYPE IfcShell = SELECT
	(IfcClosedShell
	,IfcOpenShell);
END_TYPE;

TYPE IfcSimpleValue = SELECT
	(IfcInteger
	,IfcReal
	,IfcBoolean
	,IfcIdentifier
	,IfcText
	,IfcLabel
	,IfcLogical);
END_TYPE;

TYPE IfcTrimmingSelect = SELECT
	(IfcCartesianPoint
	,IfcParameterValue);
END_TYPE;

TYPE IfcUnit = SELECT
	(IfcDerivedUnit
	,IfcNamedUnit
	,IfcMonetaryUnit);
END_TYPE;

TYPE IfcValue = SELECT
	(IfcMeasureValue
	,IfcSimpleValue
	,IfcDerivedMeasureValue);
END_TYPE;

TYPE IfcVectorOrDirection = SELECT
	(IfcDirection
	,IfcVector);
END_TYPE;

ENTITY Ifc2DCompositeCurve
 SUBTYPE OF (IfcCompositeCurve);
 WHERE
	WR1 : SELF\IfcCompositeCurve.ClosedCurve;
	WR2 : SELF\IfcCurve.Dim = 2;
END_ENTITY;

ENTITY IfcActor
 SUBTYPE OF (IfcObject);
	TheActor : IfcActorSelect;
 INVERSE
	IsActingUpon : SET [0:?] OF IfcRelAssignsToActor FOR RelatingActor;
END_ENTITY;

ENTITY IfcActorRole;
	Role : IfcRoleEnum;
	UserDefinedRole : OPTIONAL IfcLabel;
	Description : OPTIONAL IfcText;
 WHERE
	WR1 : (Role <> IfcRoleEnum.USERDEFINED) OR
            ((Role = IfcRoleEnum.USERDEFINED) AND
              EXISTS(SELF.UserDefinedRole));
END_ENTITY;

ENTITY IfcAddress
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcPostalAddress
	,IfcTelecomAddress));
	Purpose : OPTIONAL IfcAddressTypeEnum;
	Description : OPTIONAL IfcText;
	UserDefinedPurpose : OPTIONAL IfcLabel;
 INVERSE
	OfPerson : SET [0:?] OF IfcPerson FOR Addresses;
	OfOrganization : SET [0:?] OF IfcOrganization FOR Addresses;
 WHERE
	WR1 : (NOT(EXISTS(Purpose))) OR
            ((Purpose <> IfcAddressTypeEnum.USERDEFINED) OR
            ((Purpose = IfcAddressTypeEnum.USERDEFINED) AND
              EXISTS(SELF.UserDefinedPurpose)));
END_ENTITY;

ENTITY IfcAnnotation
 SUBTYPE OF (IfcProduct);
 INVERSE
	ContainedInStructure : SET [0:1] OF IfcRelContainedInSpatialStructure FOR RelatedElements;
END_ENTITY;

ENTITY IfcApplication;
	ApplicationDeveloper : IfcOrganization;
	Version : IfcLabel;
	ApplicationFullName : IfcLabel;
	ApplicationIdentifier : IfcIdentifier;
 UNIQUE
	UR1 : ApplicationIdentifier;
	UR2 : ApplicationFullName, Version;
END_ENTITY;

ENTITY IfcArbitraryClosedProfileDef
 SUPERTYPE OF (ONEOF
	(IfcArbitraryProfileDefWithVoids))
 SUBTYPE OF (IfcProfileDef);
	OuterCurve : IfcCurve;
 WHERE
	WR1 : OuterCurve.Dim = 2;
	WR2 : NOT('IFC2X2_PLATFORM.IFCLINE' IN TYPEOF(OuterCurve));
	WR3 : NOT('IFC2X2_PLATFORM.IFCOFFSETCURVE2D' IN TYPEOF(OuterCurve));
END_ENTITY;

ENTITY IfcArbitraryOpenProfileDef
 SUBTYPE OF (IfcProfileDef);
	Curve : IfcBoundedCurve;
 WHERE
	WR1 : SELF\IfcProfileDef.ProfileType = IfcProfileTypeEnum.CURVE;
	WR2 : Curve.Dim = 2;
END_ENTITY;

ENTITY IfcArbitraryProfileDefWithVoids
 SUBTYPE OF (IfcArbitraryClosedProfileDef);
	InnerCurves : SET [1:?] OF IfcCurve;
 WHERE
	WR1 : SELF\IfcProfileDef.ProfileType = AREA;
	WR2 : SIZEOF(QUERY(temp <* InnerCurves | temp.Dim <> 2)) = 0;
	WR3 : SIZEOF(QUERY(temp <* InnerCurves | 'IFC2X2_PLATFORM.IFCLINE' IN TYPEOF(temp))) = 0;
END_ENTITY;

ENTITY IfcAsymmetricIShapeProfileDef
 SUBTYPE OF (IfcIShapeProfileDef);
	TopFlangeWidth : IfcPositiveLengthMeasure;
	TopFlangeThickness : OPTIONAL IfcPositiveLengthMeasure;
	TopFlangeFilletRadius : OPTIONAL IfcPositiveLengthMeasure;
	CentreOfGravityInY : IfcPositiveLengthMeasure;
END_ENTITY;

ENTITY IfcAxis1Placement
 SUBTYPE OF (IfcPlacement);
	Axis : OPTIONAL IfcDirection;
 DERIVE
	Z : IfcDirection := NVL (IfcNormalise(Axis), IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([0.0,0.0,1.0]));
 WHERE
	WR1 : (NOT (EXISTS (Axis))) OR (Axis.Dim = 3);
	WR2 : SELF\IfcPlacement.Location.Dim = 3;
END_ENTITY;

ENTITY IfcAxis2Placement2D
 SUBTYPE OF (IfcPlacement);
	RefDirection : OPTIONAL IfcDirection;
 DERIVE
	P : LIST [2:2] OF IfcDirection := IfcBuild2Axes(RefDirection);
 WHERE
	WR1 : (NOT (EXISTS (RefDirection))) OR (RefDirection.Dim = 2);
	WR2 : SELF\IfcPlacement.Location.Dim = 2;
END_ENTITY;

ENTITY IfcAxis2Placement3D
 SUBTYPE OF (IfcPlacement);
	Axis : OPTIONAL IfcDirection;
	RefDirection : OPTIONAL IfcDirection;
 DERIVE
	P : LIST [3:3] OF IfcDirection := IfcBuildAxes(Axis, RefDirection);
 WHERE
	WR1 : SELF\IfcPlacement.Location.Dim = 3;
	WR2 : (NOT (EXISTS (Axis))) OR (Axis.Dim = 3);
	WR3 : (NOT (EXISTS (RefDirection))) OR (RefDirection.Dim = 3);
	WR4 : (NOT (EXISTS (Axis))) OR (NOT (EXISTS (RefDirection))) OR (IfcCrossProduct(Axis,RefDirection).Magnitude > 0.0);
	WR5 : NOT ((EXISTS (Axis)) XOR (EXISTS (RefDirection)));
END_ENTITY;

ENTITY IfcBSplineCurve
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcBezierCurve))
 SUBTYPE OF (IfcBoundedCurve);
	Degree : INTEGER;
	ControlPointsList : LIST [2:?] OF IfcCartesianPoint;
	CurveForm : IfcBSplineCurveForm;
	ClosedCurve : LOGICAL;
	SelfIntersect : LOGICAL;
 DERIVE
	ControlPoints : ARRAY [0:255] OF IfcCartesianPoint := IfcListToArray(ControlPointsList,0,UpperIndexOnControlPoints);
	UpperIndexOnControlPoints : INTEGER := (SIZEOF(ControlPointsList) - 1);
 WHERE
	WR41 : SIZEOF(QUERY(Temp <* ControlPointsList |
               Temp.Dim <> ControlPointsList[1].Dim))
             = 0;
END_ENTITY;

ENTITY IfcBeam
 SUBTYPE OF (IfcBuildingElement);
END_ENTITY;

ENTITY IfcBeamAndColumnType
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcBeamType
	,IfcColumnType
	,IfcMemberType))
 SUBTYPE OF (IfcBuildingElementType);
END_ENTITY;

ENTITY IfcBeamType
 SUBTYPE OF (IfcBeamAndColumnType);
	PredefinedType : IfcBeamTypeEnum;
END_ENTITY;

ENTITY IfcBezierCurve
 SUPERTYPE OF (ONEOF
	(IfcRationalBezierCurve))
 SUBTYPE OF (IfcBSplineCurve);
END_ENTITY;

ENTITY IfcBooleanClippingResult
 SUBTYPE OF (IfcBooleanResult);
 WHERE
	WR1 : ('IFC2X2_PLATFORM.IFCSWEPTAREASOLID' IN TYPEOF(FirstOperand)) OR ('IFC2X2_PLATFORM.IFCBOOLEANCLIPPINGRESULT' IN TYPEOF(FirstOperand));
	WR2 : ('IFC2X2_PLATFORM.IFCHALFSPACESOLID' IN TYPEOF(SecondOperand));
	WR3 : Operator = DIFFERENCE;
END_ENTITY;

ENTITY IfcBooleanResult
 SUPERTYPE OF (ONEOF
	(IfcBooleanClippingResult))
 SUBTYPE OF (IfcGeometricRepresentationItem);
	Operator : IfcBooleanOperator;
	FirstOperand : IfcBooleanOperand;
	SecondOperand : IfcBooleanOperand;
 DERIVE
	Dim : IfcDimensionCount := FirstOperand.Dim;
 WHERE
	WR1 : FirstOperand.Dim = SecondOperand.Dim;
END_ENTITY;

ENTITY IfcBoundedCurve
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcBSplineCurve
	,IfcCompositeCurve
	,IfcPolyline
	,IfcTrimmedCurve))
 SUBTYPE OF (IfcCurve);
END_ENTITY;

ENTITY IfcBoundedSurface
 SUPERTYPE OF (ONEOF
	(IfcCurveBoundedPlane
	,IfcRectangularTrimmedSurface))
 SUBTYPE OF (IfcSurface);
END_ENTITY;

ENTITY IfcBoundingBox
 SUBTYPE OF (IfcGeometricRepresentationItem);
	Corner : IfcCartesianPoint;
	XDim : IfcPositiveLengthMeasure;
	YDim : IfcPositiveLengthMeasure;
	ZDim : IfcPositiveLengthMeasure;
 DERIVE
	Dim : IfcDimensionCount := 3;
END_ENTITY;

ENTITY IfcBoxedHalfSpace
 SUBTYPE OF (IfcHalfSpaceSolid);
	Enclosure : IfcBoundingBox;
 WHERE
	WR1 : NOT ('IFC2X2_PLATFORM.IFCCURVEBOUNDEDPLANE' IN TYPEOF(SELF\IfcHalfSpaceSolid.BaseSurface));
END_ENTITY;

ENTITY IfcBuilding
 SUBTYPE OF (IfcSpatialStructureElement);
	ElevationOfRefHeight : OPTIONAL IfcLengthMeasure;
	ElevationOfTerrain : OPTIONAL IfcLengthMeasure;
	BuildingAddress : OPTIONAL IfcPostalAddress;
END_ENTITY;

ENTITY IfcBuildingElement
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcBeam
	,IfcBuildingElementProxy
	,IfcColumn
	,IfcCovering
	,IfcCurtainWall
	,IfcDoor
	,IfcRailing
	,IfcRamp
	,IfcRampFlight
	,IfcRoof
	,IfcSlab
	,IfcStair
	,IfcStairFlight
	,IfcWall
	,IfcWindow))
 SUBTYPE OF (IfcElement);
END_ENTITY;

ENTITY IfcBuildingElementProxy
 SUBTYPE OF (IfcBuildingElement);
	CompositionType : OPTIONAL IfcElementCompositionEnum;
 WHERE
	WR1 : EXISTS(SELF\IfcRoot.Name);
END_ENTITY;

ENTITY IfcBuildingElementType
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcBeamAndColumnType
	,IfcCoveringType
	,IfcRailingType
	,IfcRampFlightType
	,IfcSlabType
	,IfcStairFlightType
	,IfcWallType))
 SUBTYPE OF (IfcElementType);
END_ENTITY;

ENTITY IfcBuildingStorey
 SUBTYPE OF (IfcSpatialStructureElement);
	Elevation : OPTIONAL IfcLengthMeasure;
END_ENTITY;

ENTITY IfcCShapeProfileDef
 SUBTYPE OF (IfcParameterizedProfileDef);
	Depth : IfcPositiveLengthMeasure;
	Width : IfcPositiveLengthMeasure;
	WallThickness : IfcPositiveLengthMeasure;
	Girth : IfcPositiveLengthMeasure;
	InternalFilletRadius : OPTIONAL IfcPositiveLengthMeasure;
	CentreOfGravityInX : IfcPositiveLengthMeasure;
 WHERE
	WR1 : Girth < (Depth / 2);
END_ENTITY;

ENTITY IfcCalendarDate;
	DayComponent : IfcDayInMonthNumber;
	MonthComponent : IfcMonthInYearNumber;
	YearComponent : IfcYearNumber;
 WHERE
	WR21 : IfcValidCalendarDate (SELF);
END_ENTITY;

ENTITY IfcCartesianPoint
 SUBTYPE OF (IfcPoint);
	Coordinates : LIST [1:3] OF IfcLengthMeasure;
 DERIVE
	Dim : IfcDimensionCount := HIINDEX(Coordinates);
 WHERE
	WR1 : HIINDEX(Coordinates) >= 2;
END_ENTITY;

ENTITY IfcCartesianTransformationOperator
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcCartesianTransformationOperator2D
	,IfcCartesianTransformationOperator3D))
 SUBTYPE OF (IfcGeometricRepresentationItem);
	Axis1 : OPTIONAL IfcDirection;
	Axis2 : OPTIONAL IfcDirection;
	LocalOrigin : IfcCartesianPoint;
	Scale : OPTIONAL REAL;
 DERIVE
	Scl : REAL := NVL(Scale, 1.0);
	Dim : IfcDimensionCount := LocalOrigin.Dim;
 WHERE
	WR1 : Scl > 0.0;
END_ENTITY;

ENTITY IfcCartesianTransformationOperator2D
 SUPERTYPE OF (ONEOF
	(IfcCartesianTransformationOperator2DnonUniform))
 SUBTYPE OF (IfcCartesianTransformationOperator);
 DERIVE
	U : LIST [2:2] OF IfcDirection := IfcBaseAxis(2,SELF\IfcCartesianTransformationOperator.Axis1,
          SELF\IfcCartesianTransformationOperator.Axis2,?);
 WHERE
	WR1 : SELF\IfcCartesianTransformationOperator.Dim = 2;
	WR2 : NOT(EXISTS(SELF\IfcCartesianTransformationOperator.Axis1)) OR 
            (SELF\IfcCartesianTransformationOperator.Axis1.Dim = 2);
	WR3 : NOT(EXISTS(SELF\IfcCartesianTransformationOperator.Axis2)) OR 
            (SELF\IfcCartesianTransformationOperator.Axis2.Dim = 2);
END_ENTITY;

ENTITY IfcCartesianTransformationOperator2DnonUniform
 SUBTYPE OF (IfcCartesianTransformationOperator2D);
	Scale2 : OPTIONAL REAL;
 DERIVE
	Scl2 : REAL := NVL(Scale2, SELF\IfcCartesianTransformationOperator.Scl);
 WHERE
	WR1 : Scl2 > 0.0;
END_ENTITY;

ENTITY IfcCartesianTransformationOperator3D
 SUPERTYPE OF (ONEOF
	(IfcCartesianTransformationOperator3DnonUniform))
 SUBTYPE OF (IfcCartesianTransformationOperator);
	Axis3 : OPTIONAL IfcDirection;
 DERIVE
	U : LIST [3:3] OF IfcDirection := IfcBaseAxis(3,SELF\IfcCartesianTransformationOperator.Axis1,
              SELF\IfcCartesianTransformationOperator.Axis2,Axis3);
 WHERE
	WR1 : SELF\IfcCartesianTransformationOperator.Dim = 3;
	WR2 : NOT(EXISTS(SELF\IfcCartesianTransformationOperator.Axis1)) OR 
            (SELF\IfcCartesianTransformationOperator.Axis1.Dim = 3);
	WR3 : NOT(EXISTS(SELF\IfcCartesianTransformationOperator.Axis2)) OR 
            (SELF\IfcCartesianTransformationOperator.Axis2.Dim = 3);
	WR4 : NOT(EXISTS(Axis3)) OR (Axis3.Dim = 3);
END_ENTITY;

ENTITY IfcCartesianTransformationOperator3DnonUniform
 SUBTYPE OF (IfcCartesianTransformationOperator3D);
	Scale2 : OPTIONAL REAL;
	Scale3 : OPTIONAL REAL;
 DERIVE
	Scl2 : REAL := NVL(Scale2, SELF\IfcCartesianTransformationOperator.Scl);
	Scl3 : REAL := NVL(Scale3, SELF\IfcCartesianTransformationOperator.Scl);
 WHERE
	WR1 : Scl2 > 0.0;
	WR2 : Scl3 > 0.0;
END_ENTITY;

ENTITY IfcCircle
 SUBTYPE OF (IfcConic);
	Radius : IfcPositiveLengthMeasure;
END_ENTITY;

ENTITY IfcCircleHollowProfileDef
 SUBTYPE OF (IfcCircleProfileDef);
	WallThickness : IfcPositiveLengthMeasure;
 WHERE
	WR1 : WallThickness < SELF\IfcCircleProfileDef.Radius;
END_ENTITY;

ENTITY IfcCircleProfileDef
 SUPERTYPE OF (ONEOF
	(IfcCircleHollowProfileDef))
 SUBTYPE OF (IfcParameterizedProfileDef);
	Radius : IfcPositiveLengthMeasure;
END_ENTITY;

ENTITY IfcClassification;
	Source : IfcLabel;
	Edition : IfcLabel;
	EditionDate : OPTIONAL IfcCalendarDate;
	Name : IfcLabel;
 INVERSE
	Contains : SET [0:?] OF IfcClassificationItem FOR ItemOf;
END_ENTITY;

ENTITY IfcClassificationItem;
	Notation : IfcClassificationNotationFacet;
	ItemOf : OPTIONAL IfcClassification;
	Title : IfcLabel;
 INVERSE
	IsClassifiedItemIn : SET [0:1] OF IfcClassificationItemRelationship FOR RelatedItems;
	IsClassifyingItemIn : SET [0:1] OF IfcClassificationItemRelationship FOR RelatingItem;
END_ENTITY;

ENTITY IfcClassificationItemRelationship;
	RelatingItem : IfcClassificationItem;
	RelatedItems : SET [1:?] OF IfcClassificationItem;
END_ENTITY;

ENTITY IfcClassificationNotation;
	NotationFacets : SET [1:?] OF IfcClassificationNotationFacet;
END_ENTITY;

ENTITY IfcClassificationNotationFacet;
	NotationValue : IfcLabel;
END_ENTITY;

ENTITY IfcClassificationReference
 SUBTYPE OF (IfcExternalReference);
	ReferencedSource : OPTIONAL IfcClassification;
END_ENTITY;

ENTITY IfcClosedShell
 SUBTYPE OF (IfcConnectedFaceSet);
END_ENTITY;

ENTITY IfcColumn
 SUBTYPE OF (IfcBuildingElement);
END_ENTITY;

ENTITY IfcColumnType
 SUBTYPE OF (IfcBeamAndColumnType);
	PredefinedType : IfcColumnTypeEnum;
END_ENTITY;

ENTITY IfcComplexProperty
 SUBTYPE OF (IfcProperty);
	UsageName : IfcIdentifier;
	HasProperties : SET [1:?] OF IfcProperty;
 WHERE
	WR21 : SIZEOF(QUERY(temp <* HasProperties | SELF :=: temp)) = 0;
	WR22 : IfcUniquePropertyName(HasProperties);
END_ENTITY;

ENTITY IfcCompositeCurve
 SUPERTYPE OF (ONEOF
	(Ifc2DCompositeCurve))
 SUBTYPE OF (IfcBoundedCurve);
	Segments : LIST [1:?] OF IfcCompositeCurveSegment;
	SelfIntersect : LOGICAL;
 DERIVE
	NSegments : INTEGER := SIZEOF(Segments);
	ClosedCurve : LOGICAL := Segments[NSegments].Transition <> Discontinuous;
 WHERE
	WR41 : ((NOT ClosedCurve) AND (SIZEOF(QUERY(Temp <* Segments | Temp.Transition = Discontinuous)) = 1)) OR ((ClosedCurve) AND (SIZEOF(QUERY(Temp <* Segments | Temp.Transition = Discontinuous)) = 0));
	WR42 : SIZEOF( QUERY( Temp <* Segments | Temp.Dim <> Segments[1].Dim)) = 0;
END_ENTITY;

ENTITY IfcCompositeCurveSegment
 SUBTYPE OF (IfcGeometricRepresentationItem);
	Transition : IfcTransitionCode;
	SameSense : BOOLEAN;
	ParentCurve : IfcCurve;
 DERIVE
	Dim : IfcDimensionCount := ParentCurve.Dim;
 INVERSE
	UsingCurves : SET [1:?] OF IfcCompositeCurve FOR Segments;
 WHERE
	WR1 : ('IFC2X2_PLATFORM.IFCBOUNDEDCURVE' IN TYPEOF(ParentCurve));
END_ENTITY;

ENTITY IfcCompositeProfileDef
 SUBTYPE OF (IfcProfileDef);
	Profiles : SET [2:?] OF IfcProfileDef;
	Label : OPTIONAL IfcLabel;
 WHERE
	WR1 : SIZEOF(QUERY(temp <* Profiles | temp.ProfileType <> Profiles[1].ProfileType)) = 0;
	WR2 : SIZEOF(QUERY(temp <* Profiles | 'IFC2X2_PLATFORM.IFCCOMPOSITEPROFILEDEF' IN TYPEOF(temp))) = 0;
END_ENTITY;

ENTITY IfcConic
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcCircle
	,IfcEllipse))
 SUBTYPE OF (IfcCurve);
	Position : IfcAxis2Placement;
END_ENTITY;

ENTITY IfcConnectedFaceSet
 SUPERTYPE OF (ONEOF
	(IfcClosedShell
	,IfcOpenShell))
 SUBTYPE OF (IfcTopologicalRepresentationItem);
	CfsFaces : SET [1:?] OF IfcFace;
END_ENTITY;

ENTITY IfcConnectionCurveGeometry
 SUBTYPE OF (IfcConnectionGeometry);
	CurveOnRelatingElement : IfcBoundedCurve;
	CurveOnRelatedElement : OPTIONAL IfcBoundedCurve;
END_ENTITY;

ENTITY IfcConnectionGeometry
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcConnectionCurveGeometry
	,IfcConnectionPointGeometry
	,IfcConnectionPortGeometry
	,IfcConnectionSurfaceGeometry));
END_ENTITY;

ENTITY IfcConnectionPointGeometry
 SUBTYPE OF (IfcConnectionGeometry);
	PointOnRelatingElement : IfcPoint;
	PointOnRelatedElement : OPTIONAL IfcPoint;
END_ENTITY;

ENTITY IfcConnectionPortGeometry
 SUBTYPE OF (IfcConnectionGeometry);
	LocationAtRelatingElement : IfcAxis2Placement;
	LocationAtRelatedElement : OPTIONAL IfcAxis2Placement;
	ProfileOfPort : IfcProfileDef;
END_ENTITY;

ENTITY IfcConnectionSurfaceGeometry
 SUBTYPE OF (IfcConnectionGeometry);
	SurfaceOnRelatingElement : IfcSurface;
	SurfaceOnRelatedElement : OPTIONAL IfcSurface;
END_ENTITY;

ENTITY IfcContextDependentUnit
 SUBTYPE OF (IfcNamedUnit);
	Name : IfcLabel;
END_ENTITY;

ENTITY IfcControl
 ABSTRACT SUPERTYPE
 SUBTYPE OF (IfcObject);
 INVERSE
	Controls : SET [0:?] OF IfcRelAssignsToControl FOR RelatingControl;
END_ENTITY;

ENTITY IfcConversionBasedUnit
 SUBTYPE OF (IfcNamedUnit);
	Name : IfcLabel;
	ConversionFactor : IfcMeasureWithUnit;
END_ENTITY;

ENTITY IfcCoordinatedUniversalTimeOffset;
	HourOffset : IfcHourInDay;
	MinuteOffset : OPTIONAL IfcMinuteInHour;
	Sense : IfcAheadOrBehind;
END_ENTITY;

ENTITY IfcCovering
 SUBTYPE OF (IfcBuildingElement);
	PredefinedType : OPTIONAL IfcCoveringTypeEnum;
 INVERSE
	Covers : SET [0:1] OF IfcRelCoversBldgElements FOR RelatedCoverings;
END_ENTITY;

ENTITY IfcCoveringType
 SUBTYPE OF (IfcBuildingElementType);
	PredefinedType : IfcCoveringTypeEnum;
END_ENTITY;

ENTITY IfcCraneRailAShapeProfileDef
 SUBTYPE OF (IfcParameterizedProfileDef);
	OverallHight : IfcPositiveLengthMeasure;
	BaseWidth2 : IfcPositiveLengthMeasure;
	Radius : OPTIONAL IfcPositiveLengthMeasure;
	HeadWidth : IfcPositiveLengthMeasure;
	HeadDepth2 : IfcPositiveLengthMeasure;
	HeadDepth3 : IfcPositiveLengthMeasure;
	WebThickness : IfcPositiveLengthMeasure;
	BaseWidth4 : IfcPositiveLengthMeasure;
	BaseDepth1 : IfcPositiveLengthMeasure;
	BaseDepth2 : IfcPositiveLengthMeasure;
	BaseDepth3 : IfcPositiveLengthMeasure;
	CentreOfGravityInY : IfcPositiveLengthMeasure;
END_ENTITY;

ENTITY IfcCraneRailFShapeProfileDef
 SUBTYPE OF (IfcParameterizedProfileDef);
	OverallHight : IfcPositiveLengthMeasure;
	HeadWidth : IfcPositiveLengthMeasure;
	Radius : OPTIONAL IfcPositiveLengthMeasure;
	HeadDepth2 : IfcPositiveLengthMeasure;
	HeadDepth3 : IfcPositiveLengthMeasure;
	WebThickness : IfcPositiveLengthMeasure;
	BaseDepth1 : IfcPositiveLengthMeasure;
	BaseDepth2 : IfcPositiveLengthMeasure;
	CentreOfGravityInY : IfcPositiveLengthMeasure;
END_ENTITY;

ENTITY IfcCsgSolid
 SUBTYPE OF (IfcSolidModel);
	TreeRootExpression : IfcCsgSelect;
END_ENTITY;

ENTITY IfcCurtainWall
 SUBTYPE OF (IfcBuildingElement);
END_ENTITY;

ENTITY IfcCurve
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcBoundedCurve
	,IfcConic
	,IfcLine
	,IfcOffsetCurve2D
	,IfcOffsetCurve3D))
 SUBTYPE OF (IfcGeometricRepresentationItem);
 DERIVE
	Dim : IfcDimensionCount := IfcCurveDim(SELF);
END_ENTITY;

ENTITY IfcCurveBoundedPlane
 SUBTYPE OF (IfcBoundedSurface);
	BasisSurface : IfcPlane;
	OuterBoundary : IfcCurve;
	InnerBoundaries : SET [0:?] OF IfcCurve;
 DERIVE
	Dim : IfcDimensionCount := BasisSurface.Dim;
END_ENTITY;

ENTITY IfcDateAndTime;
	DateComponent : IfcCalendarDate;
	TimeComponent : IfcLocalTime;
END_ENTITY;

ENTITY IfcDerivedProfileDef
 SUBTYPE OF (IfcProfileDef);
	ParentProfile : IfcProfileDef;
	Operator : IfcCartesianTransformationOperator2D;
	Label : OPTIONAL IfcLabel;
 WHERE
	WR1 : SELF\IfcProfileDef.ProfileType = ParentProfile.ProfileType;
END_ENTITY;

ENTITY IfcDerivedUnit;
	Elements : SET [1:?] OF IfcDerivedUnitElement;
	UnitType : IfcDerivedUnitEnum;
	UserDefinedType : OPTIONAL IfcLabel;
 DERIVE
	Dimensions : IfcDimensionalExponents := IfcDeriveDimensionalExponents(SELF);
 WHERE
	WR1 : (SIZEOF (Elements) > 1) OR ((SIZEOF (Elements) = 1) AND (Elements[1].Exponent <> 1 ));
	WR2 : (UnitType <> IfcDerivedUnitEnum.USERDEFINED) OR
            ((UnitType = IfcDerivedUnitEnum.USERDEFINED) AND 
             (EXISTS(SELF.UserDefinedType)));
END_ENTITY;

ENTITY IfcDerivedUnitElement;
	Unit : IfcNamedUnit;
	Exponent : INTEGER;
END_ENTITY;

ENTITY IfcDimensionalExponents;
	LengthExponent : INTEGER;
	MassExponent : INTEGER;
	TimeExponent : INTEGER;
	ElectricCurrentExponent : INTEGER;
	ThermodynamicTemperatureExponent : INTEGER;
	AmountOfSubstanceExponent : INTEGER;
	LuminousIntensityExponent : INTEGER;
END_ENTITY;

ENTITY IfcDirection
 SUBTYPE OF (IfcGeometricRepresentationItem);
	DirectionRatios : LIST [2:3] OF REAL;
 DERIVE
	Dim : IfcDimensionCount := HIINDEX(DirectionRatios);
END_ENTITY;

ENTITY IfcDistributionElement
 SUBTYPE OF (IfcElement);
END_ENTITY;

ENTITY IfcDistributionElementType
 ABSTRACT SUPERTYPE
 SUBTYPE OF (IfcElementType);
END_ENTITY;

ENTITY IfcDocumentElectronicFormat;
	FileExtension : OPTIONAL IfcLabel;
	MimeContentType : OPTIONAL IfcLabel;
	MimeSubtype : OPTIONAL IfcLabel;
 WHERE
	WR1 : EXISTS(FileExtension) OR EXISTS(MimeContentType);
END_ENTITY;

ENTITY IfcDocumentInformation;
	DocumentId : IfcIdentifier;
	Name : IfcLabel;
	Description : OPTIONAL IfcText;
	DocumentReferences : OPTIONAL SET [1:?] OF IfcDocumentReference;
	Purpose : OPTIONAL IfcText;
	IntendedUse : OPTIONAL IfcText;
	Scope : OPTIONAL IfcText;
	Revision : OPTIONAL IfcLabel;
	DocumentOwner : OPTIONAL IfcActorSelect;
	Editors : OPTIONAL SET [1:?] OF IfcActorSelect;
	CreationTime : OPTIONAL IfcDateAndTime;
	LastRevisionTime : OPTIONAL IfcDateAndTime;
	ElectronicFormat : OPTIONAL IfcDocumentElectronicFormat;
	ValidFrom : OPTIONAL IfcCalendarDate;
	ValidUntil : OPTIONAL IfcCalendarDate;
	Confidentiality : OPTIONAL IfcDocumentConfidentialityEnum;
	Status : OPTIONAL IfcDocumentStatusEnum;
 INVERSE
	IsPointedTo : SET [0:?] OF IfcDocumentInformationRelationship FOR RelatedDocuments;
	IsPointer : SET [0:1] OF IfcDocumentInformationRelationship FOR RelatingDocument;
END_ENTITY;

ENTITY IfcDocumentInformationRelationship;
	RelatingDocument : IfcDocumentInformation;
	RelatedDocuments : SET [1:?] OF IfcDocumentInformation;
	RelationshipType : OPTIONAL IfcLabel;
END_ENTITY;

ENTITY IfcDocumentReference
 SUBTYPE OF (IfcExternalReference);
 INVERSE
	ReferenceToDocument : SET [0:1] OF IfcDocumentInformation FOR DocumentReferences;
 WHERE
	WR1 : EXISTS(Name) XOR EXISTS(ReferenceToDocument[1]);
END_ENTITY;

ENTITY IfcDoor
 SUBTYPE OF (IfcBuildingElement);
	OverallHeight : OPTIONAL IfcPositiveLengthMeasure;
	OverallWidth : OPTIONAL IfcPositiveLengthMeasure;
END_ENTITY;

ENTITY IfcDoorLiningProperties
 SUBTYPE OF (IfcPropertySetDefinition);
	LiningDepth : OPTIONAL IfcPositiveLengthMeasure;
	LiningThickness : OPTIONAL IfcPositiveLengthMeasure;
	ThresholdDepth : OPTIONAL IfcPositiveLengthMeasure;
	ThresholdThickness : OPTIONAL IfcPositiveLengthMeasure;
	TransomThickness : OPTIONAL IfcPositiveLengthMeasure;
	TransomOffset : OPTIONAL IfcLengthMeasure;
	LiningOffset : OPTIONAL IfcLengthMeasure;
	ThresholdOffset : OPTIONAL IfcLengthMeasure;
	CasingThickness : OPTIONAL IfcPositiveLengthMeasure;
	CasingDepth : OPTIONAL IfcPositiveLengthMeasure;
	ShapeAspectStyle : OPTIONAL IfcShapeAspect;
 WHERE
	WR1 : (EXISTS(LiningDepth) AND EXISTS(LiningThickness)) XOR
            (NOT(EXISTS(LiningDepth)) AND NOT(EXISTS(LiningThickness)));
	WR2 : (EXISTS(ThresholdDepth) AND EXISTS(ThresholdThickness)) XOR
            (NOT(EXISTS(ThresholdDepth)) AND NOT(EXISTS(ThresholdThickness)));
	WR3 : (EXISTS(TransomOffset) AND EXISTS(TransomThickness)) XOR
            (NOT(EXISTS(TransomOffset)) AND NOT(EXISTS(TransomThickness)));
	WR4 : (EXISTS(CasingDepth) AND EXISTS(CasingThickness)) XOR
            (NOT(EXISTS(CasingDepth)) AND NOT(EXISTS(CasingThickness)));
	WR5 : EXISTS(SELF\IfcPropertySetDefinition.DefinesType[1]) AND 
            ('IFC2X2_PLATFORM.IFCDOORSTYLE' IN TYPEOF(SELF\IfcPropertySetDefinition.DefinesType[1]));
END_ENTITY;

ENTITY IfcDoorPanelProperties
 SUBTYPE OF (IfcPropertySetDefinition);
	PanelDepth : OPTIONAL IfcPositiveLengthMeasure;
	PanelOperation : IfcDoorPanelOperationEnum;
	PanelWidth : OPTIONAL IfcNormalisedRatioMeasure;
	PanelPosition : IfcDoorPanelPositionEnum;
	ShapeAspectStyle : OPTIONAL IfcShapeAspect;
 WHERE
	WR1 : EXISTS(SELF\IfcPropertySetDefinition.DefinesType[1]) AND 
            ('IFC2X2_PLATFORM.IFCDOORSTYLE' IN TYPEOF(SELF\IfcPropertySetDefinition.DefinesType[1]));
END_ENTITY;

ENTITY IfcDoorStyle
 SUBTYPE OF (IfcTypeProduct);
	OperationType : IfcDoorStyleOperationEnum;
	ConstructionType : IfcDoorStyleConstructionEnum;
	ParameterTakesPrecedence : BOOLEAN;
	Sizeable : BOOLEAN;
END_ENTITY;

ENTITY IfcEdge
 SUPERTYPE OF (ONEOF
	(IfcEdgeCurve
	,IfcOrientedEdge
	,IfcSubedge))
 SUBTYPE OF (IfcTopologicalRepresentationItem);
	EdgeStart : IfcVertex;
	EdgeEnd : IfcVertex;
END_ENTITY;

ENTITY IfcEdgeCurve
 SUBTYPE OF (IfcEdge);
	EdgeGeometry : IfcCurve;
	SameSense : BOOLEAN;
END_ENTITY;

ENTITY IfcEdgeLoop
 SUBTYPE OF (IfcLoop);
	EdgeList : LIST [1:?] OF IfcOrientedEdge;
 DERIVE
	Ne : INTEGER := SIZEOF(EdgeList);
 WHERE
	WR1 : (EdgeList[1].EdgeStart) :=: (EdgeList[Ne].EdgeEnd);
	WR2 : IfcLoopHeadToTail(SELF);
END_ENTITY;

ENTITY IfcElectricalElement
 SUBTYPE OF (IfcElement);
END_ENTITY;

ENTITY IfcElement
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcBuildingElement
	,IfcDistributionElement
	,IfcElectricalElement
	,IfcElementAssembly
	,IfcEquipmentElement
	,IfcFeatureElement
	,IfcFurnishingElement
	,IfcTransportElement))
 SUBTYPE OF (IfcProduct);
	Tag : OPTIONAL IfcIdentifier;
 INVERSE
	FillsVoids : SET [0:1] OF IfcRelFillsElement FOR RelatedBuildingElement;
	ConnectedTo : SET [0:?] OF IfcRelConnectsElements FOR RelatingElement;
	HasCoverings : SET [0:?] OF IfcRelCoversBldgElements FOR RelatingBuildingElement;
	HasProjections : SET [0:?] OF IfcRelProjectsElement FOR RelatingElement;
	HasPorts : SET [0:?] OF IfcRelConnectsPortToElement FOR RelatedElement;
	HasOpenings : SET [0:?] OF IfcRelVoidsElement FOR RelatingBuildingElement;
	IsConnectionRealization : SET [0:?] OF IfcRelConnectsWithRealizingElements FOR RealizingElements;
	ProvidesBoundaries : SET [0:?] OF IfcRelSpaceBoundary FOR RelatedBuildingElement;
	ConnectedFrom : SET [0:?] OF IfcRelConnectsElements FOR RelatedElement;
	ContainedInStructure : SET [0:1] OF IfcRelContainedInSpatialStructure FOR RelatedElements;
END_ENTITY;

ENTITY IfcElementAssembly
 SUBTYPE OF (IfcElement);
	AssemblyPlace : OPTIONAL IfcAssemblyPlaceEnum;
	PredefinedType : IfcElementAssemblyTypeEnum;
 WHERE
	WR1 : (PredefinedType <> IfcElementAssemblyTypeEnum.USERDEFINED) OR ((PredefinedType = IfcElementAssemblyTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcObject.ObjectType));
END_ENTITY;

ENTITY IfcElementQuantity
 SUBTYPE OF (IfcPropertySetDefinition);
	MethodOfMeasurement : IfcLabel;
	Quantities : SET [1:?] OF IfcPhysicalQuantity;
END_ENTITY;

ENTITY IfcElementType
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcBuildingElementType
	,IfcDistributionElementType
	,IfcFurnishingElementType
	,IfcTransportElementType))
 SUBTYPE OF (IfcTypeProduct);
	ElementType : OPTIONAL IfcLabel;
END_ENTITY;

ENTITY IfcElementarySurface
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcPlane))
 SUBTYPE OF (IfcSurface);
	Position : IfcAxis2Placement3D;
 DERIVE
	Dim : IfcDimensionCount := Position.Dim;
END_ENTITY;

ENTITY IfcEllipse
 SUBTYPE OF (IfcConic);
	SemiAxis1 : IfcPositiveLengthMeasure;
	SemiAxis2 : IfcPositiveLengthMeasure;
END_ENTITY;

ENTITY IfcEllipseProfileDef
 SUBTYPE OF (IfcParameterizedProfileDef);
	SemiAxis1 : IfcPositiveLengthMeasure;
	SemiAxis2 : IfcPositiveLengthMeasure;
END_ENTITY;

ENTITY IfcEquipmentElement
 SUBTYPE OF (IfcElement);
END_ENTITY;

ENTITY IfcExternalReference
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcClassificationReference
	,IfcDocumentReference
	,IfcLibraryReference));
	Location : OPTIONAL IfcLabel;
	ItemReference : OPTIONAL IfcIdentifier;
	Name : OPTIONAL IfcLabel;
 WHERE
	WR1 : EXISTS(ItemReference) OR EXISTS(Location) OR EXISTS(Name);
END_ENTITY;

ENTITY IfcExtrudedAreaSolid
 SUBTYPE OF (IfcSweptAreaSolid);
	ExtrudedDirection : IfcDirection;
	Depth : IfcPositiveLengthMeasure;
 WHERE
	WR1 : IfcDotProduct(IfcRepresentationItem() || IfcGeometricRepresentationItem() || IfcDirection([0.0,0.0,1.0]), SELF.ExtrudedDirection) <> 0.0;
END_ENTITY;

ENTITY IfcFace
 SUPERTYPE OF (ONEOF
	(IfcFaceSurface))
 SUBTYPE OF (IfcTopologicalRepresentationItem);
	Bounds : SET [1:?] OF IfcFaceBound;
 WHERE
	WR1 : SIZEOF(QUERY(temp <* Bounds | 'IFC2X2_PLATFORM.IFCFACEOUTERBOUND' IN TYPEOF(temp))) <= 1;
END_ENTITY;

ENTITY IfcFaceBasedSurfaceModel
 SUBTYPE OF (IfcGeometricRepresentationItem);
	FbsmFaces : SET [1:?] OF IfcConnectedFaceSet;
 DERIVE
	Dim : IfcDimensionCount := 3;
END_ENTITY;

ENTITY IfcFaceBound
 SUPERTYPE OF (ONEOF
	(IfcFaceOuterBound))
 SUBTYPE OF (IfcTopologicalRepresentationItem);
	Bound : IfcLoop;
	Orientation : BOOLEAN;
 WHERE
	WR1 : 'IFC2X2_PLATFORM.IFCPOLYLOOP' IN TYPEOF(Bound);
END_ENTITY;

ENTITY IfcFaceOuterBound
 SUBTYPE OF (IfcFaceBound);
END_ENTITY;

ENTITY IfcFaceSurface
 SUBTYPE OF (IfcFace);
	FaceSurface : IfcSurface;
	SameSense : BOOLEAN;
END_ENTITY;

ENTITY IfcFacetedBrep
 SUBTYPE OF (IfcManifoldSolidBrep);
END_ENTITY;

ENTITY IfcFacetedBrepWithVoids
 SUBTYPE OF (IfcManifoldSolidBrep);
	Voids : SET [1:?] OF IfcClosedShell;
END_ENTITY;

ENTITY IfcFeatureElement
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcFeatureElementAddition
	,IfcFeatureElementSubtraction))
 SUBTYPE OF (IfcElement);
END_ENTITY;

ENTITY IfcFeatureElementAddition
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcProjectionElement))
 SUBTYPE OF (IfcFeatureElement);
 INVERSE
	ProjectsElements : IfcRelProjectsElement FOR RelatedFeatureElement;
END_ENTITY;

ENTITY IfcFeatureElementSubtraction
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcOpeningElement))
 SUBTYPE OF (IfcFeatureElement);
 INVERSE
	VoidsElements : IfcRelVoidsElement FOR RelatedOpeningElement;
END_ENTITY;

ENTITY IfcFurnishingElement
 SUBTYPE OF (IfcElement);
END_ENTITY;

ENTITY IfcFurnishingElementType
 ABSTRACT SUPERTYPE
 SUBTYPE OF (IfcElementType);
END_ENTITY;

ENTITY IfcGeometricCurveSet
 SUBTYPE OF (IfcGeometricSet);
 WHERE
	WR1 : SIZEOF(QUERY(Temp <* SELF\IfcGeometricSet.Elements |
            'IFC2X2_PLATFORM.IFCSURFACE' IN TYPEOF(Temp))) = 0;
END_ENTITY;

ENTITY IfcGeometricRepresentationContext
 SUPERTYPE OF (ONEOF
	(IfcGeometricRepresentationSubContext))
 SUBTYPE OF (IfcRepresentationContext);
	CoordinateSpaceDimension : IfcDimensionCount;
	Precision : OPTIONAL REAL;
	WorldCoordinateSystem : IfcAxis2Placement;
	TrueNorth : OPTIONAL IfcDirection;
END_ENTITY;

ENTITY IfcGeometricRepresentationItem
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcBooleanResult
	,IfcBoundingBox
	,IfcCartesianTransformationOperator
	,IfcCompositeCurveSegment
	,IfcCurve
	,IfcDirection
	,IfcFaceBasedSurfaceModel
	,IfcGeometricSet
	,IfcHalfSpaceSolid
	,IfcPlacement
	,IfcPoint
	,IfcSectionedSpine
	,IfcShellBasedSurfaceModel
	,IfcSolidModel
	,IfcSurface
	,IfcVector))
 SUBTYPE OF (IfcRepresentationItem);
END_ENTITY;

ENTITY IfcGeometricRepresentationSubContext
 SUBTYPE OF (IfcGeometricRepresentationContext);
	ParentContext : IfcGeometricRepresentationContext;
	TargetScale : OPTIONAL IfcPositiveRatioMeasure;
	TargetView : IfcGeometricProjectionEnum;
	UserDefinedTargetView : OPTIONAL IfcLabel;
 DERIVE
	SELF\IfcGeometricRepresentationContext.WorldCoordinateSystem : IfcAxis2Placement := ParentContext.WorldCoordinateSystem;
	SELF\IfcGeometricRepresentationContext.CoordinateSpaceDimension : IfcDimensionCount := ParentContext.CoordinateSpaceDimension;
	SELF\IfcGeometricRepresentationContext.TrueNorth : IfcDirection := ParentContext.TrueNorth;
	SELF\IfcGeometricRepresentationContext.Precision : REAL := ParentContext.Precision;
 WHERE
	WR31 : NOT('IFC2X2_PLATFORM.IFCGEOMETRICREPRESENTATIONSUBCONTEXT' IN TYPEOF(ParentContext));
	WR32 : (TargetView <> IfcGeometricProjectionEnum.USERDEFINED) OR 
             ((TargetView =  IfcGeometricProjectionEnum.USERDEFINED) AND 
              EXISTS(UserDefinedTargetView));
END_ENTITY;

ENTITY IfcGeometricSet
 SUPERTYPE OF (ONEOF
	(IfcGeometricCurveSet))
 SUBTYPE OF (IfcGeometricRepresentationItem);
	Elements : SET [1:?] OF IfcGeometricSetSelect;
 DERIVE
	Dim : IfcDimensionCount := Elements[1].Dim;
 WHERE
	WR21 : SIZEOF(QUERY(Temp <* Elements |
               Temp.Dim <> Elements[1].Dim))
             = 0;
END_ENTITY;

ENTITY IfcGrid
 SUBTYPE OF (IfcProduct);
	UAxes : LIST [1:?] OF UNIQUE IfcGridAxis;
	VAxes : LIST [1:?] OF UNIQUE IfcGridAxis;
	WAxes : OPTIONAL LIST [1:?] OF UNIQUE IfcGridAxis;
 INVERSE
	ContainedInStructure : SET [0:1] OF IfcRelContainedInSpatialStructure FOR RelatedElements;
 WHERE
	WR1 : EXISTS(SELF\IfcProduct.ObjectPlacement);
	WR2 : NOT(EXISTS(SELF\IfcProduct.Representation));
END_ENTITY;

ENTITY IfcGridAxis;
	AxisTag : OPTIONAL IfcLabel;
	AxisCurve : IfcCurve;
	SameSense : IfcBoolean;
 WHERE
	WR1 : AxisCurve.Dim = 2;
END_ENTITY;

ENTITY IfcGridPlacement
 SUBTYPE OF (IfcObjectPlacement);
	PlacementLocation : IfcVirtualGridIntersection;
	PlacementRefDirection : OPTIONAL IfcVirtualGridIntersection;
END_ENTITY;

ENTITY IfcGroup
 SUPERTYPE OF (ONEOF
	(IfcSystem
	,IfcZone))
 SUBTYPE OF (IfcObject);
 INVERSE
	IsGroupedBy : IfcRelAssignsToGroup FOR RelatingGroup;
END_ENTITY;

ENTITY IfcHalfSpaceSolid
 SUPERTYPE OF (ONEOF
	(IfcBoxedHalfSpace
	,IfcPolygonalBoundedHalfSpace))
 SUBTYPE OF (IfcGeometricRepresentationItem);
	BaseSurface : IfcSurface;
	AgreementFlag : BOOLEAN;
 DERIVE
	Dim : IfcDimensionCount := 3;
END_ENTITY;

ENTITY IfcIShapeProfileDef
 SUPERTYPE OF (ONEOF
	(IfcAsymmetricIShapeProfileDef))
 SUBTYPE OF (IfcParameterizedProfileDef);
	OverallWidth : IfcPositiveLengthMeasure;
	OverallDepth : IfcPositiveLengthMeasure;
	WebThickness : IfcPositiveLengthMeasure;
	FlangeThickness : IfcPositiveLengthMeasure;
	FilletRadius : OPTIONAL IfcPositiveLengthMeasure;
 WHERE
	WR1 : FlangeThickness < (OverallDepth / 2);
	WR2 : WebThickness < OverallWidth;
END_ENTITY;

ENTITY IfcLShapeProfileDef
 SUBTYPE OF (IfcParameterizedProfileDef);
	Depth : IfcPositiveLengthMeasure;
	Width : OPTIONAL IfcPositiveLengthMeasure;
	Thickness : IfcPositiveLengthMeasure;
	FilletRadius : OPTIONAL IfcPositiveLengthMeasure;
	EdgeRadius : OPTIONAL IfcPositiveLengthMeasure;
	LegSlope : OPTIONAL IfcPlaneAngleMeasure;
	CentreOfGravityInX : IfcPositiveLengthMeasure;
	CentreOfGravityInY : OPTIONAL IfcPositiveLengthMeasure;
 WHERE
	WR1 : Thickness < Depth;
	WR2 : NOT(EXISTS(Width)) OR (Thickness < Width);
	WR3 : NOT(EXISTS(Width) XOR EXISTS(CentreOfGravityInY));
END_ENTITY;

ENTITY IfcLibraryInformation;
	Name : IfcLabel;
	Version : OPTIONAL IfcLabel;
	Publisher : OPTIONAL IfcOrganization;
	VersionDate : OPTIONAL IfcCalendarDate;
	LibraryReference : OPTIONAL SET [1:?] OF IfcLibraryReference;
END_ENTITY;

ENTITY IfcLibraryReference
 SUBTYPE OF (IfcExternalReference);
 INVERSE
	ReferenceIntoLibrary : SET [0:1] OF IfcLibraryInformation FOR LibraryReference;
END_ENTITY;

ENTITY IfcLine
 SUBTYPE OF (IfcCurve);
	Pnt : IfcCartesianPoint;
	Dir : IfcVector;
 WHERE
	WR1 : Dir.Dim = Pnt.Dim;
END_ENTITY;

ENTITY IfcLocalPlacement
 SUBTYPE OF (IfcObjectPlacement);
	PlacementRelTo : OPTIONAL IfcObjectPlacement;
	RelativePlacement : IfcAxis2Placement;
 WHERE
	WR21 : IfcCorrectLocalPlacement(RelativePlacement, PlacementRelTo);
END_ENTITY;

ENTITY IfcLocalTime;
	HourComponent : IfcHourInDay;
	MinuteComponent : OPTIONAL IfcMinuteInHour;
	SecondComponent : OPTIONAL IfcSecondInMinute;
	Zone : OPTIONAL IfcCoordinatedUniversalTimeOffset;
	DaylightSavingOffset : OPTIONAL IfcDaylightSavingHour;
 WHERE
	WR21 : IfcValidTime (SELF);
END_ENTITY;

ENTITY IfcLoop
 SUPERTYPE OF (ONEOF
	(IfcEdgeLoop
	,IfcPolyLoop
	,IfcVertexLoop))
 SUBTYPE OF (IfcTopologicalRepresentationItem);
END_ENTITY;

ENTITY IfcManifoldSolidBrep
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcFacetedBrep
	,IfcFacetedBrepWithVoids))
 SUBTYPE OF (IfcSolidModel);
	Outer : IfcClosedShell;
END_ENTITY;

ENTITY IfcMappedItem
 SUBTYPE OF (IfcRepresentationItem);
	MappingSource : IfcRepresentationMap;
	MappingTarget : IfcCartesianTransformationOperator;
END_ENTITY;

ENTITY IfcMaterial;
	Name : IfcLabel;
 INVERSE
	ClassifiedAs : SET [0:1] OF IfcMaterialClassificationRelationship FOR ClassifiedMaterial;
END_ENTITY;

ENTITY IfcMaterialClassificationRelationship;
	MaterialClassifications : SET [1:?] OF IfcClassificationNotationSelect;
	ClassifiedMaterial : IfcMaterial;
END_ENTITY;

ENTITY IfcMaterialLayer;
	Material : OPTIONAL IfcMaterial;
	LayerThickness : IfcPositiveLengthMeasure;
	IsVentilated : OPTIONAL IfcBoolean;
 INVERSE
	ToMaterialLayerSet : IfcMaterialLayerSet FOR MaterialLayers;
END_ENTITY;

ENTITY IfcMaterialLayerSet;
	MaterialLayers : LIST [1:?] OF IfcMaterialLayer;
	LayerSetName : OPTIONAL IfcLabel;
 DERIVE
	TotalThickness : IfcLengthMeasure := IfcMlsTotalThickness(SELF);
END_ENTITY;

ENTITY IfcMaterialLayerSetUsage;
	ForLayerSet : IfcMaterialLayerSet;
	LayerSetDirection : IfcLayerSetDirectionEnum;
	DirectionSense : IfcDirectionSenseEnum;
	OffsetFromReferenceLine : IfcLengthMeasure;
END_ENTITY;

ENTITY IfcMaterialList;
	Materials : LIST [1:?] OF IfcMaterial;
END_ENTITY;

ENTITY IfcMeasureWithUnit;
	ValueComponent : IfcValue;
	UnitComponent : IfcUnit;
END_ENTITY;

ENTITY IfcMemberType
 SUBTYPE OF (IfcBeamAndColumnType);
	PredefinedType : IfcMemberTypeEnum;
END_ENTITY;

ENTITY IfcMonetaryUnit;
	Currency : IfcCurrencyEnum;
END_ENTITY;

ENTITY IfcNamedUnit
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcContextDependentUnit
	,IfcConversionBasedUnit
	,IfcSIUnit));
	Dimensions : IfcDimensionalExponents;
	UnitType : IfcUnitEnum;
 WHERE
	WR1 : IfcCorrectDimensions (SELF.UnitType, SELF.Dimensions);
END_ENTITY;

ENTITY IfcObject
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcActor
	,IfcControl
	,IfcGroup
	,IfcProcess
	,IfcProduct
	,IfcProject
	,IfcResource))
 SUBTYPE OF (IfcRoot);
	ObjectType : OPTIONAL IfcLabel;
 INVERSE
	IsDefinedBy : SET [0:?] OF IfcRelDefines FOR RelatedObjects;
	HasAssociations : SET [0:?] OF IfcRelAssociates FOR RelatedObjects;
	HasAssignments : SET [0:?] OF IfcRelAssigns FOR RelatedObjects;
	Decomposes : SET [0:1] OF IfcRelDecomposes FOR RelatedObjects;
	IsDecomposedBy : SET [0:?] OF IfcRelDecomposes FOR RelatingObject;
 WHERE
	WR1 : SIZEOF(QUERY(temp <* IsDefinedBy | 'IFC2X2_PLATFORM.IFCRELDEFINESBYTYPE' IN TYPEOF(temp))) <= 1;
END_ENTITY;

ENTITY IfcObjectPlacement
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcGridPlacement
	,IfcLocalPlacement));
 INVERSE
	ReferencedByPlacements : SET [0:?] OF IfcLocalPlacement FOR PlacementRelTo;
END_ENTITY;

ENTITY IfcOffsetCurve2D
 SUBTYPE OF (IfcCurve);
	BasisCurve : IfcCurve;
	Distance : IfcLengthMeasure;
	SelfIntersect : LOGICAL;
 WHERE
	WR1 : BasisCurve.Dim = 2;
END_ENTITY;

ENTITY IfcOffsetCurve3D
 SUBTYPE OF (IfcCurve);
	BasisCurve : IfcCurve;
	Distance : IfcLengthMeasure;
	SelfIntersect : LOGICAL;
	RefDirection : IfcDirection;
 WHERE
	WR1 : BasisCurve.Dim = 3;
END_ENTITY;

ENTITY IfcOpenShell
 SUBTYPE OF (IfcConnectedFaceSet);
END_ENTITY;

ENTITY IfcOpeningElement
 SUBTYPE OF (IfcFeatureElementSubtraction);
 INVERSE
	HasFillings : SET [0:?] OF IfcRelFillsElement FOR RelatingOpeningElement;
END_ENTITY;

ENTITY IfcOrganization;
	Id : OPTIONAL IfcIdentifier;
	Name : IfcLabel;
	Description : OPTIONAL IfcText;
	Roles : OPTIONAL LIST [1:?] OF IfcActorRole;
	Addresses : OPTIONAL LIST [1:?] OF IfcAddress;
 INVERSE
	IsRelatedBy : SET [0:?] OF IfcOrganizationRelationship FOR RelatedOrganizations;
	Relates : SET [0:?] OF IfcOrganizationRelationship FOR RelatingOrganization;
	Engages : SET [0:?] OF IfcPersonAndOrganization FOR TheOrganization;
END_ENTITY;

ENTITY IfcOrganizationRelationship;
	Name : IfcLabel;
	Description : OPTIONAL IfcText;
	RelatingOrganization : IfcOrganization;
	RelatedOrganizations : SET [1:?] OF IfcOrganization;
END_ENTITY;

ENTITY IfcOrientedEdge
 SUBTYPE OF (IfcEdge);
	EdgeElement : IfcEdge;
	Orientation : BOOLEAN;
 DERIVE
	SELF\IfcEdge.EdgeStart : IfcVertex := IfcBooleanChoose 
                               (Orientation, EdgeElement.EdgeStart, EdgeElement.EdgeEnd);
	SELF\IfcEdge.EdgeEnd : IfcVertex := IfcBooleanChoose 
                               (Orientation, EdgeElement.EdgeEnd, EdgeElement.EdgeStart);
 WHERE
	WR1 : NOT('IFC2X2_PLATFORM.IFCORIENTEDEDGE' IN TYPEOF(EdgeElement));
END_ENTITY;

ENTITY IfcOwnerHistory;
	OwningUser : IfcPersonAndOrganization;
	OwningApplication : IfcApplication;
	State : OPTIONAL IfcStateEnum;
	ChangeAction : IfcChangeActionEnum;
	LastModifiedDate : OPTIONAL IfcTimeStamp;
	LastModifyingUser : OPTIONAL IfcPersonAndOrganization;
	LastModifyingApplication : OPTIONAL IfcApplication;
	CreationDate : IfcTimeStamp;
END_ENTITY;

ENTITY IfcParameterizedProfileDef
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcCShapeProfileDef
	,IfcCircleProfileDef
	,IfcCraneRailAShapeProfileDef
	,IfcCraneRailFShapeProfileDef
	,IfcEllipseProfileDef
	,IfcIShapeProfileDef
	,IfcLShapeProfileDef
	,IfcRectangleProfileDef
	,IfcTShapeProfileDef
	,IfcTrapeziumProfileDef
	,IfcUShapeProfileDef
	,IfcZShapeProfileDef))
 SUBTYPE OF (IfcProfileDef);
	Position : IfcAxis2Placement2D;
END_ENTITY;

ENTITY IfcPath
 SUBTYPE OF (IfcTopologicalRepresentationItem);
	EdgeList : LIST [1:?] OF UNIQUE IfcOrientedEdge;
 WHERE
	WR1 : IfcPathHeadToTail(SELF);
END_ENTITY;

ENTITY IfcPerson;
	Id : OPTIONAL IfcIdentifier;
	FamilyName : OPTIONAL IfcLabel;
	GivenName : OPTIONAL IfcLabel;
	MiddleNames : OPTIONAL LIST [1:?] OF IfcLabel;
	PrefixTitles : OPTIONAL LIST [1:?] OF IfcLabel;
	SuffixTitles : OPTIONAL LIST [1:?] OF IfcLabel;
	Roles : OPTIONAL LIST [1:?] OF IfcActorRole;
	Addresses : OPTIONAL LIST [1:?] OF IfcAddress;
 INVERSE
	EngagedIn : SET [0:?] OF IfcPersonAndOrganization FOR ThePerson;
 WHERE
	WR1 : EXISTS(FamilyName) OR 
            EXISTS(GivenName);
END_ENTITY;

ENTITY IfcPersonAndOrganization;
	ThePerson : IfcPerson;
	TheOrganization : IfcOrganization;
	Roles : OPTIONAL LIST [1:?] OF IfcActorRole;
END_ENTITY;

ENTITY IfcPhysicalQuantity
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcQuantityArea
	,IfcQuantityCount
	,IfcQuantityLength
	,IfcQuantityTime
	,IfcQuantityVolume
	,IfcQuantityWeight));
	Name : IfcLabel;
	Description : OPTIONAL IfcText;
	Unit : OPTIONAL IfcNamedUnit;
END_ENTITY;

ENTITY IfcPlacement
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcAxis1Placement
	,IfcAxis2Placement2D
	,IfcAxis2Placement3D))
 SUBTYPE OF (IfcGeometricRepresentationItem);
	Location : IfcCartesianPoint;
 DERIVE
	Dim : IfcDimensionCount := Location.Dim;
END_ENTITY;

ENTITY IfcPlane
 SUBTYPE OF (IfcElementarySurface);
END_ENTITY;

ENTITY IfcPoint
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcCartesianPoint
	,IfcPointOnCurve
	,IfcPointOnSurface))
 SUBTYPE OF (IfcGeometricRepresentationItem);
END_ENTITY;

ENTITY IfcPointOnCurve
 SUBTYPE OF (IfcPoint);
	BasisCurve : IfcCurve;
	PointParameter : IfcParameterValue;
 DERIVE
	Dim : IfcDimensionCount := BasisCurve.Dim;
END_ENTITY;

ENTITY IfcPointOnSurface
 SUBTYPE OF (IfcPoint);
	BasisSurface : IfcSurface;
	PointParameterU : IfcParameterValue;
	PointParameterV : IfcParameterValue;
 DERIVE
	Dim : IfcDimensionCount := BasisSurface.Dim;
END_ENTITY;

ENTITY IfcPolyLoop
 SUBTYPE OF (IfcLoop);
	Polygon : LIST [3:?] OF UNIQUE IfcCartesianPoint;
 WHERE
	WR21 : SIZEOF(QUERY(Temp <* Polygon | Temp.Dim <> Polygon[1].Dim)) = 0;
END_ENTITY;

ENTITY IfcPolygonalBoundedHalfSpace
 SUBTYPE OF (IfcHalfSpaceSolid);
	Position : IfcAxis2Placement3D;
	PolygonalBoundary : IfcPolyline;
 WHERE
	WR41 : PolygonalBoundary.Dim = 2;
END_ENTITY;

ENTITY IfcPolyline
 SUBTYPE OF (IfcBoundedCurve);
	Points : LIST [2:?] OF IfcCartesianPoint;
 WHERE
	WR41 : SIZEOF(QUERY(Temp <* Points | Temp.Dim <> Points[1].Dim)) = 0;
END_ENTITY;

ENTITY IfcPort
 ABSTRACT SUPERTYPE
 SUBTYPE OF (IfcProduct);
 INVERSE
	ContainedIn : IfcRelConnectsPortToElement FOR RelatingPort;
	ConnectedFrom : SET [0:1] OF IfcRelConnectsPorts FOR RelatedPort;
	ConnectedTo : SET [0:1] OF IfcRelConnectsPorts FOR RelatingPort;
END_ENTITY;

ENTITY IfcPostalAddress
 SUBTYPE OF (IfcAddress);
	InternalLocation : OPTIONAL IfcLabel;
	AddressLines : OPTIONAL LIST [1:?] OF IfcLabel;
	PostalBox : OPTIONAL IfcLabel;
	Town : OPTIONAL IfcLabel;
	Region : OPTIONAL IfcLabel;
	PostalCode : OPTIONAL IfcLabel;
	Country : OPTIONAL IfcLabel;
 WHERE
	WR1 : EXISTS (InternalLocation) OR 
            EXISTS (AddressLines) OR
            EXISTS (PostalBox) OR
            EXISTS (PostalCode) OR
            EXISTS (Town) OR 
            EXISTS (Region) OR  
            EXISTS (Country);
END_ENTITY;

ENTITY IfcProcess
 ABSTRACT SUPERTYPE
 SUBTYPE OF (IfcObject);
 INVERSE
	OperatesOn : SET [0:?] OF IfcRelAssignsToProcess FOR RelatingProcess;
	IsSuccessorFrom : SET [0:?] OF IfcRelSequence FOR RelatedProcess;
	IsPredecessorTo : SET [0:?] OF IfcRelSequence FOR RelatingProcess;
END_ENTITY;

ENTITY IfcProduct
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcAnnotation
	,IfcElement
	,IfcGrid
	,IfcPort
	,IfcProxy
	,IfcSpatialStructureElement))
 SUBTYPE OF (IfcObject);
	ObjectPlacement : OPTIONAL IfcObjectPlacement;
	Representation : OPTIONAL IfcProductRepresentation;
 INVERSE
	ReferencedBy : SET [0:?] OF IfcRelAssignsToProduct FOR RelatingProduct;
 WHERE
	WR1 : (EXISTS(Representation) AND EXISTS(ObjectPlacement))
            OR (NOT(EXISTS(Representation)));
END_ENTITY;

ENTITY IfcProductDefinitionShape
 SUBTYPE OF (IfcProductRepresentation);
 INVERSE
	HasShapeAspects : SET [0:?] OF IfcShapeAspect FOR PartOfProductDefinitionShape;
END_ENTITY;

ENTITY IfcProductRepresentation
 SUPERTYPE OF (ONEOF
	(IfcProductDefinitionShape));
	Name : OPTIONAL IfcLabel;
	Description : OPTIONAL IfcText;
	Representations : LIST [1:?] OF IfcRepresentation;
END_ENTITY;

ENTITY IfcProfileDef
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcArbitraryClosedProfileDef
	,IfcArbitraryOpenProfileDef
	,IfcCompositeProfileDef
	,IfcDerivedProfileDef
	,IfcParameterizedProfileDef));
	ProfileType : IfcProfileTypeEnum;
	ProfileName : OPTIONAL IfcLabel;
END_ENTITY;

ENTITY IfcProject
 SUBTYPE OF (IfcObject);
	LongName : OPTIONAL IfcLabel;
	Phase : OPTIONAL IfcLabel;
	RepresentationContexts : SET [1:?] OF IfcRepresentationContext;
	UnitsInContext : IfcUnitAssignment;
 WHERE
	WR1 : EXISTS(SELF\IfcRoot.Name);
END_ENTITY;

ENTITY IfcProjectionElement
 SUBTYPE OF (IfcFeatureElementAddition);
END_ENTITY;

ENTITY IfcProperty
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcComplexProperty
	,IfcSimpleProperty));
	Name : IfcIdentifier;
	Description : OPTIONAL IfcText;
 INVERSE
	PropertyForDependance : SET [0:?] OF IfcPropertyDependencyRelationship FOR DependingProperty;
	PropertyDependsOn : SET [0:?] OF IfcPropertyDependencyRelationship FOR DependantProperty;
	PartOfComplex : SET [0:1] OF IfcComplexProperty FOR HasProperties;
END_ENTITY;

ENTITY IfcPropertyBoundedValue
 SUBTYPE OF (IfcSimpleProperty);
	UpperBoundValue : OPTIONAL IfcValue;
	LowerBoundValue : OPTIONAL IfcValue;
	Unit : OPTIONAL IfcUnit;
 WHERE
	WR21 : NOT(EXISTS(UpperBoundValue)) OR NOT(EXISTS(LowerBoundValue)) OR
             (TYPEOF(UpperBoundValue) = TYPEOF(LowerBoundValue));
	WR22 : EXISTS(UpperBoundValue) OR EXISTS(LowerBoundValue);
END_ENTITY;

ENTITY IfcPropertyDefinition
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcPropertySetDefinition
	,IfcTypeObject))
 SUBTYPE OF (IfcRoot);
 INVERSE
	HasAssociations : SET [0:?] OF IfcRelAssociates FOR RelatedObjects;
END_ENTITY;

ENTITY IfcPropertyDependencyRelationship;
	DependingProperty : IfcProperty;
	DependantProperty : IfcProperty;
	Name : OPTIONAL IfcLabel;
	Description : OPTIONAL IfcText;
	Expression : OPTIONAL IfcText;
 WHERE
	WR1 : DependingProperty :<>: DependantProperty;
END_ENTITY;

ENTITY IfcPropertyEnumeratedValue
 SUBTYPE OF (IfcSimpleProperty);
	EnumerationValues : LIST [1:?] OF IfcValue;
	EnumerationReference : OPTIONAL IfcPropertyEnumeration;
 WHERE
	WR1 : NOT(EXISTS(EnumerationReference)) OR 
               (SIZEOF(QUERY(temp <* EnumerationValues |
                temp IN EnumerationReference.EnumerationValues))
                = SIZEOF(EnumerationValues));
END_ENTITY;

ENTITY IfcPropertyEnumeration;
	Name : IfcLabel;
	EnumerationValues : LIST [1:?] OF UNIQUE IfcValue;
	Unit : OPTIONAL IfcUnit;
 UNIQUE
	UR1 : Name;
END_ENTITY;

ENTITY IfcPropertyListValue
 SUBTYPE OF (IfcSimpleProperty);
	ListValues : LIST [1:?] OF IfcValue;
	Unit : OPTIONAL IfcUnit;
 WHERE
	WR31 : SIZEOF(QUERY(temp <* SELF.ListValues | 
               NOT(TYPEOF(SELF.ListValues[1]) = TYPEOF(temp))
               )) = 0;
END_ENTITY;

ENTITY IfcPropertyReferenceValue
 SUBTYPE OF (IfcSimpleProperty);
	UsageName : OPTIONAL IfcLabel;
	PropertyReference : IfcObjectReferenceSelect;
END_ENTITY;

ENTITY IfcPropertySet
 SUBTYPE OF (IfcPropertySetDefinition);
	HasProperties : SET [1:?] OF IfcProperty;
 WHERE
	WR31 : EXISTS(SELF\IfcRoot.Name);
	WR32 : IfcUniquePropertyName(HasProperties);
END_ENTITY;

ENTITY IfcPropertySetDefinition
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcDoorLiningProperties
	,IfcDoorPanelProperties
	,IfcElementQuantity
	,IfcPropertySet
	,IfcWindowLiningProperties
	,IfcWindowPanelProperties))
 SUBTYPE OF (IfcPropertyDefinition);
 INVERSE
	PropertyDefinitionOf : SET [0:1] OF IfcRelDefinesByProperties FOR RelatingPropertyDefinition;
	DefinesType : SET [0:1] OF IfcTypeObject FOR HasPropertySets;
END_ENTITY;

ENTITY IfcPropertySingleValue
 SUBTYPE OF (IfcSimpleProperty);
	NominalValue : IfcValue;
	Unit : OPTIONAL IfcUnit;
END_ENTITY;

ENTITY IfcPropertyTableValue
 SUBTYPE OF (IfcSimpleProperty);
	DefiningValues : LIST [1:?] OF UNIQUE IfcValue;
	DefinedValues : LIST [1:?] OF IfcValue;
	Expression : OPTIONAL IfcText;
	DefiningUnit : OPTIONAL IfcUnit;
	DefinedUnit : OPTIONAL IfcUnit;
 WHERE
	WR1 : SIZEOF(DefiningValues) = SIZEOF(DefinedValues);
	WR2 : SIZEOF(QUERY(temp <* SELF.DefiningValues | TYPEOF(temp) <> TYPEOF(SELF.DefiningValues[1])))=0;
	WR3 : SIZEOF(QUERY(temp <* SELF.DefinedValues | TYPEOF(temp) <> TYPEOF(SELF.DefinedValues[1])))=0;
END_ENTITY;

ENTITY IfcProxy
 SUBTYPE OF (IfcProduct);
	ProxyType : IfcObjectTypeEnum;
	Tag : OPTIONAL IfcLabel;
 WHERE
	WR1 : EXISTS(SELF\IfcRoot.Name);
END_ENTITY;

ENTITY IfcQuantityArea
 SUBTYPE OF (IfcPhysicalQuantity);
	AreaValue : IfcAreaMeasure;
 WHERE
	WR21 : NOT(EXISTS(SELF\IfcPhysicalQuantity.Unit)) OR
                (SELF\IfcPhysicalQuantity.Unit.UnitType = IfcUnitEnum.AREAUNIT);
	WR22 : AreaValue >= 0;
END_ENTITY;

ENTITY IfcQuantityCount
 SUBTYPE OF (IfcPhysicalQuantity);
	CountValue : IfcCountMeasure;
 WHERE
	WR1 : CountValue >= 0;
END_ENTITY;

ENTITY IfcQuantityLength
 SUBTYPE OF (IfcPhysicalQuantity);
	LengthValue : IfcLengthMeasure;
 WHERE
	WR21 : NOT(EXISTS(SELF\IfcPhysicalQuantity.Unit)) OR
                (SELF\IfcPhysicalQuantity.Unit.UnitType = IfcUnitEnum.LENGTHUNIT);
	WR22 : LengthValue >= 0;
END_ENTITY;

ENTITY IfcQuantityTime
 SUBTYPE OF (IfcPhysicalQuantity);
	TimeValue : IfcTimeMeasure;
 WHERE
	WR21 : NOT(EXISTS(SELF\IfcPhysicalQuantity.Unit)) OR
                (SELF\IfcPhysicalQuantity.Unit.UnitType = IfcUnitEnum.TIMEUNIT);
	WR22 : TimeValue >= 0;
END_ENTITY;

ENTITY IfcQuantityVolume
 SUBTYPE OF (IfcPhysicalQuantity);
	VolumeValue : IfcVolumeMeasure;
 WHERE
	WR21 : NOT(EXISTS(SELF\IfcPhysicalQuantity.Unit)) OR
                (SELF\IfcPhysicalQuantity.Unit.UnitType = IfcUnitEnum.VOLUMEUNIT);
	WR22 : VolumeValue >= 0;
END_ENTITY;

ENTITY IfcQuantityWeight
 SUBTYPE OF (IfcPhysicalQuantity);
	WeightValue : IfcMassMeasure;
 WHERE
	WR21 : NOT(EXISTS(SELF\IfcPhysicalQuantity.Unit)) OR
                (SELF\IfcPhysicalQuantity.Unit.UnitType = IfcUnitEnum.MASSUNIT);
	WR22 : WeightValue >= 0;
END_ENTITY;

ENTITY IfcRailing
 SUBTYPE OF (IfcBuildingElement);
	PredefinedType : OPTIONAL IfcRailingTypeEnum;
END_ENTITY;

ENTITY IfcRailingType
 SUBTYPE OF (IfcBuildingElementType);
	PredefinedType : IfcRailingTypeEnum;
END_ENTITY;

ENTITY IfcRamp
 SUBTYPE OF (IfcBuildingElement);
	ShapeType : IfcRampTypeEnum;
 WHERE
	WR1 : (HIINDEX(SELF\IfcObject.IsDecomposedBy) = 0) OR ((HIINDEX(SELF\IfcObject.IsDecomposedBy) = 1) AND (NOT(EXISTS(SELF\IfcProduct.Representation))));
END_ENTITY;

ENTITY IfcRampFlight
 SUBTYPE OF (IfcBuildingElement);
END_ENTITY;

ENTITY IfcRampFlightType
 SUBTYPE OF (IfcBuildingElementType);
	PredefinedType : IfcRampFlightTypeEnum;
END_ENTITY;

ENTITY IfcRationalBezierCurve
 SUBTYPE OF (IfcBezierCurve);
	WeightsData : LIST [2:?] OF REAL;
 DERIVE
	Weights : ARRAY [0:255] OF REAL := IfcListToArray(WeightsData,0,SELF\IfcBSplineCurve.UpperIndexOnControlPoints);
 WHERE
	WR1 : SIZEOF(WeightsData) = SIZEOF(SELF\IfcBSplineCurve.ControlPointsList);
	WR2 : IfcCurveWeightsPositive(SELF);
END_ENTITY;

ENTITY IfcRectangleHollowProfileDef
 SUBTYPE OF (IfcRectangleProfileDef);
	WallThickness : IfcPositiveLengthMeasure;
	InnerFilletRadius : OPTIONAL IfcPositiveLengthMeasure;
	OuterFilletRadius : OPTIONAL IfcPositiveLengthMeasure;
 WHERE
	WR1 : (WallThickness < (SELF\IfcRectangleProfileDef.XDim / 2)) AND 
            (WallThickness < (SELF\IfcRectangleProfileDef.YDim / 2));
	WR2 : NOT(EXISTS(OuterFilletRadius)) OR 
            ((OuterFilletRadius <= (SELF\IfcRectangleProfileDef.XDim / 2)) AND 
             (OuterFilletRadius <= (SELF\IfcRectangleProfileDef.YDim / 2)));
	WR3 : NOT(EXISTS(InnerFilletRadius)) OR 
            ((InnerFilletRadius <= (SELF\IfcRectangleProfileDef.XDim / 2 - WallThickness)) AND 
             (InnerFilletRadius <= (SELF\IfcRectangleProfileDef.YDim / 2 - WallThickness)));
END_ENTITY;

ENTITY IfcRectangleProfileDef
 SUPERTYPE OF (ONEOF
	(IfcRectangleHollowProfileDef
	,IfcRoundedRectangleProfileDef))
 SUBTYPE OF (IfcParameterizedProfileDef);
	XDim : IfcPositiveLengthMeasure;
	YDim : IfcPositiveLengthMeasure;
END_ENTITY;

ENTITY IfcRectangularTrimmedSurface
 SUBTYPE OF (IfcBoundedSurface);
	BasisSurface : IfcSurface;
	U1 : IfcParameterValue;
	V1 : IfcParameterValue;
	U2 : IfcParameterValue;
	V2 : IfcParameterValue;
	Usense : BOOLEAN;
	Vsense : BOOLEAN;
 DERIVE
	Dim : IfcDimensionCount := BasisSurface.Dim;
 WHERE
	WR1 : U1 <> U2;
	WR2 : V1 <> V2;
	WR3 : (('IFC2X2_PLATFORM.IFCELEMENTARYSURFACE' IN TYPEOF(BasisSurface)) AND
                     (NOT ('IFC2X2_PLATFORM.IFCPLANE' IN TYPEOF(BasisSurface)))) OR
                     ('IFC2X2_PLATFORM.IFCSURFACEOFREVOLUTION' IN TYPEOF(BasisSurface)) OR
                     (Usense = (U2 > U1));
	WR4 : Vsense = (V2 > V1);
END_ENTITY;

ENTITY IfcRelAggregates
 SUBTYPE OF (IfcRelDecomposes);
END_ENTITY;

ENTITY IfcRelAssigns
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcRelAssignsToActor
	,IfcRelAssignsToControl
	,IfcRelAssignsToGroup
	,IfcRelAssignsToProcess
	,IfcRelAssignsToProduct
	,IfcRelAssignsToResource))
 SUBTYPE OF (IfcRelationship);
	RelatedObjects : SET [1:?] OF IfcObject;
	RelatedObjectsType : OPTIONAL IfcObjectTypeEnum;
 WHERE
	WR1 : IfcCorrectObjectAssignment(RelatedObjectsType, RelatedObjects);
END_ENTITY;

ENTITY IfcRelAssignsToActor
 SUBTYPE OF (IfcRelAssigns);
	RelatingActor : IfcActor;
	ActingRole : OPTIONAL IfcActorRole;
 WHERE
	WR1 : SIZEOF(QUERY(Temp <* SELF\IfcRelAssigns.RelatedObjects | RelatingActor :=: Temp)) = 0;
END_ENTITY;

ENTITY IfcRelAssignsToControl
 SUBTYPE OF (IfcRelAssigns);
	RelatingControl : IfcControl;
 WHERE
	WR1 : SIZEOF(QUERY(Temp <* SELF\IfcRelAssigns.RelatedObjects | RelatingControl :=: Temp)) = 0;
END_ENTITY;

ENTITY IfcRelAssignsToGroup
 SUBTYPE OF (IfcRelAssigns);
	RelatingGroup : IfcGroup;
 WHERE
	WR1 : SIZEOF(QUERY(Temp <* SELF\IfcRelAssigns.RelatedObjects | RelatingGroup :=: Temp)) = 0;
END_ENTITY;

ENTITY IfcRelAssignsToProcess
 SUBTYPE OF (IfcRelAssigns);
	RelatingProcess : IfcProcess;
	QuantityInProcess : OPTIONAL IfcMeasureWithUnit;
 WHERE
	WR1 : SIZEOF(QUERY(Temp <* SELF\IfcRelAssigns.RelatedObjects | RelatingProcess :=: Temp)) = 0;
END_ENTITY;

ENTITY IfcRelAssignsToProduct
 SUBTYPE OF (IfcRelAssigns);
	RelatingProduct : IfcProduct;
 WHERE
	WR1 : SIZEOF(QUERY(Temp <* SELF\IfcRelAssigns.RelatedObjects | RelatingProduct :=: Temp)) = 0;
END_ENTITY;

ENTITY IfcRelAssignsToResource
 SUBTYPE OF (IfcRelAssigns);
	RelatingResource : IfcResource;
 WHERE
	WR1 : SIZEOF(QUERY(Temp <* SELF\IfcRelAssigns.RelatedObjects | RelatingResource :=: Temp)) = 0;
END_ENTITY;

ENTITY IfcRelAssociates
 SUPERTYPE OF (ONEOF
	(IfcRelAssociatesClassification
	,IfcRelAssociatesDocument
	,IfcRelAssociatesLibrary
	,IfcRelAssociatesMaterial))
 SUBTYPE OF (IfcRelationship);
	RelatedObjects : SET [1:?] OF IfcRoot;
 WHERE
	WR1 : SIZEOF(QUERY(temp <* RelatedObjects |
             NOT(('IFC2X2_PLATFORM.IFCOBJECT' IN TYPEOF(temp)) 
              OR ('IFC2X2_PLATFORM.IFCPROPERTYDEFINITION' IN TYPEOF(temp)))
             )) = 0;
END_ENTITY;

ENTITY IfcRelAssociatesClassification
 SUBTYPE OF (IfcRelAssociates);
	RelatingClassification : IfcClassificationNotationSelect;
END_ENTITY;

ENTITY IfcRelAssociatesDocument
 SUBTYPE OF (IfcRelAssociates);
	RelatingDocument : IfcDocumentSelect;
END_ENTITY;

ENTITY IfcRelAssociatesLibrary
 SUBTYPE OF (IfcRelAssociates);
	RelatingLibrary : IfcLibrarySelect;
END_ENTITY;

ENTITY IfcRelAssociatesMaterial
 SUBTYPE OF (IfcRelAssociates);
	RelatingMaterial : IfcMaterialSelect;
 WHERE
	WR1 : SIZEOF(QUERY(temp <* SELF\IfcRelAssociates.RelatedObjects | 
            'IFC2X2_PLATFORM.IFCOPENINGELEMENT' IN TYPEOF(temp))) = 0;
	WR2 : SIZEOF(QUERY(temp <* SELF\IfcRelAssociates.RelatedObjects | 
            NOT('IFC2X2_PLATFORM.IFCPRODUCT' IN TYPEOF(temp)))) = 0;
END_ENTITY;

ENTITY IfcRelConnects
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcRelConnectsElements
	,IfcRelConnectsPortToElement
	,IfcRelConnectsPorts
	,IfcRelContainedInSpatialStructure
	,IfcRelCoversBldgElements
	,IfcRelFillsElement
	,IfcRelProjectsElement
	,IfcRelSequence
	,IfcRelServicesBuildings
	,IfcRelSpaceBoundary
	,IfcRelVoidsElement))
 SUBTYPE OF (IfcRelationship);
END_ENTITY;

ENTITY IfcRelConnectsElements
 SUPERTYPE OF (ONEOF
	(IfcRelConnectsPathElements
	,IfcRelConnectsWithRealizingElements))
 SUBTYPE OF (IfcRelConnects);
	ConnectionGeometry : OPTIONAL IfcConnectionGeometry;
	RelatingElement : IfcElement;
	RelatedElement : IfcElement;
 WHERE
	WR31 : RelatingElement :<>: RelatedElement;
END_ENTITY;

ENTITY IfcRelConnectsPathElements
 SUBTYPE OF (IfcRelConnectsElements);
	RelatingPriorities : LIST [0:?] OF INTEGER;
	RelatedPriorities : LIST [0:?] OF INTEGER;
	RelatedConnectionType : IfcConnectionTypeEnum;
	RelatingConnectionType : IfcConnectionTypeEnum;
 DERIVE
	RelatedLayerCount : INTEGER := IfcNoOfLayers(SELF\IfcRelConnectsElements.RelatedElement);
	RelatingLayerCount : INTEGER := IfcNoOfLayers(SELF\IfcRelConnectsElements.RelatingElement);
END_ENTITY;

ENTITY IfcRelConnectsPortToElement
 SUBTYPE OF (IfcRelConnects);
	RelatingPort : IfcPort;
	RelatedElement : IfcElement;
END_ENTITY;

ENTITY IfcRelConnectsPorts
 SUBTYPE OF (IfcRelConnects);
	RelatingPort : IfcPort;
	RelatedPort : IfcPort;
	RealizingElement : OPTIONAL IfcElement;
END_ENTITY;

ENTITY IfcRelConnectsWithRealizingElements
 SUBTYPE OF (IfcRelConnectsElements);
	RealizingElements : SET [1:?] OF IfcElement;
	ConnectionType : OPTIONAL IfcLabel;
END_ENTITY;

ENTITY IfcRelContainedInSpatialStructure
 SUBTYPE OF (IfcRelConnects);
	RelatedElements : SET [1:?] OF IfcProduct;
	RelatingStructure : IfcSpatialStructureElement;
 WHERE
	WR31 : SIZEOF(QUERY(temp <* RelatedElements | 'IFC2X2_PLATFORM.IFCSPATIALSTRUCTUREELEMENT' IN TYPEOF(temp))) = 0;
END_ENTITY;

ENTITY IfcRelCoversBldgElements
 SUBTYPE OF (IfcRelConnects);
	RelatingBuildingElement : IfcElement;
	RelatedCoverings : SET [1:?] OF IfcCovering;
END_ENTITY;

ENTITY IfcRelDecomposes
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcRelAggregates
	,IfcRelNests))
 SUBTYPE OF (IfcRelationship);
	RelatingObject : IfcObject;
	RelatedObjects : SET [1:?] OF IfcObject;
 WHERE
	WR1 : SIZEOF(QUERY(Temp <* RelatedObjects | RelatingObject :=: Temp)) = 0;
END_ENTITY;

ENTITY IfcRelDefines
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcRelDefinesByProperties
	,IfcRelDefinesByType))
 SUBTYPE OF (IfcRelationship);
	RelatedObjects : SET [1:?] OF IfcObject;
END_ENTITY;

ENTITY IfcRelDefinesByProperties
 SUPERTYPE OF (ONEOF
	(IfcRelOverridesProperties))
 SUBTYPE OF (IfcRelDefines);
	RelatingPropertyDefinition : IfcPropertySetDefinition;
END_ENTITY;

ENTITY IfcRelDefinesByType
 SUBTYPE OF (IfcRelDefines);
	RelatingType : IfcTypeObject;
END_ENTITY;

ENTITY IfcRelFillsElement
 SUBTYPE OF (IfcRelConnects);
	RelatingOpeningElement : IfcOpeningElement;
	RelatedBuildingElement : IfcElement;
END_ENTITY;

ENTITY IfcRelNests
 SUBTYPE OF (IfcRelDecomposes);
 WHERE
	WR1 : SIZEOF(QUERY(Temp <* SELF\IfcRelDecomposes.RelatedObjects | 
              NOT(TYPEOF(SELF\IfcRelDecomposes.RelatingObject) = TYPEOF(Temp)))) = 0;
END_ENTITY;

ENTITY IfcRelOverridesProperties
 SUBTYPE OF (IfcRelDefinesByProperties);
	OverridingProperties : SET [1:?] OF IfcProperty;
 WHERE
	WR1 : SIZEOF(SELF\IfcRelDefines.RelatedObjects) = 1;
END_ENTITY;

ENTITY IfcRelProjectsElement
 SUBTYPE OF (IfcRelConnects);
	RelatingElement : IfcElement;
	RelatedFeatureElement : IfcFeatureElementAddition;
END_ENTITY;

ENTITY IfcRelSequence
 SUBTYPE OF (IfcRelConnects);
	RelatingProcess : IfcProcess;
	RelatedProcess : IfcProcess;
	TimeLag : IfcTimeMeasure;
	SequenceType : IfcSequenceEnum;
 WHERE
	WR1 : RelatingProcess :<>: RelatedProcess;
END_ENTITY;

ENTITY IfcRelServicesBuildings
 SUBTYPE OF (IfcRelConnects);
	RelatingSystem : IfcSystem;
	RelatedBuildings : SET [1:?] OF IfcSpatialStructureElement;
END_ENTITY;

ENTITY IfcRelSpaceBoundary
 SUBTYPE OF (IfcRelConnects);
	RelatingSpace : IfcSpace;
	RelatedBuildingElement : OPTIONAL IfcElement;
	ConnectionGeometry : OPTIONAL IfcConnectionGeometry;
	PhysicalOrVirtualBoundary : IfcPhysicalOrVirtualEnum;
	InternalOrExternalBoundary : IfcInternalOrExternalEnum;
 WHERE
	WR1 : ((PhysicalOrVirtualBoundary = IfcPhysicalOrVirtualEnum.Physical) AND (EXISTS(RelatedBuildingElement))) OR 
            ((PhysicalOrVirtualBoundary = IfcPhysicalOrVirtualEnum.Virtual) AND (NOT(EXISTS(RelatedBuildingElement)))) OR 
             (PhysicalOrVirtualBoundary = IfcPhysicalOrVirtualEnum.NotDefined);
END_ENTITY;

ENTITY IfcRelVoidsElement
 SUBTYPE OF (IfcRelConnects);
	RelatingBuildingElement : IfcElement;
	RelatedOpeningElement : IfcFeatureElementSubtraction;
END_ENTITY;

ENTITY IfcRelationship
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcRelAssigns
	,IfcRelAssociates
	,IfcRelConnects
	,IfcRelDecomposes
	,IfcRelDefines))
 SUBTYPE OF (IfcRoot);
END_ENTITY;

ENTITY IfcRepresentation
 SUPERTYPE OF (ONEOF
	(IfcShapeRepresentation
	,IfcStyledRepresentation
	,IfcTopologyRepresentation));
	ContextOfItems : IfcRepresentationContext;
	RepresentationIdentifier : OPTIONAL IfcLabel;
	RepresentationType : OPTIONAL IfcLabel;
	Items : SET [1:?] OF IfcRepresentationItem;
 INVERSE
	OfProductRepresentation : SET [0:1] OF IfcProductRepresentation FOR Representations;
END_ENTITY;

ENTITY IfcRepresentationContext
 SUPERTYPE OF (ONEOF
	(IfcGeometricRepresentationContext));
	ContextIdentifier : OPTIONAL IfcLabel;
	ContextType : OPTIONAL IfcLabel;
 INVERSE
	RepresentationsInContext : SET [0:?] OF IfcRepresentation FOR ContextOfItems;
END_ENTITY;

ENTITY IfcRepresentationItem
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcGeometricRepresentationItem
	,IfcMappedItem
	,IfcTopologicalRepresentationItem));
END_ENTITY;

ENTITY IfcRepresentationMap;
	MappingOrigin : IfcAxis2Placement;
	MappedRepresentation : IfcRepresentation;
 INVERSE
	MapUsage : SET [0:?] OF IfcMappedItem FOR MappingSource;
END_ENTITY;

ENTITY IfcResource
 ABSTRACT SUPERTYPE
 SUBTYPE OF (IfcObject);
 INVERSE
	ResourceOf : SET [0:?] OF IfcRelAssignsToResource FOR RelatingResource;
END_ENTITY;

ENTITY IfcRevolvedAreaSolid
 SUBTYPE OF (IfcSweptAreaSolid);
	Axis : IfcAxis1Placement;
	Angle : IfcPlaneAngleMeasure;
 DERIVE
	AxisLine : IfcLine := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcCurve() || IfcLine(Axis.Location, 
                   IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcVector(Axis.Z,1.0));
 WHERE
	WR1 : Axis.Location.Coordinates[3] = 0.0;
	WR2 : Axis.Z.DirectionRatios[3] = 0.0;
END_ENTITY;

ENTITY IfcRoof
 SUBTYPE OF (IfcBuildingElement);
	ShapeType : IfcRoofTypeEnum;
 WHERE
	WR1 : (HIINDEX(SELF\IfcObject.IsDecomposedBy) = 0) OR 
            ((HIINDEX(SELF\IfcObject.IsDecomposedBy) = 1) AND (NOT(EXISTS(SELF\IfcProduct.Representation))));
END_ENTITY;

ENTITY IfcRoot
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcObject
	,IfcPropertyDefinition
	,IfcRelationship));
	GlobalId : IfcGloballyUniqueId;
	OwnerHistory : IfcOwnerHistory;
	Name : OPTIONAL IfcLabel;
	Description : OPTIONAL IfcText;
 UNIQUE
	UR1 : GlobalId;
END_ENTITY;

ENTITY IfcRoundedRectangleProfileDef
 SUBTYPE OF (IfcRectangleProfileDef);
	RoundingRadius : IfcPositiveLengthMeasure;
 WHERE
	WR21 : ((RoundingRadius <= (SELF\IfcRectangleProfileDef.XDim/2)) AND 
              (RoundingRadius <= (SELF\IfcRectangleProfileDef.YDim/2)));
END_ENTITY;

ENTITY IfcSIUnit
 SUBTYPE OF (IfcNamedUnit);
	Prefix : OPTIONAL IfcSIPrefix;
	Name : IfcSIUnitName;
 DERIVE
	SELF\IfcNamedUnit.Dimensions : IfcDimensionalExponents := IfcDimensionsForSiUnit (SELF.Name);
END_ENTITY;

ENTITY IfcSectionedSpine
 SUBTYPE OF (IfcGeometricRepresentationItem);
	SpineCurve : IfcCompositeCurve;
	CrossSections : LIST [2:?] OF IfcProfileDef;
	CrossSectionPositions : LIST [2:?] OF IfcAxis2Placement3D;
 DERIVE
	Dim : IfcDimensionCount := 3;
 WHERE
	WR1 : SIZEOF(CrossSections) = SIZEOF(CrossSectionPositions);
	WR2 : SIZEOF(QUERY(temp <* CrossSections | CrossSections[1].ProfileType <> temp.ProfileType)) = 0;
	WR3 : SpineCurve.Dim = 3;
END_ENTITY;

ENTITY IfcShapeAspect;
	ShapeRepresentations : LIST [1:?] OF IfcShapeRepresentation;
	Name : OPTIONAL IfcLabel;
	Description : OPTIONAL IfcText;
	ProductDefinitional : LOGICAL;
	PartOfProductDefinitionShape : IfcProductDefinitionShape;
END_ENTITY;

ENTITY IfcShapeRepresentation
 SUBTYPE OF (IfcRepresentation);
 INVERSE
	OfShapeAspect : SET [0:1] OF IfcShapeAspect FOR ShapeRepresentations;
 WHERE
	WR21 : 'IFC2X2_PLATFORM.IFCGEOMETRICREPRESENTATIONCONTEXT' 
             IN TYPEOF(SELF\IfcRepresentation.ContextOfItems);
	WR22 : SIZEOF(QUERY(temp <* Items | 
               ('IFC2X2_PLATFORM.IFCTOPOLOGICALREPRESENTATIONITEM' IN TYPEOF(temp))
                 AND (NOT(SIZEOF(
                   ['IFC2X2_PLATFORM.IFCVERTEXPOINT',
                    'IFC2X2_PLATFORM.IFCEDGECURVE',
                    'IFC2X2_PLATFORM.IFCFACESURFACE'] * TYPEOF(temp)) = 1))
             )) = 0;
	WR23 : EXISTS(SELF\IfcRepresentation.RepresentationType);
	WR24 : IfcShapeRepresentationTypes(SELF\IfcRepresentation.RepresentationType, SELF\IfcRepresentation.Items);
END_ENTITY;

ENTITY IfcShellBasedSurfaceModel
 SUBTYPE OF (IfcGeometricRepresentationItem);
	SbsmBoundary : SET [1:?] OF IfcShell;
 DERIVE
	Dim : IfcDimensionCount := 3;
END_ENTITY;

ENTITY IfcSimpleProperty
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcPropertyBoundedValue
	,IfcPropertyEnumeratedValue
	,IfcPropertyListValue
	,IfcPropertyReferenceValue
	,IfcPropertySingleValue
	,IfcPropertyTableValue))
 SUBTYPE OF (IfcProperty);
END_ENTITY;

ENTITY IfcSite
 SUBTYPE OF (IfcSpatialStructureElement);
	RefLatitude : OPTIONAL IfcCompoundPlaneAngleMeasure;
	RefLongitude : OPTIONAL IfcCompoundPlaneAngleMeasure;
	RefElevation : OPTIONAL IfcLengthMeasure;
	LandTitleNumber : OPTIONAL IfcLabel;
	SiteAddress : OPTIONAL IfcPostalAddress;
END_ENTITY;

ENTITY IfcSlab
 SUBTYPE OF (IfcBuildingElement);
	PredefinedType : OPTIONAL IfcSlabTypeEnum;
 WHERE
	WR2 : (PredefinedType <> IfcSlabTypeEnum.USERDEFINED) OR
            ((PredefinedType = IfcSlabTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcObject.ObjectType));
END_ENTITY;

ENTITY IfcSlabType
 SUBTYPE OF (IfcBuildingElementType);
	PredefinedType : IfcSlabTypeEnum;
END_ENTITY;

ENTITY IfcSolidModel
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcCsgSolid
	,IfcManifoldSolidBrep
	,IfcSweptAreaSolid
	,IfcSweptDiskSolid))
 SUBTYPE OF (IfcGeometricRepresentationItem);
 DERIVE
	Dim : IfcDimensionCount := 3;
END_ENTITY;

ENTITY IfcSpace
 SUBTYPE OF (IfcSpatialStructureElement);
	InteriorOrExteriorSpace : IfcInternalOrExternalEnum;
	ElevationWithFlooring : OPTIONAL IfcLengthMeasure;
 INVERSE
	BoundedBy : SET [0:?] OF IfcRelSpaceBoundary FOR RelatingSpace;
END_ENTITY;

ENTITY IfcSpatialStructureElement
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcBuilding
	,IfcBuildingStorey
	,IfcSite
	,IfcSpace))
 SUBTYPE OF (IfcProduct);
	LongName : OPTIONAL IfcLabel;
	CompositionType : IfcElementCompositionEnum;
 INVERSE
	ServicedBySystems : SET [0:?] OF IfcRelServicesBuildings FOR RelatedBuildings;
	ContainsElements : SET [0:?] OF IfcRelContainedInSpatialStructure FOR RelatingStructure;
 WHERE
	WR41 : (HIINDEX(SELF\IfcObject.Decomposes) = 1) 
             AND
             ('IFC2X2_PLATFORM.IFCRELAGGREGATES' IN TYPEOF(SELF\IfcObject.Decomposes[1])) 
             AND
             (('IFC2X2_PLATFORM.IFCPROJECT' IN TYPEOF (SELF\IfcObject.Decomposes[1].RelatingObject)) OR
              ('IFC2X2_PLATFORM.IFCSPATIALSTRUCTUREELEMENT' IN TYPEOF (SELF\IfcObject.Decomposes[1].RelatingObject))
             );
END_ENTITY;

ENTITY IfcStair
 SUBTYPE OF (IfcBuildingElement);
	ShapeType : IfcStairTypeEnum;
 WHERE
	WR1 : (HIINDEX(SELF\IfcObject.IsDecomposedBy) = 0) OR ((HIINDEX(SELF\IfcObject.IsDecomposedBy) = 1) AND (NOT(EXISTS(SELF\IfcProduct.Representation))));
END_ENTITY;

ENTITY IfcStairFlight
 SUBTYPE OF (IfcBuildingElement);
	NumberOfRiser : OPTIONAL INTEGER;
	NumberOfTreads : OPTIONAL INTEGER;
	RiserHeight : OPTIONAL IfcPositiveLengthMeasure;
	TreadLength : OPTIONAL IfcPositiveLengthMeasure;
END_ENTITY;

ENTITY IfcStairFlightType
 SUBTYPE OF (IfcBuildingElementType);
	PredefinedType : IfcStairFlightTypeEnum;
END_ENTITY;

ENTITY IfcStyledRepresentation
 SUBTYPE OF (IfcRepresentation);
END_ENTITY;

ENTITY IfcSubedge
 SUBTYPE OF (IfcEdge);
	ParentEdge : IfcEdge;
END_ENTITY;

ENTITY IfcSurface
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcBoundedSurface
	,IfcElementarySurface
	,IfcSweptSurface))
 SUBTYPE OF (IfcGeometricRepresentationItem);
END_ENTITY;

ENTITY IfcSurfaceCurveSweptAreaSolid
 SUBTYPE OF (IfcSweptAreaSolid);
	Directrix : IfcCurve;
	StartParam : IfcParameterValue;
	EndParam : IfcParameterValue;
	ReferenceSurface : IfcSurface;
END_ENTITY;

ENTITY IfcSurfaceOfLinearExtrusion
 SUBTYPE OF (IfcSweptSurface);
	ExtrudedDirection : IfcDirection;
	Depth : IfcLengthMeasure;
 DERIVE
	ExtrusionAxis : IfcVector := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcVector (ExtrudedDirection, Depth);
 WHERE
	WR41 : Depth > 0;
END_ENTITY;

ENTITY IfcSurfaceOfRevolution
 SUBTYPE OF (IfcSweptSurface);
	AxisPosition : IfcAxis1Placement;
 DERIVE
	AxisLine : IfcLine := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcCurve() || IfcLine(AxisPosition.Location, 
                       IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcVector(AxisPosition.Z,1.0));
END_ENTITY;

ENTITY IfcSweptAreaSolid
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcExtrudedAreaSolid
	,IfcRevolvedAreaSolid
	,IfcSurfaceCurveSweptAreaSolid))
 SUBTYPE OF (IfcSolidModel);
	SweptArea : IfcProfileDef;
	Position : IfcAxis2Placement3D;
 WHERE
	WR1 : NOT('IFC2X2_PLATFORM.IFCDERIVEDPROFILEDEF' IN TYPEOF(SweptArea));
	WR2 : SweptArea.ProfileType = IfcProfileTypeEnum.Area;
END_ENTITY;

ENTITY IfcSweptDiskSolid
 SUBTYPE OF (IfcSolidModel);
	Directrix : IfcCurve;
	Radius : IfcPositiveLengthMeasure;
	InnerRadius : OPTIONAL IfcPositiveLengthMeasure;
	StartParam : IfcParameterValue;
	EndParam : IfcParameterValue;
 WHERE
	WR1 : Directrix.Dim = 3;
	WR2 : (NOT EXISTS(InnerRadius)) OR (Radius > InnerRadius);
END_ENTITY;

ENTITY IfcSweptSurface
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcSurfaceOfLinearExtrusion
	,IfcSurfaceOfRevolution))
 SUBTYPE OF (IfcSurface);
	SweptCurve : IfcProfileDef;
	Position : IfcAxis2Placement3D;
 DERIVE
	Dim : IfcDimensionCount := Position.Dim;
 WHERE
	WR1 : NOT('IFC2X2_PLATFORM.IFCDERIVEDPROFILEDEF' IN TYPEOF(SweptCurve));
	WR2 : SweptCurve.ProfileType = IfcProfileTypeEnum.Curve;
END_ENTITY;

ENTITY IfcSystem
 SUBTYPE OF (IfcGroup);
 INVERSE
	ServicesBuildings : SET [0:1] OF IfcRelServicesBuildings FOR RelatingSystem;
 WHERE
	WR1 : SIZEOF (QUERY (temp <* SELF\IfcGroup.IsGroupedBy.RelatedObjects |  NOT('IFC2X2_PLATFORM.IFCELEMENT' IN TYPEOF(temp)))) = 0;
END_ENTITY;

ENTITY IfcTShapeProfileDef
 SUBTYPE OF (IfcParameterizedProfileDef);
	Depth : IfcPositiveLengthMeasure;
	FlangeWidth : IfcPositiveLengthMeasure;
	WebThickness : IfcPositiveLengthMeasure;
	FlangeThickness : IfcPositiveLengthMeasure;
	FilletRadius : OPTIONAL IfcPositiveLengthMeasure;
	FlangeEdgeRadius : OPTIONAL IfcPositiveLengthMeasure;
	WebEdgeRadius : OPTIONAL IfcPositiveLengthMeasure;
	WebSlope : OPTIONAL IfcPlaneAngleMeasure;
	FlangeSlope : OPTIONAL IfcPlaneAngleMeasure;
	CentreOfGravityInY : IfcPositiveLengthMeasure;
 WHERE
	WR1 : FlangeThickness < Depth;
	WR2 : WebThickness < FlangeWidth;
END_ENTITY;

ENTITY IfcTable;
	Name : STRING;
	Rows : LIST [1:?] OF IfcTableRow;
 DERIVE
	NumberOfCellsInRow : INTEGER := HIINDEX(Rows[1].RowCells);
	NumberOfHeadings : INTEGER := SIZEOF(QUERY( Temp <* Rows | Temp.IsHeading));
	NumberOfDataRows : INTEGER := SIZEOF(QUERY( Temp <* Rows | NOT(Temp.IsHeading)));
 WHERE
	WR1 : SIZEOF(QUERY( Temp <* Rows | HIINDEX(Temp.RowCells) <> HIINDEX(Rows[1].RowCells))) = 0;
	WR2 : SIZEOF(QUERY( Temp <* Rows | HIINDEX(Temp.RowCells) <> HIINDEX(Rows[1].RowCells))) = 0;
	WR3 : { 0 <= NumberOfHeadings <= 1 };
END_ENTITY;

ENTITY IfcTableRow;
	RowCells : LIST [1:?] OF IfcValue;
	IsHeading : BOOLEAN;
 INVERSE
	OfTable : IfcTable FOR Rows;
END_ENTITY;

ENTITY IfcTelecomAddress
 SUBTYPE OF (IfcAddress);
	TelephoneNumbers : OPTIONAL LIST [1:?] OF IfcLabel;
	FacsimileNumbers : OPTIONAL LIST [1:?] OF IfcLabel;
	PagerNumber : OPTIONAL IfcLabel;
	ElectronicMailAddresses : OPTIONAL LIST [1:?] OF IfcLabel;
	WWWHomePageURL : OPTIONAL IfcLabel;
 WHERE
	WR1 : EXISTS (TelephoneNumbers) OR
            EXISTS (PagerNumber) OR
            EXISTS (FacsimileNumbers) OR 
            EXISTS (ElectronicMailAddresses) OR 
            EXISTS (WWWHomePageURL);
END_ENTITY;

ENTITY IfcTopologicalRepresentationItem
 ABSTRACT SUPERTYPE OF (ONEOF
	(IfcConnectedFaceSet
	,IfcEdge
	,IfcFace
	,IfcFaceBound
	,IfcLoop
	,IfcPath
	,IfcVertex))
 SUBTYPE OF (IfcRepresentationItem);
END_ENTITY;

ENTITY IfcTopologyRepresentation
 SUBTYPE OF (IfcRepresentation);
 WHERE
	WR21 : SIZEOF(QUERY(temp <* SELF\IfcRepresentation.Items | 
               NOT('IFC2X2_PLATFORM.IFCTOPOLOGICALREPRESENTATIONITEM' IN TYPEOF(temp))
             )) = 0;
	WR22 : EXISTS(SELF\IfcRepresentation.RepresentationType);
	WR23 : IfcTopologyRepresentationTypes(SELF\IfcRepresentation.RepresentationType, SELF\IfcRepresentation.Items);
END_ENTITY;

ENTITY IfcTransportElement
 SUBTYPE OF (IfcElement);
	OperationType : OPTIONAL IfcTransportElementTypeEnum;
	CapacityByWeight : OPTIONAL IfcMassMeasure;
	CapacityByNumber : OPTIONAL IfcCountMeasure;
END_ENTITY;

ENTITY IfcTransportElementType
 SUBTYPE OF (IfcElementType);
	PredefinedType : IfcTransportElementTypeEnum;
END_ENTITY;

ENTITY IfcTrapeziumProfileDef
 SUBTYPE OF (IfcParameterizedProfileDef);
	BottomXDim : IfcPositiveLengthMeasure;
	TopXDim : IfcPositiveLengthMeasure;
	YDim : IfcPositiveLengthMeasure;
	TopXOffset : IfcLengthMeasure;
END_ENTITY;

ENTITY IfcTrimmedCurve
 SUBTYPE OF (IfcBoundedCurve);
	BasisCurve : IfcCurve;
	Trim1 : SET [1:2] OF IfcTrimmingSelect;
	Trim2 : SET [1:2] OF IfcTrimmingSelect;
	SenseAgreement : BOOLEAN;
	MasterRepresentation : IfcTrimmingPreference;
 WHERE
	WR41 : (HIINDEX(Trim1) = 1) OR (TYPEOF(Trim1[1]) <> TYPEOF(Trim1[2]));
	WR42 : (HIINDEX(Trim2) = 1) OR (TYPEOF(Trim2[1]) <> TYPEOF(Trim2[2]));
	WR43 : NOT('IFC2X2_PLATFORM.IFCBOUNDEDCURVE' IN TYPEOF(BasisCurve));
END_ENTITY;

ENTITY IfcTypeObject
 SUPERTYPE OF (ONEOF
	(IfcTypeProduct))
 SUBTYPE OF (IfcPropertyDefinition);
	ApplicableOccurrence : OPTIONAL IfcLabel;
	HasPropertySets : OPTIONAL LIST [1:?] OF UNIQUE IfcPropertySetDefinition;
 INVERSE
	ObjectTypeOf : SET [0:1] OF IfcRelDefinesByType FOR RelatingType;
 WHERE
	WR1 : EXISTS(SELF\IfcRoot.Name);
END_ENTITY;

ENTITY IfcTypeProduct
 SUPERTYPE OF (ONEOF
	(IfcDoorStyle
	,IfcElementType
	,IfcWindowStyle))
 SUBTYPE OF (IfcTypeObject);
	RepresentationMaps : OPTIONAL LIST [1:?] OF UNIQUE IfcRepresentationMap;
	Tag : OPTIONAL IfcLabel;
 WHERE
	WR41 : NOT(EXISTS(SELF\IfcTypeObject.ObjectTypeOf[1])) OR
             (SIZEOF(QUERY(temp <* SELF\IfcTypeObject.ObjectTypeOf[1].RelatedObjects |
               NOT('IFC2X2_PLATFORM.IFCPRODUCT' IN TYPEOF(temp)))
             ) = 0);
END_ENTITY;

ENTITY IfcUShapeProfileDef
 SUBTYPE OF (IfcParameterizedProfileDef);
	Depth : IfcPositiveLengthMeasure;
	FlangeWidth : IfcPositiveLengthMeasure;
	WebThickness : IfcPositiveLengthMeasure;
	FlangeThickness : IfcPositiveLengthMeasure;
	FilletRadius : OPTIONAL IfcPositiveLengthMeasure;
	EdgeRadius : OPTIONAL IfcPositiveLengthMeasure;
	FlangeSlope : OPTIONAL IfcPlaneAngleMeasure;
	CentreOfGravityInX : IfcPositiveLengthMeasure;
 WHERE
	WR1 : FlangeThickness < (Depth / 2);
	WR2 : WebThickness < FlangeWidth;
END_ENTITY;

ENTITY IfcUnitAssignment;
	Units : SET [1:?] OF IfcUnit;
END_ENTITY;

ENTITY IfcVector
 SUBTYPE OF (IfcGeometricRepresentationItem);
	Orientation : IfcDirection;
	Magnitude : IfcLengthMeasure;
 DERIVE
	Dim : IfcDimensionCount := Orientation.Dim;
 WHERE
	WR1 : Magnitude >= 0.0;
END_ENTITY;

ENTITY IfcVertex
 SUPERTYPE OF (ONEOF
	(IfcVertexPoint))
 SUBTYPE OF (IfcTopologicalRepresentationItem);
END_ENTITY;

ENTITY IfcVertexLoop
 SUBTYPE OF (IfcLoop);
	LoopVertex : IfcVertex;
END_ENTITY;

ENTITY IfcVertexPoint
 SUBTYPE OF (IfcVertex);
	VertexGeometry : IfcPoint;
END_ENTITY;

ENTITY IfcVirtualGridIntersection;
	IntersectingAxes : LIST [2:2] OF UNIQUE IfcGridAxis;
	OffsetDistances : LIST [2:3] OF IfcLengthMeasure;
END_ENTITY;

ENTITY IfcWall
 SUPERTYPE OF (ONEOF
	(IfcWallStandardCase))
 SUBTYPE OF (IfcBuildingElement);
 WHERE
	WR1 : SIZEOF (QUERY(temp <* SELF\IfcObject.HasAssociations |
              'IFC2X2_PLATFORM.IFCRELASSOCIATESMATERIAL' IN TYPEOF(temp)
              )) <= 1;
END_ENTITY;

ENTITY IfcWallStandardCase
 SUBTYPE OF (IfcWall);
 WHERE
	WR1 : SIZEOF (QUERY(temp <* USEDIN(SELF, 'IFC2X2_PLATFORM.IFCRELASSOCIATES.RELATEDOBJECTS') |
                          ('IFC2X2_PLATFORM.IFCRELASSOCIATESMATERIAL' IN TYPEOF(temp)) AND
                          ('IFC2X2_PLATFORM.IFCMATERIALLAYERSETUSAGE' IN TYPEOF(temp.RelatingMaterial))
                          )) = 1;
END_ENTITY;

ENTITY IfcWallType
 SUBTYPE OF (IfcBuildingElementType);
	PredefinedType : IfcWallTypeEnum;
END_ENTITY;

ENTITY IfcWindow
 SUBTYPE OF (IfcBuildingElement);
	OverallHeight : OPTIONAL IfcPositiveLengthMeasure;
	OverallWidth : OPTIONAL IfcPositiveLengthMeasure;
END_ENTITY;

ENTITY IfcWindowLiningProperties
 SUBTYPE OF (IfcPropertySetDefinition);
	LiningDepth : OPTIONAL IfcPositiveLengthMeasure;
	LiningThickness : OPTIONAL IfcPositiveLengthMeasure;
	TransomThickness : OPTIONAL IfcPositiveLengthMeasure;
	MullionThickness : OPTIONAL IfcPositiveLengthMeasure;
	FirstTransomOffset : OPTIONAL IfcNormalisedRatioMeasure;
	SecondTransomOffset : OPTIONAL IfcNormalisedRatioMeasure;
	FirstMullionOffset : OPTIONAL IfcNormalisedRatioMeasure;
	SecondMullionOffset : OPTIONAL IfcNormalisedRatioMeasure;
	ShapeAspectStyle : OPTIONAL IfcShapeAspect;
 WHERE
	WR1 : (EXISTS(LiningDepth) AND EXISTS(LiningThickness)) XOR
            (NOT(EXISTS(LiningDepth)) AND NOT(EXISTS(LiningThickness)));
END_ENTITY;

ENTITY IfcWindowPanelProperties
 SUBTYPE OF (IfcPropertySetDefinition);
	OperationType : IfcWindowPanelOperationEnum;
	PanelPosition : IfcWindowPanelPositionEnum;
	FrameDepth : OPTIONAL IfcPositiveLengthMeasure;
	FrameThickness : OPTIONAL IfcPositiveLengthMeasure;
	ShapeAspectStyle : OPTIONAL IfcShapeAspect;
END_ENTITY;

ENTITY IfcWindowStyle
 SUBTYPE OF (IfcTypeProduct);
	ConstructionType : IfcWindowStyleConstructionEnum;
	OperationType : IfcWindowStyleOperationEnum;
	ParameterTakesPrecedence : BOOLEAN;
	Sizeable : BOOLEAN;
END_ENTITY;

ENTITY IfcZShapeProfileDef
 SUBTYPE OF (IfcParameterizedProfileDef);
	Depth : IfcPositiveLengthMeasure;
	FlangeWidth : IfcPositiveLengthMeasure;
	WebThickness : IfcPositiveLengthMeasure;
	FlangeThickness : IfcPositiveLengthMeasure;
	FilletRadius : OPTIONAL IfcPositiveLengthMeasure;
	EdgeRadius : OPTIONAL IfcPositiveLengthMeasure;
 WHERE
	WR1 : FlangeThickness < (Depth / 2);
END_ENTITY;

ENTITY IfcZone
 SUBTYPE OF (IfcGroup);
 WHERE
	WR1 : SIZEOF (QUERY (temp <* SELF\IfcGroup.IsGroupedBy.RelatedObjects |  NOT(('IFC2X2_PLATFORM.IFCZONE' IN TYPEOF(temp)) OR ('IFC2X2_PLATFORM.IFCSPACE' IN TYPEOF(temp))) )) = 0;
END_ENTITY;

FUNCTION IfcBaseAxis
	(Dim : INTEGER; 
     Axis1, Axis2, Axis3 : IfcDirection)
	: LIST [2:3] OF IfcDirection;
  
  LOCAL
    U : LIST [2:3] OF IfcDirection;
    Factor : REAL;
    D1, D2 : IfcDirection;
  END_LOCAL;
  
    IF (Dim = 3) THEN 
      D1 := NVL(IfcNormalise(Axis3), IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([0.0,0.0,1.0]));
      D2 := IfcFirstProjAxis(D1, Axis1);
      U  := [D2, IfcSecondProjAxis(D1, D2, Axis2), D1];
    ELSE
      IF EXISTS(Axis1) THEN
        D1 := IfcNormalise(Axis1);
        U  := [D1, IfcOrthogonalComplement(D1)];
        IF EXISTS(Axis2) THEN
          Factor := IfcDotProduct(Axis2, U[2]);
          IF (Factor < 0.0) THEN
            U[2].DirectionRatios[1] := -U[2].DirectionRatios[1];
            U[2].DirectionRatios[2] := -U[2].DirectionRatios[2];
          END_IF;
        END_IF;
      ELSE
        IF EXISTS(Axis2) THEN
          D1 := IfcNormalise(Axis2);
          U  := [IfcOrthogonalComplement(D1), D1];
          U[1].DirectionRatios[1] := -U[1].DirectionRatios[1];
          U[1].DirectionRatios[2] := -U[1].DirectionRatios[2];
          ELSE
            U := [IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([1.0, 0.0]), 
                  IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([0.0, 1.0])];
        END_IF;
      END_IF;
    END_IF;
    RETURN(U);
END_FUNCTION;

FUNCTION IfcBooleanChoose
	(B : BOOLEAN ;
       Choice1, Choice2 : Generic : Item)
	: Generic : Item;
    IF B THEN
       RETURN (Choice1);
    ELSE
       RETURN (Choice2);
    END_IF;
END_FUNCTION;

FUNCTION IfcBuild2Axes
	(RefDirection : IfcDirection)
	: LIST [2:2] OF IfcDirection;
  LOCAL
    D : IfcDirection := NVL(IfcNormalise(RefDirection),
        IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([1.0,0.0]));
  END_LOCAL;
    RETURN([D, IfcOrthogonalComplement(D)]);
END_FUNCTION;

FUNCTION IfcBuildAxes
	(Axis, RefDirection : IfcDirection)
	: LIST [3:3] OF IfcDirection;
  LOCAL
    D1, D2 : IfcDirection;
  END_LOCAL;
    D1 := NVL(IfcNormalise(Axis), IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([0.0,0.0,1.0]));
    D2 := IfcFirstProjAxis(D1, RefDirection);
    RETURN ([D2, IfcNormalise(IfcCrossProduct(D1,D2)).Orientation, D1]);
END_FUNCTION;

FUNCTION IfcCorrectDimensions
	(m   : IfcUnitEnum; Dim : IfcDimensionalExponents)
	: LOGICAL;  
  CASE m OF
    LENGTHUNIT : IF
      Dim = (IfcDimensionalExponents (1, 0, 0, 0, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    MASSUNIT : IF
      Dim = (IfcDimensionalExponents (0, 1, 0, 0, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    TIMEUNIT : IF
      Dim = (IfcDimensionalExponents (0, 0, 1, 0, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    ELECTRICCURRENTUNIT : IF
      Dim = (IfcDimensionalExponents (0, 0, 0, 1, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    THERMODYNAMICTEMPERATUREUNIT : IF
      Dim = (IfcDimensionalExponents (0, 0, 0, 0, 1, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    AMOUNTOFSUBSTANCEUNIT : IF
      Dim = (IfcDimensionalExponents (0, 0, 0, 0, 0, 1, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    LUMINOUSINTENSITYUNIT : IF
      Dim = (IfcDimensionalExponents (0, 0, 0, 0, 0, 0, 1))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    PLANEANGLEUNIT : IF
      Dim = (IfcDimensionalExponents (0, 0, 0, 0, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    SOLIDANGLEUNIT : IF
      Dim = (IfcDimensionalExponents (0, 0, 0, 0, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    AREAUNIT : IF
      Dim = (IfcDimensionalExponents (2, 0, 0, 0, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    VOLUMEUNIT : IF
      Dim = (IfcDimensionalExponents (3, 0, 0, 0, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
  
    ABSORBEDDOSEUNIT : IF
      Dim = (IfcDimensionalExponents (2, 0, -2, 0, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    RADIOACTIVITYUNIT : IF
      Dim = (IfcDimensionalExponents (0, 0, -1, 0, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    ELECTRICCAPACITANCEUNIT : IF
      Dim = (IfcDimensionalExponents (-2, 1, 4, 1, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    DOSEEQUIVALENTUNIT : IF
      Dim = (IfcDimensionalExponents (2, 0, -2, 0, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    ELECTRICCHARGEUNIT : IF
      Dim = (IfcDimensionalExponents (0, 0, 1, 1, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    ELECTRICCONDUCTANCEUNIT : IF
      Dim = (IfcDimensionalExponents (-2, -1, 3, 2, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    ELECTRICVOLTAGEUNIT : IF
      Dim = (IfcDimensionalExponents (2, 1, -3, -1, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    ELECTRICRESISTANCEUNIT : IF
      Dim = (IfcDimensionalExponents (2, 1, -3, -2, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    ENERGYUNIT : IF
      Dim = (IfcDimensionalExponents (2, 1, -2, 0, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    FORCEUNIT : IF
      Dim = (IfcDimensionalExponents (1, 1, -2, 0, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    FREQUENCYUNIT : IF
      Dim = (IfcDimensionalExponents (0, 0, -1, 0, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    INDUCTANCEUNIT : IF
      Dim = (IfcDimensionalExponents (2, 1, -2, -2, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    ILLUMINANCEUNIT : IF
      Dim = (IfcDimensionalExponents (-2, 0, 0, 0, 0, 0, 1))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    LUMINOUSFLUXUNIT : IF
      Dim = (IfcDimensionalExponents (0, 0, 0, 0, 0, 0, 1))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    MAGNETICFLUXUNIT : IF
      Dim = (IfcDimensionalExponents (2, 1, -2, -1, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    MAGNETICFLUXDENSITYUNIT : IF
      Dim = (IfcDimensionalExponents (0, 1, -2, -1, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    POWERUNIT : IF
      Dim = (IfcDimensionalExponents (2, 1, -3, 0, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    PRESSUREUNIT : IF
      Dim = (IfcDimensionalExponents (-1, 1, -2, 0, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
  
    OTHERWISE :
      RETURN (UNKNOWN);
  END_CASE;
END_FUNCTION;

FUNCTION IfcCorrectLocalPlacement
	(AxisPlacement:IfcAxis2Placement; 
     RelPlacement : IfcObjectPlacement)
	: LOGICAL;
  
    IF (EXISTS(RelPlacement)) THEN
      IF ('IFC2X2_PLATFORM.IFCGRIDPLACEMENT' IN TYPEOF(RelPlacement)) THEN
        RETURN(?);
      END_IF;
      IF ('IFC2X2_PLATFORM.IFCLOCALPLACEMENT' IN TYPEOF(RelPlacement)) THEN
        IF ('IFC2X2_PLATFORM.IFCAXIS2PLACEMENT2D' IN TYPEOF(AxisPlacement)) THEN
          RETURN(TRUE);
        END_IF;
        IF ('IFC2X2_PLATFORM.IFCAXIS2PLACEMENT3D' IN TYPEOF(AxisPlacement)) THEN
          IF (RelPlacement.RelativePlacement.Dim = 3) THEN
            RETURN(TRUE);
          ELSE
            RETURN(FALSE);
          END_IF;
        END_IF;
      END_IF;
    ELSE
      RETURN(TRUE);  
    END_IF;
    RETURN(?);
END_FUNCTION;

FUNCTION IfcCorrectObjectAssignment
	(Constraint: IfcObjectTypeEnum; Objects : SET[1:?] OF IfcObject)
	: LOGICAL;
    
  LOCAL
    Count : INTEGER := 0;
  END_LOCAL;
  
    IF (NOT(EXISTS(Constraint)) OR (Constraint = IfcObjectTypeEnum.NOTDEFINED))
    THEN 
      RETURN(?);
      ELSE
      IF (Constraint = IfcObjectTypeEnum.PRODUCT)
      THEN
        Count := SIZEOF(QUERY(temp <* Objects | NOT('IFC2X2_PLATFORM.IFCPRODUCT' IN TYPEOF(temp))));
        RETURN(Count = 0);
        ELSE
        IF (Constraint = IfcObjectTypeEnum.PROCESS)
        THEN
          Count := SIZEOF(QUERY(temp <* Objects | NOT('IFC2X2_PLATFORM.IFCPROCESS' IN TYPEOF(temp))));
          RETURN(Count = 0);
          ELSE
          IF (Constraint = IfcObjectTypeEnum.CONTROL)
          THEN
            Count := SIZEOF(QUERY(temp <* Objects | NOT('IFC2X2_PLATFORM.IFCCONTROL' IN TYPEOF(temp))));
            RETURN(Count = 0);
            ELSE
            IF (Constraint = IfcObjectTypeEnum.RESOURCE)
            THEN
              Count := SIZEOF(QUERY(temp <* Objects | NOT('IFC2X2_PLATFORM.IFCRESOURCE' IN TYPEOF(temp))));
              RETURN(Count = 0);
              ELSE
              IF (Constraint = IfcObjectTypeEnum.ACTOR)
              THEN
                Count := SIZEOF(QUERY(temp <* Objects | NOT('IFC2X2_PLATFORM.IFCACTOR' IN TYPEOF(temp))));
                RETURN(Count = 0);
                ELSE
                IF (Constraint = IfcObjectTypeEnum.GROUP)
                THEN
                  Count := SIZEOF(QUERY(temp <* Objects | NOT('IFC2X2_PLATFORM.IFCGROUP' IN TYPEOF(temp))));
                  RETURN(Count = 0);
                  ELSE
                  IF (Constraint = IfcObjectTypeEnum.PROJECT)
                  THEN
                    Count := SIZEOF(QUERY(temp <* Objects | NOT('IFC2X2_PLATFORM.IFCPROJECT' IN TYPEOF(temp))));
                    RETURN(Count = 0);
                  END_IF;
                END_IF;
              END_IF;
            END_IF;
          END_IF;
        END_IF;
      END_IF;
    END_IF;
    RETURN(?);
END_FUNCTION;

FUNCTION IfcCrossProduct
	(Arg1, Arg2 : IfcDirection)
	: IfcVector;
  LOCAL
    Mag : REAL;
    Res : IfcDirection;
    V1,V2  : LIST[3:3] OF REAL;
    Result : IfcVector;
  END_LOCAL;
  
    IF (NOT EXISTS (Arg1) OR (Arg1.Dim = 2)) OR (NOT EXISTS (Arg2) OR (Arg2.Dim = 2)) THEN
      RETURN(?);
    ELSE
      BEGIN
        V1  := IfcNormalise(Arg1).DirectionRatios;
        V2  := IfcNormalise(Arg2).DirectionRatios;
        Res := IfcRepresentationItem() || IfcGeometricRepresentationItem () 
               || IfcDirection([(V1[2]*V2[3] - V1[3]*V2[2]), (V1[3]*V2[1] - V1[1]*V2[3]), (V1[1]*V2[2] - V1[2]*V2[1])]);
        Mag := 0.0;
        REPEAT i := 1 TO 3;
          Mag := Mag + Res.DirectionRatios[i]*Res.DirectionRatios[i];
        END_REPEAT;
        IF (Mag > 0.0) THEN
          Result := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcVector(Res, SQRT(Mag));
        ELSE
          Result := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcVector(Arg1, 0.0);
        END_IF;
        RETURN(Result);
      END;
    END_IF;
END_FUNCTION;

FUNCTION IfcCurveDim
	(Curve : IfcCurve)
	: IfcDimensionCount;
  
    IF ('IFC2X2_PLATFORM.IFCLINE' IN TYPEOF(Curve))
      THEN RETURN(Curve.Pnt.Dim);
    END_IF;
    IF ('IFC2X2_PLATFORM.IFCCONIC' IN TYPEOF(Curve))
      THEN RETURN(Curve.Position.Dim);
    END_IF;
    IF ('IFC2X2_PLATFORM.IFCPOLYLINE' IN TYPEOF(Curve))
      THEN RETURN(Curve.Points[1].Dim);
    END_IF;
    IF ('IFC2X2_PLATFORM.IFCTRIMMEDCURVE' IN TYPEOF(Curve))
      THEN RETURN(IfcCurveDim(Curve.BasisCurve));
    END_IF;
    IF ('IFC2X2_PLATFORM.IFCCOMPOSITECURVE' IN TYPEOF(Curve))
      THEN RETURN(Curve.Segments[1].Dim);
    END_IF;
    IF ('IFC2X2_PLATFORM.IFCBSPLINECURVE' IN TYPEOF(Curve))
      THEN RETURN(Curve.ControlPointsList[1].Dim);
    END_IF;
    IF ('IFC2X2_PLATFORM.IFCOFFSETCURVE2D' IN TYPEOF(Curve))
      THEN RETURN(2); 
    END_IF;
    IF ('IFC2X2_PLATFORM.IFCOFFSETCURVE3D' IN TYPEOF(Curve))
      THEN RETURN(3);
    END_IF;
  RETURN (?);
END_FUNCTION;

FUNCTION IfcCurveWeightsPositive
	(B: IfcRationalBezierCurve)
	: BOOLEAN;
     LOCAL
       Result : BOOLEAN := TRUE;
     END_LOCAL;
  
     REPEAT i := 0 TO B.UpperIndexOnControlPoints;
       IF B.Weights[i] <= 0.0  THEN
         Result := FALSE;
         RETURN(Result);
       END_IF;
     END_REPEAT;
     RETURN(Result);
END_FUNCTION;

FUNCTION IfcDeriveDimensionalExponents
	(x : IfcUnit)
	: IfcDimensionalExponents;  
    LOCAL
      Result : IfcDimensionalExponents :=
               IfcDimensionalExponents(0, 0, 0, 0, 0, 0, 0);  
    END_LOCAL;
    IF 'IFC2X2_PLATFORM.IFCDERIVEDUNIT' IN TYPEOF(x) THEN
      REPEAT i := LOINDEX(x.Elements) TO HIINDEX(x.Elements);
        Result.LengthExponent :=        Result.LengthExponent +
          (x.Elements[i].Exponent *
           x.Elements[i].Unit.Dimensions.LengthExponent);
        Result.MassExponent :=        Result.MassExponent  +
          (x.Elements[i].Exponent *
           x.Elements[i].Unit.Dimensions.MassExponent);
        Result.TimeExponent :=        Result.TimeExponent +
          (x.Elements[i].Exponent *
           x.Elements[i].Unit.Dimensions.TimeExponent);
        Result.ElectricCurrentExponent :=        Result.ElectricCurrentExponent +
          (x.Elements[i].Exponent *
           x.Elements[i].Unit.Dimensions.ElectricCurrentExponent);
        Result.ThermodynamicTemperatureExponent :=
          Result.ThermodynamicTemperatureExponent +
          (x.Elements[i].Exponent *
           x.Elements[i].Unit.Dimensions.ThermodynamicTemperatureExponent);
        Result.AmountOfSubstanceExponent :=
          Result.AmountOfSubstanceExponent +        (x.Elements[i].Exponent *
           x.Elements[i].Unit.Dimensions.AmountOfSubstanceExponent);
        Result.LuminousIntensityExponent :=
          Result.LuminousIntensityExponent +        (x.Elements[i].Exponent *
           x.Elements[i].Unit.Dimensions.LuminousIntensityExponent);
      END_REPEAT;  
    ELSE 
      Result := x.Dimensions;  
    END_IF;  
  RETURN (Result);
END_FUNCTION;

FUNCTION IfcDimensionsForSiUnit
	(n : IfcSiUnitName )
	: IfcDimensionalExponents;
    CASE n OF
      METRE          : RETURN (IfcDimensionalExponents
                               (1, 0, 0, 0, 0, 0, 0));
      SQUARE_METRE   : RETURN (IfcDimensionalExponents
                               (2, 0, 0, 0, 0, 0, 0));
      CUBIC_METRE    : RETURN (IfcDimensionalExponents
                               (3, 0, 0, 0, 0, 0, 0));
      GRAM           : RETURN (IfcDimensionalExponents
                               (0, 1, 0, 0, 0, 0, 0));
      SECOND         : RETURN (IfcDimensionalExponents
                               (0, 0, 1, 0, 0, 0, 0));
      AMPERE         : RETURN (IfcDimensionalExponents
                               (0, 0, 0, 1, 0, 0, 0));
      KELVIN         : RETURN (IfcDimensionalExponents
                               (0, 0, 0, 0, 1, 0, 0));
      MOLE           : RETURN (IfcDimensionalExponents
                               (0, 0, 0, 0, 0, 1, 0));
      CANDELA        : RETURN (IfcDimensionalExponents
                               (0, 0, 0, 0, 0, 0, 1));
      RADIAN         : RETURN (IfcDimensionalExponents
                               (0, 0, 0, 0, 0, 0, 0));
      STERADIAN      : RETURN (IfcDimensionalExponents
                               (0, 0, 0, 0, 0, 0, 0));
      HERTZ          : RETURN (IfcDimensionalExponents
                               (0, 0, -1, 0, 0, 0, 0));
      NEWTON         : RETURN (IfcDimensionalExponents
                               (1, 1, -2, 0, 0, 0, 0));
      PASCAL         : RETURN (IfcDimensionalExponents
                               (-1, 1, -2, 0, 0, 0, 0));
      JOULE          : RETURN (IfcDimensionalExponents
                               (2, 1, -2, 0, 0, 0, 0));
      WATT           : RETURN (IfcDimensionalExponents
                               (2, 1, -3, 0, 0, 0, 0));
      COULOMB        : RETURN (IfcDimensionalExponents
                               (0, 0, 1, 1, 0, 0, 0));
      VOLT           : RETURN (IfcDimensionalExponents
                               (2, 1, -3, -1, 0, 0, 0));
      FARAD          : RETURN (IfcDimensionalExponents
                               (-2, -1, 4, 1, 0, 0, 0));
      OHM            : RETURN (IfcDimensionalExponents
                               (2, 1, -3, -2, 0, 0, 0));
      SIEMENS        : RETURN (IfcDimensionalExponents
                               (-2, -1, 3, 2, 0, 0, 0));
      WEBER          : RETURN (IfcDimensionalExponents
                               (2, 1, -2, -1, 0, 0, 0));
      TESLA          : RETURN (IfcDimensionalExponents
                               (0, 1, -2, -1, 0, 0, 0));
      HENRY          : RETURN (IfcDimensionalExponents
                               (2, 1, -2, -2, 0, 0, 0));
      DEGREE_CELSIUS : RETURN (IfcDimensionalExponents
                               (0, 0, 0, 0, 1, 0, 0));
      LUMEN          : RETURN (IfcDimensionalExponents
                               (0, 0, 0, 0, 0, 0, 1));
      LUX            : RETURN (IfcDimensionalExponents
                               (-2, 0, 0, 0, 0, 0, 1));
      BECQUEREL      : RETURN (IfcDimensionalExponents
                               (0, 0, -1, 0, 0, 0, 0));
      GRAY           : RETURN (IfcDimensionalExponents
                               (2, 0, -2, 0, 0, 0, 0));
      SIEVERT        : RETURN (IfcDimensionalExponents
                               (2, 0, -2, 0, 0, 0, 0));
      OTHERWISE      : RETURN (IfcDimensionalExponents
                               (0, 0, 0, 0, 0, 0, 0));
    END_CASE;
END_FUNCTION;

FUNCTION IfcDotProduct
	(Arg1, Arg2 : IfcDirection)
	: REAL;
  LOCAL
    Scalar : REAL;
    Vec1, Vec2 : IfcDirection;
    Ndim   : INTEGER;
  END_LOCAL;
  
    IF NOT EXISTS (Arg1) OR NOT EXISTS (Arg2) THEN
      Scalar := ?;
    ELSE
      IF (Arg1.Dim <> Arg2.Dim) THEN
        Scalar := ?;
      ELSE
        BEGIN
          Vec1 := IfcNormalise(Arg1);
          Vec2 := IfcNormalise(Arg2);
          Ndim := Arg1.Dim;
          Scalar := 0.0;
          REPEAT i := 1 TO Ndim;
            Scalar := Scalar + Vec1.DirectionRatios[i]*Vec2.DirectionRatios[i];
          END_REPEAT;
        END;
      END_IF;
    END_IF;
    RETURN (Scalar);
END_FUNCTION;

FUNCTION IfcFirstProjAxis
	(ZAxis, Arg : IfcDirection)
	: IfcDirection;
  LOCAL
    XAxis : IfcDirection;
    V     : IfcDirection;
    Z     : IfcDirection;
    XVec  : IfcVector;
  END_LOCAL;
  
    IF (NOT EXISTS(ZAxis)) THEN
      RETURN (?) ;
    ELSE
      Z := IfcNormalise(ZAxis);
      IF NOT EXISTS(Arg) THEN
        IF (Z.DirectionRatios <> [1.0,0.0,0.0]) THEN
          V := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([1.0,0.0,0.0]);
        ELSE
          V := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([0.0,1.0,0.0]);
        END_IF;
      ELSE
        IF (Arg.Dim <> 3) THEN
          RETURN (?) ;
        END_IF;
        IF ((IfcCrossProduct(Arg,Z).Magnitude) = 0.0) THEN
          RETURN (?);
        ELSE
          V := IfcNormalise(Arg);
        END_IF;
      END_IF;
      XVec  := IfcScalarTimesVector(IfcDotProduct(V, Z), Z);
      XAxis := IfcVectorDifference(V, XVec).Orientation;
      XAxis := IfcNormalise(XAxis);
    END_IF;
    RETURN(XAxis);
END_FUNCTION;

FUNCTION IfcLeapYear
	(Year : IfcYearNumber)
	: BOOLEAN;
  
  IF ((((Year MOD 4) = 0) AND ((Year MOD 100) <> 0)) OR
              ((Year MOD 400) = 0)) THEN
    RETURN(TRUE);
  ELSE
    RETURN(FALSE);
  END_IF;
END_FUNCTION;

FUNCTION IfcListToArray
	(Lis : LIST [0:?] OF GENERIC : T;
         Low,U : INTEGER)
	: ARRAY OF GENERIC : T;
     LOCAL
       N   : INTEGER;
       Res : ARRAY [Low:U] OF GENERIC : T;
     END_LOCAL;
        
     N := SIZEOF(Lis);
     IF (N <> (U-Low +1)) THEN
       RETURN(?);
     ELSE
       Res := [Lis[1] : N];
       REPEAT i := 2 TO N;
         Res[Low+i-1] := Lis[i];
       END_REPEAT;
       RETURN(Res);
     END_IF;
END_FUNCTION;

FUNCTION IfcLoopHeadToTail
	(ALoop : IfcEdgeLoop)
	: LOGICAL;
     LOCAL
       N : INTEGER;
       P : LOGICAL := TRUE;
     END_LOCAL;
       
       N := SIZEOF (ALoop.EdgeList);
       REPEAT i := 2 TO N;
         P := P AND (ALoop.EdgeList[i-1].EdgeEnd :=:
                     ALoop.EdgeList[i].EdgeStart);
       END_REPEAT;     
       RETURN (P);
END_FUNCTION;

FUNCTION IfcMlsTotalThickness
	(LayerSet : IfcMaterialLayerSet)
	: IfcLengthMeasure;
    LOCAL
      Max : IfcLengthMeasure := LayerSet.MaterialLayers[1].LayerThickness;    
    END_LOCAL;
  
    IF SIZEOF(LayerSet.MaterialLayers) > 1 THEN
      REPEAT i := 2 TO HIINDEX(LayerSet.MaterialLayers);
         Max := Max + LayerSet.MaterialLayers[i].LayerThickness;
      END_REPEAT;
    END_IF;
    RETURN (Max);
END_FUNCTION;

FUNCTION IfcNoOfLayers
	(Element : IfcElement )
	: INTEGER;
      
      LOCAL
        Association : BAG OF IfcRelAssociates := [];
        MaterialAssociation : SET OF IfcRelAssociatesMaterial := [];
      END_LOCAL;
      
      Association := USEDIN(Element, 'IFC2X2_PLATFORM.IFCRELASSOCIATES.RELATEDOBJECTS');
   
      IF SIZEOF (Association) > 0 THEN
        REPEAT i := 1 TO HIINDEX(Association);
          IF ('IFC2X2_PLATFORM.IFCRELASSOCIATESMATERIAL' IN TYPEOF(Association[i])) THEN 
            MaterialAssociation := MaterialAssociation + Association[i];
          END_IF;
        END_REPEAT;
      END_IF;
      
      IF (SIZEOF(MaterialAssociation) <> 1) THEN
        RETURN (?);
      ELSE
        IF 'IFC2X2_PLATFORM.IFCMATERIAL' IN TYPEOF(MaterialAssociation[1].RelatingMaterial) THEN
           RETURN (1);
        END_IF;
        IF 'IFC2X2_PLATFORM.IFCMATERIALLAYERSETUSAGE' IN TYPEOF(MaterialAssociation[1].RelatingMaterial) THEN
           RETURN (SIZEOF(MaterialAssociation[1].RelatingMaterial.ForLayerSet.MaterialLayers));
        END_IF;
        IF 'IFC2X2_PLATFORM.IFCMATERIALLIST' IN TYPEOF(MaterialAssociation[1].RelatingMaterial) THEN
           RETURN (?);
        END_IF;
      END_IF;
    
      RETURN (?);
END_FUNCTION;

FUNCTION IfcNormalise
	(Arg : IfcVectorOrDirection)
	: IfcVectorOrDirection;
  LOCAL
    Ndim : INTEGER;
    V    : IfcDirection
         := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([1.,0.]); 
    Vec  : IfcVector 
         := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcVector (
              IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([1.,0.]), 1.);
    Mag  : REAL;
    Result : IfcVectorOrDirection
           := V;
  END_LOCAL;
  
    IF NOT EXISTS (Arg) THEN
      RETURN (?);
    ELSE
      Ndim := Arg.Dim;
      IF 'IFC2X2_PLATFORM.IFCVECTOR' IN TYPEOF(Arg) THEN
        BEGIN
          Vec := Arg;
          V := Arg.Orientation;
          IF Arg.Magnitude = 0.0 THEN
            RETURN(?);
          ELSE
            Vec.Magnitude := 1.0;
          END_IF;
        END;
      ELSE
        V := Arg;
      END_IF;
      Mag := 0.0;
        REPEAT i := 1 TO Ndim;
          Mag := Mag + V.DirectionRatios[i]*V.DirectionRatios[i];
        END_REPEAT;
      IF Mag > 0.0 THEN
        Mag := SQRT(Mag);
        REPEAT i := 1 TO Ndim;
          V.DirectionRatios[i] := V.DirectionRatios[i]/Mag;
        END_REPEAT;
        IF 'IFC2X2_PLATFORM.IFCVECTOR' IN TYPEOF(arg) THEN
          Vec.Orientation := V;
          Result := Vec;
        ELSE
          Result := V;
        END_IF;
      ELSE
        RETURN(?);
      END_IF;
    END_IF;
    RETURN (Result);
END_FUNCTION;

FUNCTION IfcOrthogonalComplement
	(Vec : IfcDirection)
	: IfcDirection;
  LOCAL
    Result : IfcDirection ;
  END_LOCAL;
    IF NOT EXISTS (Vec) OR (Vec.Dim <> 2) THEN
      RETURN(?);
    ELSE
      Result := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([-Vec.DirectionRatios[2], Vec.DirectionRatios[1]]);
      RETURN(Result);
    END_IF;
END_FUNCTION;

FUNCTION IfcPathHeadToTail
	(APath : IfcPath)
	: LOGICAL;
     LOCAL
       N : INTEGER := 0;
       P : LOGICAL := UNKNOWN;
     END_LOCAL;
       N := SIZEOF (APath.EdgeList);
     REPEAT i := 2 TO N;
        P := P AND (APath.EdgeList[i-1].EdgeEnd :=:
                    APath.EdgeList[i].EdgeStart);
     END_REPEAT;
     RETURN (P);
END_FUNCTION;

FUNCTION IfcSameAxis2Placement
	(ap1, ap2 : IfcAxis2Placement; Epsilon : REAL)
	: LOGICAL;
  
    RETURN (IfcSameDirection(ap1.P[1],ap2.P[1],Epsilon) AND
            IfcSameDirection(ap1.P[2],ap2.P[2],Epsilon) AND
            IfcSameCartesianPoint(ap1.Location,ap1.Location,Epsilon));
END_FUNCTION;

FUNCTION IfcSameCartesianPoint
	(cp1, cp2 : IfcCartesianPoint; Epsilon : REAL)
	: LOGICAL;
  
    RETURN (IfcSameValue(cp1.Coordinates[1],cp2.Coordinates[1],Epsilon) AND
            IfcSameValue(cp1.Coordinates[2],cp2.Coordinates[2],Epsilon) AND
            IfcSameValue(NVL(cp1.Coordinates[3],0.0),NVL(cp2.Coordinates[3],0.0),Epsilon));
END_FUNCTION;

FUNCTION IfcSameDirection
	(dir1, dir2 : IfcDirection; Epsilon : REAL)
	: LOGICAL;
  
    RETURN (IfcSameValue(dir1.DirectionRatios[1],dir2.DirectionRatios[1],Epsilon) AND
            IfcSameValue(dir1.DirectionRatios[2],dir2.DirectionRatios[2],Epsilon) AND
            IfcSameValue(NVL(dir1.DirectionRatios[3],0.0),NVL(dir2.DirectionRatios[3],0.0),Epsilon));
END_FUNCTION;

FUNCTION IfcSameValidPrecision
	(Epsilon1, Epsilon2 : REAL)
	: LOGICAL;
  LOCAL
    ValidEps1, ValidEps2 : REAL;
    DefaultEps           : REAL := 0.00000001;
    DerivationOfEps      : REAL := 1.001;
    UpperEps             : REAL := 1.0;
  END_LOCAL;
  
  
  
  
  
  
    ValidEps1 := NVL(Epsilon1, DefaultEps);
    ValidEps2 := NVL(Epsilon2, DefaultEps);
    RETURN ((0.0 < ValidEps1) AND (ValidEps1 <= DerivationOfEps * ValidEps2) AND (ValidEps2 <= DerivationOfEps * ValidEps1) AND (ValidEps2 < UpperEps));
END_FUNCTION;

FUNCTION IfcSameValue
	(Value1, Value2 : REAL; Epsilon : REAL)
	: LOGICAL;
  LOCAL
    ValidEps : REAL;
  END_LOCAL;
  
  
  
  
    ValidEps := NVL(Epsilon, 0.00000001);
    RETURN ((Value1 + ValidEps > Value2) AND (Value1 < Value2 + ValidEps));
END_FUNCTION;

FUNCTION IfcScalarTimesVector
	(Scalar : REAL; Vec : IfcVectorOrDirection)
	: IfcVector;
  LOCAL
    V : IfcDirection;
    Mag : REAL;
    Result : IfcVector;
  END_LOCAL;
  
    IF NOT EXISTS (Scalar) OR NOT EXISTS (Vec) THEN
      RETURN (?) ;
    ELSE
      IF 'IFC2X2_PLATFORM.IFCVECTOR' IN TYPEOF (Vec) THEN
        V := Vec.Orientation;
        Mag := Scalar * Vec.Magnitude;
      ELSE
        V := Vec;
        Mag := Scalar;
      END_IF;
      IF (Mag < 0.0 ) THEN
        REPEAT i := 1 TO SIZEOF(V.DirectionRatios);
          V.DirectionRatios[i] := -V.DirectionRatios[i];
        END_REPEAT;
        Mag := -Mag;
      END_IF;
      Result := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcVector(IfcNormalise(V), Mag);
    END_IF;
    RETURN (Result);
END_FUNCTION;

FUNCTION IfcSecondProjAxis
	(ZAxis, XAxis, Arg: IfcDirection)
	: IfcDirection;
  LOCAL
    YAxis : IfcVector;
    V     : IfcDirection;
    Temp  : IfcVector;
  END_LOCAL;
  
    IF NOT EXISTS(Arg) THEN
      V := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([0.0,1.0,0.0]);
    ELSE
      V := Arg;
    END_IF;
    Temp  := IfcScalarTimesVector(IfcDotProduct(V, ZAxis), ZAxis);
    YAxis := IfcVectorDifference(V, Temp);
    Temp  := IfcScalarTimesVector(IfcDotProduct(V, XAxis), XAxis);
    YAxis := IfcVectorDifference(YAxis, Temp);
    YAxis := IfcNormalise(YAxis);
    RETURN(YAxis.Orientation);
END_FUNCTION;

FUNCTION IfcShapeRepresentationTypes
	(RepType : IfcLabel; Items : SET OF IfcRepresentationItem)
	: LOGICAL;
      
      LOCAL
        Count : INTEGER := 0;
      END_LOCAL;
  
      CASE RepType OF 
      'Curve2D' :
        BEGIN 
          Count := SIZEOF(QUERY(temp <* Items | ('IFC2X2_PLATFORM.IFCCURVE' IN TYPEOF(temp)) 
                   AND (temp.Dim = 2)));
        END;
      'GeometricSet' : 
        BEGIN 
          Count := SIZEOF(QUERY(temp <* Items | ('IFC2X2_PLATFORM.IFCGEOMETRICSET' IN TYPEOF(temp))
                   OR ('IFC2X2_PLATFORM.IFCPOINT' IN TYPEOF(temp))
                   OR ('IFC2X2_PLATFORM.IFCCURVE' IN TYPEOF(temp))
                   OR ('IFC2X2_PLATFORM.IFCSURFACE' IN TYPEOF(temp))));
        END;
      'GeometricCurveSet' :
        BEGIN
          Count := SIZEOF(QUERY(temp <* Items | ('IFC2X2_PLATFORM.IFCGEOMETRICCURVESET' IN TYPEOF(temp))
                   OR ('IFC2X2_PLATFORM.IFCGEOMETRICSET' IN TYPEOF(temp))
                   OR ('IFC2X2_PLATFORM.IFCPOINT' IN TYPEOF(temp))
                   OR ('IFC2X2_PLATFORM.IFCCURVE' IN TYPEOF(temp))));
           REPEAT i:=1 TO HIINDEX(Items);  
             IF ('IFC2X2_PLATFORM.IFCGEOMETRICSET' IN TYPEOF(Items[i]))
             THEN
               IF (SIZEOF(QUERY(temp <* Items[i]\IfcGeometricSet.Elements | 'IFC2X2_PLATFORM.IFCSURFACE' IN TYPEOF(temp))) > 0)
               THEN
                 Count := Count - 1;
               END_IF;
             END_IF;
           END_REPEAT;
        END;
      'SurfaceModel' :
        BEGIN
          Count := SIZEOF(QUERY(temp <* Items | SIZEOF([
                     'IFC2X2_PLATFORM.IFCSHELLBASEDSURFACEMODEL',
                     'IFC2X2_PLATFORM.IFCFACEBASEDSURFACEMODEL',
                     'IFC2X2_PLATFORM.IFCFACETEDBREP',
                     'IFC2X2_PLATFORM.IFCFACETEDBREPWITHVOIDS'] * TYPEOF(temp)) >= 1
                   ));      
        END;
      'SolidModel' :
        BEGIN
          Count := SIZEOF(QUERY(temp <* Items | ('IFC2X2_PLATFORM.IFCSOLIDMODEL' IN TYPEOF(temp))));            
        END;
      'SweptSolid' :
        BEGIN
          Count := SIZEOF(QUERY(temp <* Items | ('IFC2X2_PLATFORM.IFCSWEPTAREASOLID' IN TYPEOF(temp))));            
        END;
      'CSG' :
        BEGIN
          Count := SIZEOF(QUERY(temp <* Items | ('IFC2X2_PLATFORM.IFCBOOLEANRESULT' IN TYPEOF(temp))));            
        END;
      'Clipping' :
        BEGIN
          Count := SIZEOF(QUERY(temp <* Items | ('IFC2X2_PLATFORM.IFCBOOLEANCLIPPINGRESULT' IN TYPEOF(temp))));            
        END;
      'AdvancedSweptSolid' :
        BEGIN
          Count := SIZEOF(QUERY(temp <* Items | ('IFC2X2_PLATFORM.IFCSURFACECURVESWEPTAREASOLID' IN TYPEOF(temp))
                   OR ('IFC2X2_PLATFORM.IFCSWEPTDISKSOLID' IN TYPEOF(temp))));      
        END;
      'Brep' :
        BEGIN
          Count := SIZEOF(QUERY(temp <* Items | ('IFC2X2_PLATFORM.IFCFACETEDBREP' IN TYPEOF(temp))
                   OR ('IFC2X2_PLATFORM.IFCFACETEDBREPWITHVOIDS' IN TYPEOF(temp))));      
        END;
      'BoundingBox' :
        BEGIN
          Count := SIZEOF(QUERY(temp <* Items | ('IFC2X2_PLATFORM.IFCBOUNDINGBOX' IN TYPEOF(temp))));
          IF (SIZEOF(Items) > 1)
          THEN
            Count := 0;
          END_IF;   
        END;
      'SectionedSpine' :
        BEGIN
          Count := SIZEOF(QUERY(temp <* Items | ('IFC2X2_PLATFORM.IFCSECTIONEDSPINE' IN TYPEOF(temp))));      
        END;
      'MappedRepresentation' :
        BEGIN
          Count := SIZEOF(QUERY(temp <* Items | ('IFC2X2_PLATFORM.IFCMAPPEDITEM' IN TYPEOF(temp)))); 
          IF (SIZEOF(Items) > 1)
          THEN
            Count := 0;
          END_IF;   
        END;
       OTHERWISE : RETURN(?);
      END_CASE;
      RETURN (Count = SIZEOF(Items));
END_FUNCTION;

FUNCTION IfcTopologyRepresentationTypes
	(RepType : IfcLabel; Items : SET OF IfcRepresentationItem)
	: LOGICAL;
      
      LOCAL
        Count : INTEGER := 0;
      END_LOCAL;
  
      CASE RepType OF 
      'Vertex' :
        BEGIN 
          Count := SIZEOF(QUERY(temp <* Items | 
                    ('IFC2X2_PLATFORM.IFCVERTEX' IN TYPEOF(temp))));
        END;
      'Edge' : 
        BEGIN 
          Count := SIZEOF(QUERY(temp <* Items | 
                    ('IFC2X2_PLATFORM.IFCEDGE' IN TYPEOF(temp))));
        END;
      'Path' : 
        BEGIN 
          Count := SIZEOF(QUERY(temp <* Items | 
                    ('IFC2X2_PLATFORM.IFCPATH' IN TYPEOF(temp))));
        END;
      'Face' : 
        BEGIN 
          Count := SIZEOF(QUERY(temp <* Items | 
                    ('IFC2X2_PLATFORM.IFCFACE' IN TYPEOF(temp))));
        END;
      'Shell' :
        BEGIN
          Count := SIZEOF(QUERY(temp <* Items | 
                    ('IFC2X2_PLATFORM.IFCOPENSHELL' IN TYPEOF(temp))
                      OR ('IFC2X2_PLATFORM.IFCCLOSEDSHELL' IN TYPEOF(temp))));
        END;
      'Undefined': RETURN(TRUE);
       OTHERWISE : RETURN(?);
      END_CASE;
      RETURN (Count = SIZEOF(Items));
END_FUNCTION;

FUNCTION IfcUniquePropertyName
	(Properties : SET [1:?] OF IfcProperty)
	: LOGICAL;
  
  LOCAL
    Names : SET OF IfcIdentifier := [];
  END_LOCAL;
  
  REPEAT i:=1 TO HIINDEX(Properties);
    Names := Names + Properties[i].Name;
  END_REPEAT;
  RETURN (SIZEOF(Names) = SIZEOF(Properties));
END_FUNCTION;

FUNCTION IfcValidCalendarDate
	(Date : IfcCalendarDate)
	: LOGICAL;
  IF NOT ({1 <= Date.DayComponent <= 31}) THEN    
    RETURN(FALSE);  
  END_IF;
  CASE Date.MonthComponent OF
    4         : RETURN({ 1<= Date.DayComponent <= 30});
    6         : RETURN({ 1<= Date.DayComponent <= 30});
    9         : RETURN({ 1<= Date.DayComponent <= 30});
    11        : RETURN({ 1<= Date.DayComponent <= 30});    
    2         :    
    BEGIN
      IF (IfcLeapYear(Date.YearComponent)) THEN
        RETURN({ 1<= Date.DayComponent <= 29});      
      ELSE
        RETURN({ 1<= Date.DayComponent <= 28});      
      END_IF;    
    END;
    OTHERWISE : RETURN(TRUE);  
  END_CASE;
END_FUNCTION;

FUNCTION IfcValidTime
	(Time: IfcLocalTime)
	: BOOLEAN;
  IF EXISTS (Time.SecondComponent) THEN
    RETURN (EXISTS (Time.MinuteComponent));  
  ELSE    
    RETURN (TRUE);  
  END_IF;
END_FUNCTION;

FUNCTION IfcVectorDifference
	(Arg1, Arg2 : IfcVectorOrDirection)
	: IfcVector;
  LOCAL
    Result : IfcVector;
    Res, Vec1, Vec2 : IfcDirection;
    Mag, Mag1, Mag2 : REAL;
    Ndim : INTEGER;
  END_LOCAL;
  
    IF ((NOT EXISTS (Arg1)) OR (NOT EXISTS (Arg2))) OR (Arg1.Dim <> Arg2.Dim) THEN
      RETURN (?) ;
    ELSE
      BEGIN
        IF 'IFC2X2_PLATFORM.IFCVECTOR' IN TYPEOF(Arg1) THEN
          Mag1 := Arg1.Magnitude;
          Vec1 := Arg1.Orientation;
        ELSE
          Mag1 := 1.0;
          Vec1 := Arg1;
        END_IF;
        IF 'IFC2X2_PLATFORM.IFCVECTOR' IN TYPEOF(Arg2) THEN
          Mag2 := Arg2.Magnitude;
          Vec2 := Arg2.Orientation;
        ELSE
          Mag2 := 1.0;
          Vec2 := Arg2;
        END_IF;
        Vec1 := IfcNormalise (Vec1);
        Vec2 := IfcNormalise (Vec2);
        Ndim := SIZEOF(Vec1.DirectionRatios);
        Mag  := 0.0;
        IF (Ndim = 2) THEN
          Res := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([0.,0.]);
        ELSE
          Res := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([0.,0.,0.]);
        END_IF;
        Res.DirectionRatios := [0.0:Ndim];
        REPEAT i := 1 TO Ndim;
          Res.DirectionRatios[i] := Mag1*Vec1.DirectionRatios[i] + Mag2*Vec2.DirectionRatios[i];
          Mag := Mag + (Res.DirectionRatios[i]*Res.DirectionRatios[i]);
        END_REPEAT;
        IF (Mag > 0.0 ) THEN
          Result := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcVector( Res, SQRT(Mag));
        ELSE
          Result := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcVector( Vec1, 0.0);
        END_IF;
      END;
    END_IF;
    RETURN (Result);
END_FUNCTION;

FUNCTION IfcVectorSum
	(Arg1, Arg2 : IfcVectorOrDirection)
	: IfcVector;
  LOCAL
    Result : IfcVector;
    Res, Vec1, Vec2 : IfcDirection;
    Mag, Mag1, Mag2 : REAL;
    Ndim : INTEGER;
  END_LOCAL;
  
    IF ((NOT EXISTS (Arg1)) OR (NOT EXISTS (Arg2))) OR (Arg1.Dim <> Arg2.Dim) THEN
      RETURN (?) ;
    ELSE
      BEGIN
        IF 'IFC2X2_PLATFORM.IFCVECTOR' IN TYPEOF(Arg1) THEN
          Mag1 := Arg1.Magnitude;
          Vec1 := Arg1.Orientation;
        ELSE
          Mag1 := 1.0;
          Vec1 := Arg1;
        END_IF;
        IF 'IFC2X2_PLATFORM.IFCVECTOR' IN TYPEOF(Arg2) THEN
          Mag2 := Arg2.Magnitude;
          Vec2 := Arg2.Orientation;
        ELSE
          Mag2 := 1.0;
          Vec2 := Arg2;
        END_IF;
        Vec1 := IfcNormalise (Vec1);
        Vec2 := IfcNormalise (Vec2);
        Ndim := SIZEOF(Vec1.DirectionRatios);
        Mag  := 0.0;
        Res  := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([]);
        REPEAT i := 1 TO Ndim;
          Res.DirectionRatios[i] := Mag1*Vec1.DirectionRatios[i] +
                                       Mag2*Vec2.DirectionRatios[i];
          Mag := Mag + (Res.DirectionRatios[i]*Res.DirectionRatios[i]);
        END_REPEAT;
        IF (Mag > 0.0 ) THEN
          Result := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcVector( Res, SQRT(Mag));
        ELSE
          Result := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcVector( Vec1, 0.0);
        END_IF;
      END;
    END_IF;
    RETURN (Result);
END_FUNCTION;

RULE IfcPlacementNotShared FOR 
	(IfcObjectPlacement);
      LOCAL
    
    IsPlacementShared : LOGICAL := FALSE;
    
  END_LOCAL;
    
  IF (SIZEOF(IfcObjectPlacement) > 0) THEN
    
    REPEAT i := LOINDEX(IfcObjectPlacement)   TO HIINDEX(IfcObjectPlacement);
    
      IF (SIZEOF(USEDIN(IfcObjectPlacement[i],   'IFC2X2_PLATFORM.IFCPRODUCT.OBJECTPLACEMENT')) > 1) THEN
    
        IsPlacementShared := TRUE;
    
      END_IF;
    
    END_REPEAT;
    
  END_IF;
    

    WHERE
      WR1 : IsPlacementShared = FALSE;
END_RULE;

RULE IfcRepresentationContextSameWCS FOR 
	(IfcGeometricRepresentationContext);
    LOCAL
      IsDifferent  : LOGICAL := FALSE;
    END_LOCAL;
      IF (SIZEOF(IfcGeometricRepresentationContext) > 1)
      THEN
        REPEAT i := 2 TO HIINDEX(IfcGeometricRepresentationContext);
          IF (IfcGeometricRepresentationContext[1].WorldCoordinateSystem :<>: IfcGeometricRepresentationContext[i].WorldCoordinateSystem)
          THEN
            IsDifferent := (NOT(IfcSameValidPrecision(IfcGeometricRepresentationContext[1].Precision,
                                                      IfcGeometricRepresentationContext[i].Precision)))
                        OR (NOT(IfcSameAxis2Placement(IfcGeometricRepresentationContext[1].WorldCoordinateSystem,
                                                      IfcGeometricRepresentationContext[i].WorldCoordinateSystem,
                                                      IfcGeometricRepresentationContext[1].Precision)));
          END_IF;
        END_REPEAT;
      END_IF;
    WHERE
      WR1 : IsDifferent = FALSE;
END_RULE;

RULE IfcSingleProjectInstance FOR 
	(IfcProject);
    WHERE
      WR1 : SIZEOF(IfcProject) <= 1;
END_RULE;

END_SCHEMA;
