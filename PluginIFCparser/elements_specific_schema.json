{
    "head": [
        "\"\"\"Module contains the different classes for all HVAC elements\"\"\"",
        "",
        "import math",
        "import re",
        "import numpy as np",
        "",
        "from bim2sim.decorators import cached_property",
        "from bim2sim.kernel import element, condition, attribute",
        "from bim2sim.decision import BoolDecision",
        "from bim2sim.kernel.units import ureg",
        "from bim2sim.decision import ListDecision, RealDecision",
        "from bim2sim.kernel.ifc2python import get_layers_ifc",
        "from bim2sim.enrichment_data.data_class import DataClass",
        "from teaser.logic.buildingobjects.useconditions import UseConditions",
        "from bim2sim.task.bps_f.bps_functions import get_matches_list, get_material_templates_resumed, \\",
        "    real_decision_user_input, filter_instances, get_pattern_usage",
        "import translators as ts",
        "",
        "",
        "def diameter_post_processing(value):",
        "    if isinstance(value, list):",
        "        return sum(value) / len(value)",
        "    return value",
        "",
        "",
        "pattern_usage = get_pattern_usage()",
        ""
    ],
    "IfcChiller": {
        "attributes": {
            "min_power": [
                "description='Minimum power that Chiller operates at.',",
                "unit=ureg.kilowatt,"
            ],
            "rated_power": [
                "description='Rated power of Chiller.',",
                "unit=ureg.kilowatt,"
            ],
            "efficiency": [
                "description='Efficiency of Chiller provided as list with pairs of [percentage_of_rated_power,efficiency]',",
                "unit=ureg.dimensionless,"
            ]
        },
        "pattern": [
            "Chiller",
            "K(\u00e4|ae)lte.?maschine"
        ]
    },
    "IfcCoolingTower": {
        "attributes": {
            "min_power": [
                "description='Minimum power that CoolingTower operates at.',",
                "unit=ureg.kilowatt,"
            ],
            "rated_power": [
                "description='Rated power of CoolingTower.',",
                "unit=ureg.kilowatt,"
            ],
            "efficiency": [
                "description='Efficiency of CoolingTower provided as list with pairs of [percentage_of_rated_power,efficiency]',",
                "unit=ureg.dimensionless,"
            ]
        },
        "pattern": [
            "Cooling.?Tower",
            "Recooling.?Plant",
            "K(\u00fc|ue)hl.?turm",
            "R(\u00fc|ue)ck.?K(\u00fc|ue)hl.?(werk|turm|er)",
            "RKA"
        ]
    },
    "IfcHeatExchanger": {
        "attributes": {
            "min_power": [
                "description='Minimum power that HeatExchange operates at.',",
                "unit=ureg.kilowatt,"
            ],
            "rated_power": [
                "description='Rated power of HeatExchange.',",
                "unit=ureg.kilowatt,"
            ],
            "efficiency": [
                "description='Efficiency of HeatExchange provided as list with pairs of [percentage_of_rated_power,efficiency]',",
                "unit=ureg.dimensionless,"
            ]
        },
        "pattern": [
            "Heat.?Exchanger",
            "W(\u00e4|ae)rme.?(\u00fc|e)bertrager",
            "W(\u00e4|ae)rme.?tauscher"
        ]
    },
    "IfcBoiler": {
        "attributes": {
            "water_volume": [
                "description=\"Water volume of boiler\",",
                "unit=ureg.meter ** 3,"
            ],
            "min_power": [
                "description=\"Minimum power that boiler operates at\",",
                "unit=ureg.kilowatt,"
            ],
            "rated_power": [
                "description=\"Rated power of boiler\",",
                "unit=ureg.kilowatt,"
            ],
            "efficiency": [
                "description=\"Efficiency of boiler provided as list with pairs of [percentage_of_rated_power,efficiency]\",",
                "unit=ureg.dimensionless,"
            ]
        },
        "functions": [
            "get_inner_connections",
            "is_generator"
        ],
        "pattern": [
            "Heat.?pump",
            "Kessel",
            "Boiler"
        ]
    },
    "IfcPipeSegment": {
        "name": "Pipe",
        "attributes": {
            "diameter": [
                "default_ps=('Pset_PipeSegmentTypeCommon', 'NominalDiameter'),",
                "unit=ureg.millimeter,",
                "patterns=[",
                "re.compile('.*Durchmesser.*', flags=re.IGNORECASE),",
                "re.compile('.*Diameter.*', flags=re.IGNORECASE),",
                "],",
                "ifc_postprocessing=diameter_post_processing,"
            ],
            "length": [
                "default_ps=('Qto_PipeSegmentBaseQuantities', 'Length'),",
                "unit=ureg.meter,",
                "patterns=[",
                "re.compile('.*L\u00e4nge.*', flags=re.IGNORECASE),",
                "re.compile('.*Length.*', flags=re.IGNORECASE),",
                "],",
                "functions=[_length_from_geometry],"
            ]
        },
        "conditions": [
            "condition.RangeCondition(\"diameter\", 5.0 * ureg.millimeter, 300.00 * ureg.millimeter)  # ToDo: unit?!"
        ],
        "functions": [
            "_length_from_geometry",
            "get_lenght_from_shape"
        ]
    },
    "IfcPipeFitting": {
        "attributes": {
            "diameter": [
                "default_ps=('Pset_PipeFittingTypeCommon', 'NominalDiameter'),",
                "unit=ureg.millimeter,",
                "patterns=[",
                "re.compile('.*Durchmesser.*', flags=re.IGNORECASE),",
                "re.compile('.*Diameter.*', flags=re.IGNORECASE),",
                "],",
                "ifc_postprocessing=diameter_post_processing,"
            ],
            "length": [
                "unit=ureg.meter,",
                "default=0,",
                "default_ps=True"
            ],
            "pressure_class": [
                "unit=ureg.pascal,",
                "default_ps=('Pset_PipeFittingTypeCommon', 'PressureClass')"
            ]
        },
        "conditions": [
            "condition.RangeCondition(\"diameter\", 5.0 * ureg.millimeter, 300.00 * ureg.millimeter)"
        ],
        "functions": [
            "_diameter_post_processing"
        ]
    },
    "IfcSpaceHeater": {
        "attributes": {
            "rated_power": [
                "description=\"Rated power of SpaceHeater\",",
                "unit=ureg.kilowatt,",
                "default=42,"
            ]
        },
        "functions": [
            "is_consumer"
        ],
        "pattern": [
            "Space.?heater"
        ]
    },
    "IfcTank": {
        "name": "Storage",
        "attributes": {
            "height": [
                "unit=ureg.meter,"
            ],
            "diameter": [
                "unit=ureg.millimeter,"
            ],
            "volume": [
                "unit=ureg.meter ** 3,"
            ]
        },
        "functions": [
            "_calc_volume"
        ],
        "pattern": [
            "Tank",
            "Speicher",
            "Expansion.?Tank",
            "Ausdehnungs.?gef(\u00e4|ae)(ss|\u00df)"
        ],
        "predefined_type": "'STORAGE'"
    },
    "IfcDistributionChamberElement": {
        "name": "Distributor",
        "attributes": {
            "volume": [
                "description=\"Volume of the Distributor\",",
                "unit=ureg.meter ** 3"
            ],
            "nominal_power": [
                "description=\"Nominal power of Distributor\",",
                "unit=ureg.kilowatt"
            ]
        },
        "pattern": [
            "Distribution.?chamber",
            "Distributior",
            "Verteiler"
        ]
    },
    "IfcPump": {
        "attributes": {
            "rated_power": [
                "unit=ureg.kilowatt,"
            ],
            "rated_height": [
                "unit=ureg.meter,"
            ],
            "rated_volume_flow": [
                "unit=ureg.meter ** 3 / ureg.hour,"
            ],
            "diameter": [
                "unit=ureg.meter,"
            ]
        },
        "pattern": [
            "Pumpe",
            "Pump"
        ]
    },
    "IfcValve": {
        "attributes": {
            "diameter": [
                "description='Valve diameter',",
                "unit=ureg.millimeter,",
                "patterns=[",
                "re.compile('.*Durchmesser.*', flags=re.IGNORECASE),",
                "re.compile('.*Diameter.*', flags=re.IGNORECASE),",
                "re.compile('.*DN.*', flags=re.IGNORECASE),",
                "],"
            ],
            "length": [
                "description='Length of Valve',",
                "unit=ureg.meter,"
            ]
        },
        "pattern": [
            "Valve",
            "Drossel",
            "Ventil"
        ],
        "conditions": [
            "condition.RangeCondition(\"diameter\", 5.0 * ureg.millimeter, 500.00 * ureg.millimeter)  # ToDo: unit?!"
        ]
    },
    "IfcDuctSegment": {
        "name": "Duct",
        "attributes": {
            "diameter": [
                "description='Duct diameter',",
                "unit=ureg.millimeter,"
            ],
            "length": [
                "description='Length of Duct',",
                "unit=ureg.meter,"
            ]
        },
        "pattern": [
            "Duct.?segment"
        ]
    },
    "IfcDuctFitting": {
        "attributes": {
            "diameter": [
                "description='Duct diameter',",
                "unit=ureg.millimeter,"
            ],
            "length": [
                "description='Length of Duct',",
                "unit=ureg.meter,"
            ]
        },
        "pattern": [
            "Duct.?fitting"
        ]
    },
    "IfcAirTerminal": {
        "attributes": {
            "diameter": [
                "description='Terminal diameter',",
                "unit=ureg.millimeter,"
            ]
        },
        "pattern": [
            "Air.?terminal"
        ]
    },
    "IfcSpace": {
        "name": "ThermalZone",
        "attributes": {
            "zone_name": [
                "default_ps=True"
            ],
            "usage": [
                "functions=[_get_usage]"
            ],
            "t_set_heat": [
                "default_ps=True"
            ],
            "t_set_cool": [
                "default_ps=True"
            ],
            "area": [
                "default_ps=True,",
                "default=0"
            ],
            "net_volume": [
                "default_ps=True,",
                "default=0"
            ],
            "height": [
                "default_ps=True,",
                "default=0"
            ]
        },
        "functions": [
            "__init__",
            "_get_usage",
            "get__elements_by_type",
            "get_external_orientation",
            "get_glass_area",
            "get_is_external",
            "get_neighbors",
            "set_external_orientation",
            "set_glass_area",
            "set_is_external",
            "set_neighbors"
        ],
        "pattern": [
            "Space",
            "Zone"
        ]
    },
    "IfcRelSpaceBoundary": {
        "name": "SpaceBoundary",
        "parent": "element.SubElement",
        "functions": [
            "__init__"
        ],
        "attributes": {}
    },
    "IfcDistributionSystem": {
        "name": "Medium",
        "pattern": [
            "Medium"
        ],
        "attributes": {}
    },
    "IfcWall": {
        "attributes": {
            "layers": [
                "functions=[_get_layers]"
            ],
            "area": [
                "default_ps=True,",
                "default=1"
            ],
            "is_external": [
                "default_ps=True,",
                "default=False"
            ],
            "tilt": [
                "default_ps=True,",
                "default=0"
            ]
        },
        "functions": [
            "__init__",
            "_get_layers"
        ],
        "legacy": {
            "OuterWall": "special_argument = {'is_external': True}",
            "InnerWall": "special_argument = {'is_external': False}"
        },
        "pattern": [
            "Wall",
            "Wand"
        ]
    },
    "IfcMaterialLayer": {
        "name": "Layer",
        "parent": "element.SubElement",
        "attributes": {
            "heat_capac": [
                "default_ps=True,",
                "functions=[_get_material_properties],",
                "default=0"
            ],
            "density": [
                "functions=[_get_material_properties],",
                "default_ps=True,",
                "default=0"
            ],
            "thermal_conduc": [
                "functions=[_get_material_properties],",
                "default_ps=True,",
                "default=0"
            ]
        },
        "functions": [
            "__init__",
            "__repr__",
            "_get_material_properties"
        ]
    },
    "IfcWindow": {
        "attributes": {
            "layers": [
                "functions=[_get_layers]"
            ],
            "is_external": [
                "default_ps=True,",
                "default=True"
            ],
            "area": [
                "default_ps=True,",
                "default=0"
            ],
            "thickness": [
                "default_ps=True,",
                "default=0"
            ],
            "material": [
                "default_ps=True,",
                "default=0"
            ]
        },
        "functions": [
            "_get_layers"
        ],
        "pattern": [
            "Window",
            "Fenster"
        ]
    },
    "IfcDoor": {
        "attributes": {
            "layers": [
                "functions=[_get_layers]"
            ],
            "is_external": [
                "default_ps=True,",
                "default=False"
            ],
            "area": [
                "default_ps=True,",
                "default=0"
            ],
            "thickness": [
                "default_ps=True,",
                "default=0"
            ],
            "material": [
                "default_ps=True,",
                "default=0"
            ]
        },
        "functions": [
            "_get_layers"
        ],
        "pattern": [
            "Door",
            "Tuer"
        ]
    },
    "IfcPlate": {
        "attributes": {}
    },
    "IfcSlab": {
        "attributes": {
            "layers": [
                "functions=[_get_layers]"
            ],
            "area": [
                "default_ps=True,",
                "default=0"
            ],
            "thickness": [
                "default_ps=True,",
                "default=0"
            ],
            "thermal_transmittance": [
                "default_ps=True,",
                "default=0"
            ],
            "is_external": [
                "default_ps=True,",
                "default=0"
            ]
        },
        "functions": [
            "__init__",
            "_get_layers"
        ],
        "legacy": {
            "Floor": "predefined_type = \"FLOOR\"",
            "GroundFloor": "predefined_type = \"BASESLAB\""
        }
    },
    "IfcRoof": {
        "parent": "Slab",
        "functions": [
            "__init__"
        ],
        "predefined_type": "'ROOF'",
        "attributes": {}
    },
    "IfcSite": {
        "attributes": {}
    },
    "IfcBuilding": {
        "attributes": {
            "year_of_construction": [
                "default_ps=True"
            ],
            "gross_area": [
                "default_ps=True"
            ],
            "net_area": [
                "default_ps=True"
            ],
            "number_of_storeys": [
                "default_ps=True"
            ],
            "occupancy_type": [
                "default_ps=True"
            ]
        }
    },
    "IfcBuildingStorey": {
        "name": "Storey",
        "attributes": {
            "gross_floor_area": [
                "default_ps=True"
            ],
            "net_height": [
                "default_ps=True"
            ],
            "gross_height": [
                "default_ps=True"
            ],
            "height": [
                "default_ps=True"
            ]
        }
    }
}