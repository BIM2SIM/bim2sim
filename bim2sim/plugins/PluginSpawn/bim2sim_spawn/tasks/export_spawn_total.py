import os
from datetime import datetime
from pathlib import Path
import codecs
from mako.template import Template

import bim2sim
from bim2sim.elements.base_elements import ProductBased
from bim2sim.export import modelica
from bim2sim.export.modelica import help_package, help_package_order
from bim2sim.plugins.PluginSpawn.bim2sim_spawn.models import to_modelica_spawn
from bim2sim.tasks.base import ITask
from bim2sim.utilities.common_functions import filter_elements
from bim2sim.utilities.pyocc_tools import PyOCCTools


class ExportSpawnTotal(ITask):
    """Export total model for SpawnOfEnergyPlus model to Modelica"""

    reads = ('elements', 'weather_file_modelica', 'weather_file_ep',
             'zone_names', 'model_name_building', 'export_elements', 'connections',
             'cons_heat_ports_conv', 'cons_heat_ports_rad')
    final = True

    def run(self, elements: dict, weather_file_modelica: Path,
            weather_file_ep: Path, zone_names, model_name_building,
            export_elements, connections,
            cons_heat_ports_conv, cons_heat_ports_rad):
        self.logger.info("Export total Spawn model to Modelica code")

        package_path = self.paths.export / 'bim2sim_spawn'
        os.makedirs(package_path, exist_ok=True)
        model_name_hydraulic = 'HVACModel'
        model_name_total = 'TotalModel'
        help_package(path=package_path, name=package_path.stem, within="")
        help_package_order(path=package_path, package_list=[
            model_name_total,
            model_name_building,
            model_name_hydraulic])

        # EXPORT MULTIZONE MODEL
        # This is a "static" model for now, means no elements are created
        # dynamically but only the parameters are changed based on render
        # function
        templ_path_total = Path(
            bim2sim.__file__).parent / \
                              ('assets/templates/modelica/tmplSpawnTotalModel'
                               '.txt')

        with open(templ_path_total) as f:
            template_total_str = f.read()
        template_total = Template(template_total_str)
        weather_path_mos = weather_file_modelica
        tz_elements = filter_elements(elements, 'ThermalZone')
        space_heater_elements = filter_elements(elements,
                                               'SpaceHeater')
        tz_space_heater_mapping = []
        for tz in tz_elements:
            for space_heater in space_heater_elements:
                if PyOCCTools.obj2_in_obj1(
                        obj1=tz.space_shape, obj2=space_heater.shape):
                    tz_space_heater_mapping.append(
                        (tz.guid, space_heater.guid))
        # TODO this is gpt bullshit, refactor!
        # Create a map from space heater IDs to zone IDs
        space_heater_to_zone = {heater: zone for zone, heater in
                                tz_space_heater_mapping}

        # Create the conv and rad mappings
        cons_heat_ports_conv_building_hvac = []
        cons_heat_ports_rad_building_hvac = []

        # Fill cons_heat_ports_conv_building_hvac
        for hvac_port, heater_conn in cons_heat_ports_conv:
            heater_id = (heater_conn.split('.')[0].replace('spaceheater_', '')).replace('_', '$')
            zone_id = space_heater_to_zone[heater_id]
            building_port = f"{model_name_building.lower()}.heaPorCon[{tz_space_heater_mapping.index((zone_id, heater_id)) + 1}]"
            cons_heat_ports_conv_building_hvac.append(
                (building_port, f"{model_name_hydraulic.lower()}.{hvac_port}"))

        # Fill cons_heat_ports_rad_building_hvac
        for hvac_port, heater_conn in cons_heat_ports_rad:
            heater_id = (heater_conn.split('.')[0].replace('spaceheater_', '')).replace('_', '$')
            zone_id = space_heater_to_zone[heater_id]
            building_port = f"{model_name_building.lower()}.heaPorRad[{tz_space_heater_mapping.index((zone_id, heater_id)) + 1}]"
            cons_heat_ports_rad_building_hvac.append(
                (building_port, f"{model_name_hydraulic.lower()}.{hvac_port}"))

        # hvac/hydraulic model

        modelica_model = modelica.ModelicaModel(
            name=model_name_hydraulic,
            comment=f"Autogenerated by BIM2SIM on "
                    f"{datetime.now():%Y-%m-%d %H:%M:%S%z}",
            modelica_elements=list(export_elements.values()),
            connections=connections,
            connections_heat_ports_conv=cons_heat_ports_conv,
            connections_heat_ports_rad=cons_heat_ports_rad
        )
        modelica_model.save(package_path / f"{model_name_hydraulic}.mo")

        # TODO multithreading lock needed? see modelica/__init__.py for example
        # with lock:

        total_template_data = template_total.render(
            within='bim2sim_spawn',
            model_name=model_name_total,
            model_comment='test2',
            weather_path_mos=to_modelica_spawn(weather_path_mos),
            model_name_building=model_name_building,
            model_name_hydraulic=model_name_hydraulic,
            cons_heat_ports_conv_building_hvac=
            cons_heat_ports_conv_building_hvac,
            cons_heat_ports_rad_building_hvac=
            cons_heat_ports_rad_building_hvac,
        )

        export_path = package_path / f"{model_name_total}.mo"
        # user_logger.info("Saving '%s' to '%s'", self.name, _path)
        with codecs.open(export_path, "w", "utf-8") as file:
            file.write(total_template_data)

