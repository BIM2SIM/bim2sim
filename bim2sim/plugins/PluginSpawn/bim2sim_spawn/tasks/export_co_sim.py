from datetime import datetime

from bim2sim.elements.base_elements import ProductBased
from bim2sim.export import modelica
from bim2sim.tasks.base import ITask
from bim2sim.plugins.PluginBuildings.bim2sim_buildings.models import SpawnBuilding,\
    EPThermalZone, SpawnMultizone, FreshAirSource


class ExportModelicaSpawn(ITask):
    """Export to Dymola/Modelica"""

    reads = ('libraries', 'elements',)
    final = True

    def run(self, libraries: tuple, elements: dict):
        self.logger.info("Export to Modelica code")
        modelica.Instance.init_factory(libraries)
        export_elements = {inst: modelica.Instance.factory(inst)
                            for inst in elements.values()}

        yield from ProductBased.get_pending_attribute_decisions(
            elements.values())

        for instance in export_elements.values():
            instance.collect_params()
        static_connections = self.get_static_connections(export_elements)
        # TODO dynamic connections between multizone and hvac
        # dyn_connections = get_dynamic_connections(export_elements)
        # connections = static_connections + dyn_connections
        connections = static_connections

        self.logger.info(
            "Creating Modelica model with %d model elements.",
            len(export_elements),)

        prj_name = self.prj_name.replace('-','_')

        modelica_model = modelica.Model(
            name="bim2sim_"+prj_name,
            comment=f"Autogenerated by BIM2SIM on {datetime.now():%Y-%m-%d %H:%M:%S%z}",
            elements=list(export_elements.values()),
            connections=connections,
        )
        modelica_model.save(self.paths.export)

    def get_static_connections(self, elements):
        connections = []
        for inst in elements.values():
            if isinstance(inst, SpawnBuilding):
                spawn_building = inst
            if isinstance(inst, FreshAirSource):
                fresh_air = inst
            if isinstance(inst, SpawnMultizone):
                multi = inst
        # TODO remove if as this is only temporary for development
        if spawn_building and fresh_air and multi:
            connections.append((str(spawn_building.name)+'.weaBus',
                            str(fresh_air.name) +'.weaBus'))
            # TODO clarify export and arrays in modelica
            connections.append((
                str(multi.name)+".portsExt[nZones]",
                str(fresh_air.name)+".ports[nPorts]"))
        return connections
